Auxiliary/Aux_Check_FluxAllocate.cpp:10:// Note        :  1. This function will not check anything if "amr->WithFlux == false", in which no flux
Auxiliary/Aux_Check_FluxAllocate.cpp:28:   if ( !amr->WithFlux )
Auxiliary/Aux_Check_FluxAllocate.cpp:46:         for (int PID=0; PID<amr->NPatchComma[lv][3]; PID++)
Auxiliary/Aux_Check_FluxAllocate.cpp:48:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_FluxAllocate.cpp:51:            SonPID = amr->patch[0][lv][PID]->son;
Auxiliary/Aux_Check_FluxAllocate.cpp:55:               FluxPtr = amr->patch[0][lv][PID]->flux[sib];
Auxiliary/Aux_Check_FluxAllocate.cpp:59:                  SibPID = amr->patch[0][lv][PID]->sibling[sib];
Auxiliary/Aux_Check_FluxAllocate.cpp:63:                     SibSonPID = amr->patch[0][lv][SibPID]->son;
Auxiliary/Aux_Check_FluxAllocate.cpp:78:                                     MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:79:                                                         amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:80:                                                         amr->patch[0][lv][PID]->corner[2], "O", "X" );
Auxiliary/Aux_Check_FluxAllocate.cpp:85:                     if (   (  ( PID <  amr->NPatchComma[lv][1] && SibSonPID != -1) ||
Auxiliary/Aux_Check_FluxAllocate.cpp:86:                               ( PID >= amr->NPatchComma[lv][1] && SibSonPID >= 0 )  )
Auxiliary/Aux_Check_FluxAllocate.cpp:103:                                     MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:104:                                                         amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:105:                                                         amr->patch[0][lv][PID]->corner[2], "X", "O" );
Auxiliary/Aux_Check_FluxAllocate.cpp:124:                                     MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:125:                                                         amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:126:                                                         amr->patch[0][lv][PID]->corner[2], "O", "X" );
Auxiliary/Aux_Check_FluxAllocate.cpp:146:                                  MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:147:                                                      amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:148:                                                      amr->patch[0][lv][PID]->corner[2], "O", "X" );
Auxiliary/Aux_Check_FluxAllocate.cpp:152:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_FluxAllocate.cpp:164:            for (int PID0=amr->NPatchComma[lv][1+sib]; PID0<amr->NPatchComma[lv][2+sib]; PID0+=8)
Auxiliary/Aux_Check_FluxAllocate.cpp:168:               SonPID = amr->patch[0][lv][PID]->son;
Auxiliary/Aux_Check_FluxAllocate.cpp:170:               FluxPtr = amr->patch[0][lv][PID]->flux[ MirrorSib[sib] ];
Auxiliary/Aux_Check_FluxAllocate.cpp:174:                  SibPID = amr->patch[0][lv][PID]->sibling[ MirrorSib[sib] ];
Auxiliary/Aux_Check_FluxAllocate.cpp:181:                     SibSonPID = amr->patch[0][lv][SibPID]->son;
Auxiliary/Aux_Check_FluxAllocate.cpp:196:                                     MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:197:                                                         amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:198:                                                         amr->patch[0][lv][PID]->corner[2], "O", "X" );
Auxiliary/Aux_Check_FluxAllocate.cpp:214:                                     MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:215:                                                         amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:216:                                                         amr->patch[0][lv][PID]->corner[2], "X", "O" );
Auxiliary/Aux_Check_FluxAllocate.cpp:235:                                     MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:236:                                                         amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:237:                                                         amr->patch[0][lv][PID]->corner[2], "O", "X" );
Auxiliary/Aux_Check_FluxAllocate.cpp:257:                                  MPI_Rank, PID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_FluxAllocate.cpp:258:                                                      amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_FluxAllocate.cpp:259:                                                      amr->patch[0][lv][PID]->corner[2], "O", "X" );
Auxiliary/Aux_Check_FluxAllocate.cpp:263:            } // for (int PID0=amr->NPatchComma[lv][1+sib]; PID0<amr->NPatchComma[lv][2+sib]; PID0+=8)
Auxiliary/Aux_Check_ProperNesting.cpp:38:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_ProperNesting.cpp:40:            FaPID = amr->patch[0][lv][PID]->father;
Auxiliary/Aux_Check_ProperNesting.cpp:56:                            MPI_Rank, PID, FaPID, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_ProperNesting.cpp:57:                                                  amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_ProperNesting.cpp:58:                                                  amr->patch[0][lv][PID]->corner[2]  );
Auxiliary/Aux_Check_ProperNesting.cpp:63:               FaSibPID = amr->patch[0][lv-1][FaPID]->sibling[sib];
Auxiliary/Aux_Check_ProperNesting.cpp:79:                               MPI_Rank, PID, FaPID, sib, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_ProperNesting.cpp:80:                                                          amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_ProperNesting.cpp:81:                                                          amr->patch[0][lv][PID]->corner[2]  );
Auxiliary/Aux_Check_ProperNesting.cpp:84:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_Refinement.cpp:59:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_Refinement.cpp:61:            if ( amr->patch[0][lv][PID]->son == -1 )
Auxiliary/Aux_Check_Refinement.cpp:69:                  Rho = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[DENS][k][j][i];
Auxiliary/Aux_Check_Refinement.cpp:84:                                  MPI_Rank, PID, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_Refinement.cpp:85:                                                 amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_Refinement.cpp:86:                                                 amr->patch[0][lv][PID]->corner[2], i, j, k, Rho );
Auxiliary/Aux_Check_Refinement.cpp:96:            } // if ( amr->patch[0][lv][PID]->son == -1 )
Auxiliary/Aux_Check_Refinement.cpp:119:      MPI_Reduce( &amr->NPatchComma[lv][1], &NPatch_Sum , 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD );
Auxiliary/Aux_Check_Restrict.cpp:38:   const int FSg = amr->FluSg[lv+1];
Auxiliary/Aux_Check_Restrict.cpp:39:   const int CSg = amr->FluSg[lv  ];
Auxiliary/Aux_Check_Restrict.cpp:55:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_Restrict.cpp:57:            SonPID0 = amr->patch[0][lv][PID]->son;
Auxiliary/Aux_Check_Restrict.cpp:82:                     ResData[v][kk][jj][ii] += 0.125*amr->patch[FSg][lv+1][SonPID]->fluid[v][k][j][i];
Auxiliary/Aux_Check_Restrict.cpp:96:                  u = amr->patch[CSg][lv][PID]->fluid[v][k][j][i];
Auxiliary/Aux_Check_Restrict.cpp:114:                                  MPI_Rank, PID, amr->patch[0][lv][PID]->corner[0],
Auxiliary/Aux_Check_Restrict.cpp:115:                                                 amr->patch[0][lv][PID]->corner[1],
Auxiliary/Aux_Check_Restrict.cpp:116:                                                 amr->patch[0][lv][PID]->corner[2],
Auxiliary/Aux_Check_Restrict.cpp:123:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Record_BoundaryPatch.cpp:22:   const int scale0 = amr->scale[ 0];
Auxiliary/Aux_Record_BoundaryPatch.cpp:23:   const int scale  = amr->scale[lv];        // Pos      : Patch position in (x,y,z) direction
Auxiliary/Aux_Record_BoundaryPatch.cpp:33:   for (int P=0; P<amr->num[lv]; P++)
Auxiliary/Aux_Record_BoundaryPatch.cpp:35:      LCorner[0]  = amr->patch[0][lv][P]->corner[0] - MPI_Rank_X[0]*NX0[0]*scale0;
Auxiliary/Aux_Record_BoundaryPatch.cpp:36:      LCorner[1]  = amr->patch[0][lv][P]->corner[1] - MPI_Rank_X[1]*NX0[1]*scale0;
Auxiliary/Aux_Record_BoundaryPatch.cpp:37:      LCorner[2]  = amr->patch[0][lv][P]->corner[2] - MPI_Rank_X[2]*NX0[2]*scale0;
Auxiliary/Aux_Record_BoundaryPatch.cpp:282:   } // for (int P=0; P<amr->num[lv]; P++)
Auxiliary/Aux_Record_CorrUnphy.cpp:63:         NUpdate = amr->NUpdateLv[lv]*NPatchTotal[lv]*CUBE( PATCH_SIZE );
Auxiliary/Aux_Record_PatchCount.cpp:33:   for (int lv=0; lv<NLEVEL; lv++)  NPatch_Local[lv] = amr->NPatchComma[lv][1];
Auxiliary/Aux_Record_PatchCount.cpp:109:         WLoad_Max += (double)amr->NUpdateLv[lv]*Load_Max[lv];
Auxiliary/Aux_Record_PatchCount.cpp:110:         WLoad_Ave += (double)amr->NUpdateLv[lv]*Load_Ave[lv];
Auxiliary/Aux_Check_Conservation.cpp:111:      dv    = CUBE( amr->dh[lv] );
Auxiliary/Aux_Check_Conservation.cpp:112:      FluSg = amr->FluSg[lv];
Auxiliary/Aux_Check_Conservation.cpp:114:      PotSg = amr->PotSg[lv];
Auxiliary/Aux_Check_Conservation.cpp:117:      MagSg = amr->MagSg[lv];
Auxiliary/Aux_Check_Conservation.cpp:120:      _dh2  = 0.5/amr->dh[lv];
Auxiliary/Aux_Check_Conservation.cpp:124:      for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Auxiliary/Aux_Check_Conservation.cpp:140:            if ( amr->patch[0][lv][PID]->son == -1 )
Auxiliary/Aux_Check_Conservation.cpp:153:                  Dens = amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:154:                  MomX = amr->patch[FluSg][lv][PID]->fluid[MOMX][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:155:                  MomY = amr->patch[FluSg][lv][PID]->fluid[MOMY][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:156:                  MomZ = amr->patch[FluSg][lv][PID]->fluid[MOMZ][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:157:                  Etot = amr->patch[FluSg][lv][PID]->fluid[ENGY][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:173:                  if      (  OPT__SELF_GRAVITY  &&  !OPT__EXT_POT )  Epot = 0.5*Dens*amr->patch[PotSg][lv][PID]->pot[k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:174:                  else if ( !OPT__SELF_GRAVITY  &&   OPT__EXT_POT )  Epot =     Dens*amr->patch[PotSg][lv][PID]->pot[k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:197:                  Fluid_lv[0] += amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:205:                  Fluid_lv[2] += 0.5*amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i]
Auxiliary/Aux_Check_Conservation.cpp:206:                                    *amr->patch[PotSg][lv][PID]->pot        [k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:209:                  Fluid_lv[2] +=     amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i]
Auxiliary/Aux_Check_Conservation.cpp:210:                                    *amr->patch[PotSg][lv][PID]->pot        [k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:215:                  Fluid_lv[3] += 0.5*ELBDM_LAMBDA*SQR( amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i] );
Auxiliary/Aux_Check_Conservation.cpp:254:                     Fluid_lv[v1] += amr->patch[FluSg][lv][PID]->fluid[v2][k][j][i];
Auxiliary/Aux_Check_Conservation.cpp:256:            } // if ( amr->patch[0][lv][PID]->son == -1 )
Auxiliary/Aux_Check_Conservation.cpp:258:      } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Auxiliary/Aux_Check_Finite.cpp:37:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_Finite.cpp:46:               Data[ NextIdx ++ ] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Auxiliary/Aux_Check_Finite.cpp:49:               Data[ NextIdx ++ ] = amr->patch[ amr->PotSg[lv] ][lv][PID]->pot[k][j][i];
Auxiliary/Aux_Check_Finite.cpp:54:               const real Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Auxiliary/Aux_Check_Finite.cpp:84:                                  amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*amr->dh[lv],
Auxiliary/Aux_Check_Finite.cpp:85:                                  amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*amr->dh[lv],
Auxiliary/Aux_Check_Finite.cpp:86:                                  amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*amr->dh[lv],
Auxiliary/Aux_Check_Finite.cpp:91:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_NormalizePassive.cpp:50:   const int    FluSg  = amr->FluSg[lv];
Auxiliary/Aux_Check_NormalizePassive.cpp:60:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_NormalizePassive.cpp:68:               GasDens = amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i];
Auxiliary/Aux_Check_NormalizePassive.cpp:73:               Sum += amr->patch[FluSg][lv][PID]->fluid[ NCOMP_FLUID + PassiveNorm_VarIdx[v] ][k][j][i];
Auxiliary/Aux_Check_NormalizePassive.cpp:94:                  Aux_Message( stderr, "  %13.7e", amr->patch[FluSg][lv][PID]->fluid[ NCOMP_FLUID + PassiveNorm_VarIdx[v] ][k][j][i] );
Auxiliary/Aux_Check_NormalizePassive.cpp:99:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Check_Parameter.cpp:102:         ( OUTPUT_PART_X < 0.0  ||  OUTPUT_PART_X >= amr->BoxSize[0] )  )
Auxiliary/Aux_Check_Parameter.cpp:103:      Aux_Error( ERROR_INFO, "incorrect OUTPUT_PART_X (out of range [0<=X<%lf]) !!\n", amr->BoxSize[0] );
Auxiliary/Aux_Check_Parameter.cpp:106:         ( OUTPUT_PART_Y < 0.0  ||  OUTPUT_PART_Y >= amr->BoxSize[1] )  )
Auxiliary/Aux_Check_Parameter.cpp:107:      Aux_Error( ERROR_INFO, "incorrect OUTPUT_PART_Y (out of range [0<=Y<%lf]) !!\n", amr->BoxSize[1] );
Auxiliary/Aux_Check_Parameter.cpp:110:         ( OUTPUT_PART_Z < 0.0  ||  OUTPUT_PART_Z >= amr->BoxSize[2] )  )
Auxiliary/Aux_Check_Parameter.cpp:111:      Aux_Error( ERROR_INFO, "incorrect OUTPUT_PART_Z (out of range [0<=Z<%lf]) !!\n", amr->BoxSize[2] );
Auxiliary/Aux_Check_Parameter.cpp:221:      if ( !amr->Par->ImproveAcc )
Auxiliary/Aux_Check_Parameter.cpp:470:   const int BoxNScale_Padded[3] = { amr->BoxScale[0]/PATCH_SIZE + 2*Padded,
Auxiliary/Aux_Check_Parameter.cpp:471:                                     amr->BoxScale[1]/PATCH_SIZE + 2*Padded,
Auxiliary/Aux_Check_Parameter.cpp:472:                                     amr->BoxScale[2]/PATCH_SIZE + 2*Padded };
Auxiliary/Aux_Check_Parameter.cpp:556:   if ( OPT__FIXUP_FLUX  &&  !amr->WithFlux )
Auxiliary/Aux_Check_Parameter.cpp:557:      Aux_Error( ERROR_INFO, "%s is enabled but amr->WithFlux is off !!\n", "OPT__FIXUP_FLUX" );
Auxiliary/Aux_Check_Parameter.cpp:584:   if ( OPT__CK_FLUX_ALLOCATE  &&  !amr->WithFlux )
Auxiliary/Aux_Check_Parameter.cpp:994:   if ( OPT__FIXUP_ELECTRIC  &&  !amr->WithElectric )
Auxiliary/Aux_Check_Parameter.cpp:995:      Aux_Error( ERROR_INFO, "%s is enabled but amr->Electric is off !!\n", "OPT__FIXUP_ELECTRIC" );
Auxiliary/Aux_Check_Parameter.cpp:1325:      if ( amr->Par->Init == PAR_INIT_BY_RESTART )    Aux_Error( ERROR_INFO, "PAR_INIT == RESTART but OPT__INIT != RESTART !!\n" );
Auxiliary/Aux_Check_Parameter.cpp:1327:      if ( amr->Par->NPar_Active_AllRank < 0 )
Auxiliary/Aux_Check_Parameter.cpp:1329:                    amr->Par->NPar_Active_AllRank );
Auxiliary/Aux_Check_Parameter.cpp:1331:      if ( amr->Par->NPar_AcPlusInac < 0  ||  amr->Par->NPar_AcPlusInac > amr->Par->NPar_Active_AllRank )
Auxiliary/Aux_Check_Parameter.cpp:1333:                    amr->Par->NPar_AcPlusInac, MPI_Rank );
Auxiliary/Aux_Check_Parameter.cpp:1338:   if ( amr->Par->ImproveAcc )
Auxiliary/Aux_Check_Parameter.cpp:1342:   if ( amr->Par->ImproveAcc  &&  amr->Par->Interp == 1 )
Auxiliary/Aux_Check_Parameter.cpp:1345:   if ( amr->Par->TracerVelCorr  &&  amr->Par->InterpTracer == 1 )
Auxiliary/Aux_Check_Parameter.cpp:1377:   if ( !amr->Par->ImproveAcc )
Auxiliary/Aux_Check_PatchAllocate.cpp:34:   const int PScale             = PATCH_SIZE*amr->scale[lv];
Auxiliary/Aux_Check_PatchAllocate.cpp:36:   const int BoxScale_Padded[3] = { amr->BoxScale[0] + 2*PGScale,
Auxiliary/Aux_Check_PatchAllocate.cpp:37:                                    amr->BoxScale[1] + 2*PGScale,
Auxiliary/Aux_Check_PatchAllocate.cpp:38:                                    amr->BoxScale[2] + 2*PGScale };
Auxiliary/Aux_Check_PatchAllocate.cpp:39:   int    NReal = amr->NPatchComma[lv][ 1];
Auxiliary/Aux_Check_PatchAllocate.cpp:40:   int    NTot  = amr->NPatchComma[lv][27];
Auxiliary/Aux_Check_PatchAllocate.cpp:72:               Cr_Padded[d] = amr->patch[0][lv][PID]->corner[d] + PGScale;
Auxiliary/Aux_Check_PatchAllocate.cpp:125:               const int SibPID = amr->patch[0][lv][PID]->sibling[s];
Auxiliary/Aux_Check_PatchAllocate.cpp:131:                     int corner_ck = amr->patch[0][lv][PID]->corner[d] + TABLE_01( s, 'x'+d, -PScale, 0, PScale );
Auxiliary/Aux_Check_PatchAllocate.cpp:132:                         corner_ck = ( corner_ck + amr->BoxScale[d] ) % amr->BoxScale[d];    // take care of periodic BC
Auxiliary/Aux_Check_PatchAllocate.cpp:134:                     if ( corner_ck != amr->patch[0][lv][SibPID]->corner[d] )
Auxiliary/Aux_Check_PatchAllocate.cpp:144:                                     MPI_Rank, s, PID, SibPID, d, amr->patch[0][lv][PID]->corner[d],
Auxiliary/Aux_Check_PatchAllocate.cpp:145:                                     TABLE_01( s, 'x'+d, -PScale, 0, PScale ), amr->patch[0][lv][SibPID]->corner[d] );
Auxiliary/Aux_Check_PatchAllocate.cpp:240:               if      ( Cr_Padded[d] < PGScale )                             Cr_Padded[d] += amr->BoxScale[d];
Auxiliary/Aux_Check_PatchAllocate.cpp:241:               else if ( Cr_Padded[d] > BoxScale_Padded[d]-PGScale-PScale )   Cr_Padded[d] -= amr->BoxScale[d];
Auxiliary/Aux_ComputeProfile.cpp:58:// Example     :  const double      Center[3]      = { amr->BoxCenter[0], amr->BoxCenter[1], amr->BoxCenter[2] };
Auxiliary/Aux_ComputeProfile.cpp:59://                const double      MaxRadius      = 0.5*amr->BoxSize[0];
Auxiliary/Aux_ComputeProfile.cpp:60://                const double      MinBinSize     = amr->dh[MAX_LEVEL];
Auxiliary/Aux_ComputeProfile.cpp:199:   const double HalfBox[3]  = { 0.5*amr->BoxSize[0], 0.5*amr->BoxSize[1], 0.5*amr->BoxSize[2] };
Auxiliary/Aux_ComputeProfile.cpp:230:         const double dh = amr->dh[lv];
Auxiliary/Aux_ComputeProfile.cpp:236:         int  FluSg      = amr->FluSg[lv];
Auxiliary/Aux_ComputeProfile.cpp:242:         int  MagSg      = amr->MagSg[lv];
Auxiliary/Aux_ComputeProfile.cpp:249:         int  PotSg      = amr->PotSg[lv];
Auxiliary/Aux_ComputeProfile.cpp:257:            const int FluSg0 = amr->FluSg[lv];
Auxiliary/Aux_ComputeProfile.cpp:258:            SetTempIntPara( lv, FluSg0, PrepTime, amr->FluSgTime[lv][FluSg0], amr->FluSgTime[lv][1-FluSg0],
Auxiliary/Aux_ComputeProfile.cpp:263:            const int MagSg0 = amr->MagSg[lv];
Auxiliary/Aux_ComputeProfile.cpp:264:            SetTempIntPara( lv, MagSg0, PrepTime, amr->MagSgTime[lv][MagSg0], amr->MagSgTime[lv][1-MagSg0],
Auxiliary/Aux_ComputeProfile.cpp:271:            const int PotSg0 = amr->PotSg[lv];
Auxiliary/Aux_ComputeProfile.cpp:272:            SetTempIntPara( lv, PotSg0, PrepTime, amr->PotSgTime[lv][PotSg0], amr->PotSgTime[lv][1-PotSg0],
Auxiliary/Aux_ComputeProfile.cpp:281:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_ComputeProfile.cpp:284:            if ( amr->patch[0][lv][PID]->son != -1 )
Auxiliary/Aux_ComputeProfile.cpp:296:            const real (*FluidPtr)[PS1][PS1][PS1] = amr->patch[ FluSg ][lv][PID]->fluid;
Auxiliary/Aux_ComputeProfile.cpp:298:            const real (*PotPtr  )[PS1][PS1]      = amr->patch[ PotSg ][lv][PID]->pot;
Auxiliary/Aux_ComputeProfile.cpp:302:            const real (*FluidPtr_IntT)[PS1][PS1][PS1] = ( FluIntTime ) ? amr->patch[ FluSg_IntT ][lv][PID]->fluid : NULL;
Auxiliary/Aux_ComputeProfile.cpp:304:            const real (*PotPtr_IntT  )[PS1][PS1]      = ( PotIntTime ) ? amr->patch[ PotSg_IntT ][lv][PID]->pot   : NULL;
Auxiliary/Aux_ComputeProfile.cpp:308:            const double x0 = amr->patch[0][lv][PID]->EdgeL[0] + 0.5*dh - Center[0];
Auxiliary/Aux_ComputeProfile.cpp:309:            const double y0 = amr->patch[0][lv][PID]->EdgeL[1] + 0.5*dh - Center[1];
Auxiliary/Aux_ComputeProfile.cpp:310:            const double z0 = amr->patch[0][lv][PID]->EdgeL[2] + 0.5*dh - Center[2];
Auxiliary/Aux_ComputeProfile.cpp:314:                                             if      ( dz > +HalfBox[2] )  {  dz -= amr->BoxSize[2];  }
Auxiliary/Aux_ComputeProfile.cpp:315:                                             else if ( dz < -HalfBox[2] )  {  dz += amr->BoxSize[2];  }
Auxiliary/Aux_ComputeProfile.cpp:319:                                             if      ( dy > +HalfBox[1] )  {  dy -= amr->BoxSize[1];  }
Auxiliary/Aux_ComputeProfile.cpp:320:                                             else if ( dy < -HalfBox[1] )  {  dy += amr->BoxSize[1];  }
Auxiliary/Aux_ComputeProfile.cpp:324:                                             if      ( dx > +HalfBox[0] )  {  dx -= amr->BoxSize[0];  }
Auxiliary/Aux_ComputeProfile.cpp:325:                                             else if ( dx < -HalfBox[0] )  {  dx += amr->BoxSize[0];  }
Auxiliary/Aux_ComputeProfile.cpp:539:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Auxiliary/Aux_Record_Performance.cpp:30:   MPI_Reduce( amr->Par->NPar_Lv, NPar_Lv_AllRank, NLEVEL, MPI_LONG, MPI_SUM, 0, MPI_COMM_WORLD );
Auxiliary/Aux_Record_Performance.cpp:76:         NUpdateCell   += NCellThisLevel     *amr->NUpdateLv[lv];
Auxiliary/Aux_Record_Performance.cpp:78:         NUpdatePar    += NPar_Lv_AllRank[lv]*amr->NUpdateLv[lv];
Auxiliary/Aux_Record_Performance.cpp:108:               (double)amr->Par->NPar_Active_AllRank, (double)NUpdatePar, NUpdatePar_PerSec, NUpdatePar_PerSec_PerRank );
Auxiliary/Aux_Record_Performance.cpp:112:      fprintf( File_Record, "%14ld", amr->NUpdateLv[lv] );
Auxiliary/Aux_TakeNote.cpp:651:      fprintf( Note, "BOX_SIZE_X                      %20.14e\n", amr->BoxSize[0]  );
Auxiliary/Aux_TakeNote.cpp:652:      fprintf( Note, "BOX_SIZE_Y                      %20.14e\n", amr->BoxSize[1]  );
Auxiliary/Aux_TakeNote.cpp:653:      fprintf( Note, "BOX_SIZE_Z                      %20.14e\n", amr->BoxSize[2]  );
Auxiliary/Aux_TakeNote.cpp:654:      fprintf( Note, "BOX_SCALE_X                     %d\n",      amr->BoxScale[0] );
Auxiliary/Aux_TakeNote.cpp:655:      fprintf( Note, "BOX_SCALE_Y                     %d\n",      amr->BoxScale[1] );
Auxiliary/Aux_TakeNote.cpp:656:      fprintf( Note, "BOX_SCALE_Z                     %d\n",      amr->BoxScale[2] );
Auxiliary/Aux_TakeNote.cpp:752:      fprintf( Note, "Par->NPar_Active_AllRank        %ld\n",     amr->Par->NPar_Active_AllRank );
Auxiliary/Aux_TakeNote.cpp:753:      fprintf( Note, "Par->Init                       %d\n",      amr->Par->Init                );
Auxiliary/Aux_TakeNote.cpp:754:      fprintf( Note, "Par->ParICFormat                %d\n",      amr->Par->ParICFormat         );
Auxiliary/Aux_TakeNote.cpp:755:      fprintf( Note, "Par->ParICMass                 %14.7e\n",   amr->Par->ParICMass           );
Auxiliary/Aux_TakeNote.cpp:756:      fprintf( Note, "Par->ParICType                  %d\n",      amr->Par->ParICType           );
Auxiliary/Aux_TakeNote.cpp:757:      fprintf( Note, "Par->Interp                     %d\n",      amr->Par->Interp              );
Auxiliary/Aux_TakeNote.cpp:758:      fprintf( Note, "Par->Integ                      %d\n",      amr->Par->Integ               );
Auxiliary/Aux_TakeNote.cpp:759:      fprintf( Note, "Par->GhostSize                  %d\n",      amr->Par->GhostSize           );
Auxiliary/Aux_TakeNote.cpp:760:      fprintf( Note, "Par->ImproveAcc                 %d\n",      amr->Par->ImproveAcc          );
Auxiliary/Aux_TakeNote.cpp:761:      fprintf( Note, "Par->PredictPos                 %d\n",      amr->Par->PredictPos          );
Auxiliary/Aux_TakeNote.cpp:762:      fprintf( Note, "Par->RemoveCell                 %13.7e\n",  amr->Par->RemoveCell          );
Auxiliary/Aux_TakeNote.cpp:763:      fprintf( Note, "Par->InterpTracer               %d\n",      amr->Par->InterpTracer        );
Auxiliary/Aux_TakeNote.cpp:764:      fprintf( Note, "Par->IntegTracer                %d\n",      amr->Par->IntegTracer         );
Auxiliary/Aux_TakeNote.cpp:765:      fprintf( Note, "Par->GhostSizeTracer            %d\n",      amr->Par->GhostSizeTracer     );
Auxiliary/Aux_TakeNote.cpp:766:      fprintf( Note, "Par->TracerVelCorr              %d\n",      amr->Par->TracerVelCorr       );
Auxiliary/Aux_TakeNote.cpp:885:      fprintf( Note, "LB_WLI_MAX                      %13.7e\n",  amr->LB->WLI_Max          );
Auxiliary/Aux_TakeNote.cpp:887:      fprintf( Note, "LB_PAR_WEIGHT                   %13.7e\n",  amr->LB->Par_Weight       );
Auxiliary/Aux_TakeNote.cpp:1088:      fprintf( Note, "WITH_COARSE_FINE_FLUX           %d\n",      amr->WithFlux            );
Auxiliary/Aux_TakeNote.cpp:1090:      fprintf( Note, "WITH_COARSE_FINE_ELECTRIC       %d\n",      amr->WithElectric        );
Auxiliary/Aux_TakeNote.cpp:1546:      fprintf( Note, "%7d%*c%26.20lf%*c%16d\n", lv, 10, ' ', amr->dh[lv], 10, ' ', amr->scale[lv] );
Buffer/Buf_AllocateBufferPatch.cpp:56:      Send_PosList[s] = new int [ Tamr->ParaVar->BounP_NList[lv-1][s] ];
Buffer/Buf_AllocateBufferPatch.cpp:58:      for (int ID=0; ID<Tamr->ParaVar->BounP_NList[lv-1][s]; ID++)
Buffer/Buf_AllocateBufferPatch.cpp:60:         RefinePos = Tamr->ParaVar->BounP_PosList[lv-1][s][ID];
Buffer/Buf_AllocateBufferPatch.cpp:61:         BounPID   = Tamr->ParaVar->BounP_IDList [lv-1][s][ID];
Buffer/Buf_AllocateBufferPatch.cpp:62:         SonPID    = Tamr->patch[0][lv-1][BounPID]->son;
Buffer/Buf_AllocateBufferPatch.cpp:67:            if ( BounPID >= Tamr->NPatchComma[lv-1][1] )
Buffer/Buf_AllocateBufferPatch.cpp:84:   const int scale = Tamr->scale[lv];
Buffer/Buf_AllocateBufferPatch.cpp:114:         while ( Tamr->ParaVar->BounP_PosList[lv-1][s][TargetID] != RefinePos )
Buffer/Buf_AllocateBufferPatch.cpp:120:            if ( TargetID >= Tamr->ParaVar->BounP_NList[lv-1][s] )
Buffer/Buf_AllocateBufferPatch.cpp:125:         BounPID = Tamr->ParaVar->BounP_IDList[lv-1][s][TargetID];
Buffer/Buf_AllocateBufferPatch.cpp:126:         BuffPID = Tamr->patch[0][lv-1][BounPID]->sibling[s];
Buffer/Buf_AllocateBufferPatch.cpp:131:         if ( BuffPID < Tamr->NPatchComma[lv-1][1]  ||  BuffPID >= Tamr->num[lv-1] )
Buffer/Buf_AllocateBufferPatch.cpp:137:         Corner = Tamr->patch[0][lv-1][BuffPID]->corner;
Buffer/Buf_AllocateBufferPatch.cpp:139:         Tamr->patch[0][lv-1][BuffPID]->son = Tamr->num[lv];
Buffer/Buf_AllocateBufferPatch.cpp:141:         Tamr->pnew( lv, Corner[0],      Corner[1],      Corner[2],      BuffPID, AllocData[0], AllocData[0], AllocData[0] );
Buffer/Buf_AllocateBufferPatch.cpp:142:         Tamr->pnew( lv, Corner[0]+Disp, Corner[1],      Corner[2],      BuffPID, AllocData[1], AllocData[1], AllocData[1] );
Buffer/Buf_AllocateBufferPatch.cpp:143:         Tamr->pnew( lv, Corner[0],      Corner[1]+Disp, Corner[2],      BuffPID, AllocData[2], AllocData[2], AllocData[2] );
Buffer/Buf_AllocateBufferPatch.cpp:144:         Tamr->pnew( lv, Corner[0],      Corner[1],      Corner[2]+Disp, BuffPID, AllocData[3], AllocData[3], AllocData[3] );
Buffer/Buf_AllocateBufferPatch.cpp:145:         Tamr->pnew( lv, Corner[0]+Disp, Corner[1]+Disp, Corner[2],      BuffPID, AllocData[4], AllocData[4], AllocData[4] );
Buffer/Buf_AllocateBufferPatch.cpp:146:         Tamr->pnew( lv, Corner[0],      Corner[1]+Disp, Corner[2]+Disp, BuffPID, AllocData[5], AllocData[5], AllocData[5] );
Buffer/Buf_AllocateBufferPatch.cpp:147:         Tamr->pnew( lv, Corner[0]+Disp, Corner[1],      Corner[2]+Disp, BuffPID, AllocData[6], AllocData[6], AllocData[6] );
Buffer/Buf_AllocateBufferPatch.cpp:148:         Tamr->pnew( lv, Corner[0]+Disp, Corner[1]+Disp, Corner[2]+Disp, BuffPID, AllocData[7], AllocData[7], AllocData[7] );
Buffer/Buf_AllocateBufferPatch.cpp:151:         Tamr->NPatchComma[lv][s+2] += 8;
Buffer/Buf_AllocateBufferPatch.cpp:155:      for (int n=s+3; n<28; n++)    Tamr->NPatchComma[lv][n] = Tamr->num[lv];
Buffer/Buf_AllocateBufferPatch.cpp:160:   if ( Tamr->NPatchComma[lv][27] != Tamr->num[lv] )
Buffer/Buf_AllocateBufferPatch.cpp:161:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][27] (%d) != amr->num[%d] (%d) !!\n",
Buffer/Buf_AllocateBufferPatch.cpp:162:                 lv, Tamr->NPatchComma[lv][27], lv, Tamr->num[lv] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:22:   const int scale0 = Tamr->scale[0];
Buffer/Buf_AllocateBufferPatch_Base.cpp:59:         Tamr->pnew( 0, Cr[0],       Cr[1],       Cr[2],       -1, AllocData[0], AllocData[0], AllocData[0] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:60:         Tamr->pnew( 0, Cr[0]+Width, Cr[1],       Cr[2],       -1, AllocData[1], AllocData[1], AllocData[1] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:61:         Tamr->pnew( 0, Cr[0],       Cr[1]+Width, Cr[2],       -1, AllocData[2], AllocData[2], AllocData[2] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:62:         Tamr->pnew( 0, Cr[0],       Cr[1],       Cr[2]+Width, -1, AllocData[3], AllocData[3], AllocData[3] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:63:         Tamr->pnew( 0, Cr[0]+Width, Cr[1]+Width, Cr[2],       -1, AllocData[4], AllocData[4], AllocData[4] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:64:         Tamr->pnew( 0, Cr[0],       Cr[1]+Width, Cr[2]+Width, -1, AllocData[5], AllocData[5], AllocData[5] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:65:         Tamr->pnew( 0, Cr[0]+Width, Cr[1],       Cr[2]+Width, -1, AllocData[6], AllocData[6], AllocData[6] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:66:         Tamr->pnew( 0, Cr[0]+Width, Cr[1]+Width, Cr[2]+Width, -1, AllocData[7], AllocData[7], AllocData[7] );
Buffer/Buf_AllocateBufferPatch_Base.cpp:68:         Tamr->NPatchComma[0][s+2] += 8;
Buffer/Buf_AllocateBufferPatch_Base.cpp:72:      for (int n=s+3; n<28; n++)    Tamr->NPatchComma[0][n] = Tamr->num[0];
Buffer/Buf_AllocateBufferPatch_Base.cpp:76:   if ( Tamr->NPatchComma[0][27] != Tamr->num[0] )
Buffer/Buf_AllocateBufferPatch_Base.cpp:77:      Aux_Error( ERROR_INFO, "amr->NPatchComma[0][27] (%d) != amr->num[0] (%d) !!\n",
Buffer/Buf_AllocateBufferPatch_Base.cpp:78:                 Tamr->NPatchComma[0][27], Tamr->num[0] );
Buffer/Buf_GetBufferData.cpp:114:   if ( GetBufMode == COARSE_FINE_FLUX  &&  !amr->WithFlux )
Buffer/Buf_GetBufferData.cpp:183:                       amr->ParaVar->SendF_NList[lv][Sib]*PS1*PS1*NVar_Flu :
Buffer/Buf_GetBufferData.cpp:184:                       amr->ParaVar->SendP_NList[lv][Sib]*LoopWidth[0]*LoopWidth[1]*LoopWidth[2]*NVar_Tot;
Buffer/Buf_GetBufferData.cpp:187:                       amr->ParaVar->RecvF_NList[lv][Sib]*PS1*PS1*NVar_Flu :
Buffer/Buf_GetBufferData.cpp:188:                       amr->ParaVar->RecvP_NList[lv][Sib]*LoopWidth[0]*LoopWidth[1]*LoopWidth[2]*NVar_Tot;
Buffer/Buf_GetBufferData.cpp:210:               for (int TID=0; TID<amr->ParaVar->SendP_NList[lv][Sib]; TID++)
Buffer/Buf_GetBufferData.cpp:212:                  PID = amr->ParaVar->SendP_IDList[lv][Sib][TID];
Buffer/Buf_GetBufferData.cpp:223:                        SendBuffer[t][ Counter ++ ] = amr->patch[FluSg][lv][PID]->fluid[TFluVarIdx][k][j][i];
Buffer/Buf_GetBufferData.cpp:233:                        SendBuffer[t][ Counter ++ ] = amr->patch[PotSg][lv][PID]->pot[k][j][i];
Buffer/Buf_GetBufferData.cpp:236:               } // for (int TID=0; TID<amr->ParaVar->SendP_NList[lv][Sib]; TID++)
Buffer/Buf_GetBufferData.cpp:243:               for (int TID=0; TID<amr->ParaVar->SendF_NList[lv][Sib]; TID++)
Buffer/Buf_GetBufferData.cpp:245:                  PID     = amr->ParaVar->SendF_IDList[lv][Sib][TID];
Buffer/Buf_GetBufferData.cpp:246:                  FluxPtr = amr->patch[0][lv][PID]->flux[MirSib];
Buffer/Buf_GetBufferData.cpp:272://    4. copy data from RecvBuffer back to the amr->patch pointer
Buffer/Buf_GetBufferData.cpp:286:               for (int TID=0; TID<amr->ParaVar->RecvP_NList[lv][Sib]; TID++)
Buffer/Buf_GetBufferData.cpp:288:                  PID = amr->ParaVar->RecvP_IDList[lv][Sib][TID];
Buffer/Buf_GetBufferData.cpp:299:                        amr->patch[FluSg][lv][PID]->fluid[TFluVarIdx][k][j][i] = RecvBuffer[t][ Counter ++ ];
Buffer/Buf_GetBufferData.cpp:309:                        amr->patch[PotSg][lv][PID]->pot[k][j][i] = RecvBuffer[t][ Counter ++ ];
Buffer/Buf_GetBufferData.cpp:312:               } // for (int TID=0; TID<amr->ParaVar->RecvP_NList[lv][Sib]; TID++)
Buffer/Buf_GetBufferData.cpp:319:               for (int TID=0; TID<amr->ParaVar->RecvF_NList[lv][Sib]; TID++)
Buffer/Buf_GetBufferData.cpp:321:                  PID     = amr->ParaVar->RecvF_IDList[lv][Sib][TID];
Buffer/Buf_GetBufferData.cpp:322:                  FluxPtr = amr->patch[0][lv][PID]->flux[Sib];
Buffer/Buf_GetBufferData.cpp:332:               } // for (int TID=0; TID<amr->ParaVar->RecvF_NList[lv][Sib]; TID++)
Buffer/Buf_RecordBoundaryFlag.cpp:10:// Description :  Record the flags of boundary patches in amr->ParaVar->BounFlag_PosList[] for
Buffer/Buf_RecordBoundaryFlag.cpp:15://                   amr->ParaVar->BounFlag_NList[]
Buffer/Buf_RecordBoundaryFlag.cpp:32:      amr->ParaVar->BounFlag_NList[lv][s] = 0;
Buffer/Buf_RecordBoundaryFlag.cpp:36:      if ( amr->ParaVar->BounFlag_PosList[lv][s] != NULL )
Buffer/Buf_RecordBoundaryFlag.cpp:38:         delete [] amr->ParaVar->BounFlag_PosList[lv][s];
Buffer/Buf_RecordBoundaryFlag.cpp:39:         amr->ParaVar->BounFlag_PosList[lv][s] = NULL;
Buffer/Buf_RecordBoundaryFlag.cpp:44:      if ( amr->ParaVar->BounP_NList[lv][s] == 0 )     continue;
Buffer/Buf_RecordBoundaryFlag.cpp:56:      amr->ParaVar->BounFlag_PosList[lv][s] = new int [ FlagLayer*amr->ParaVar->BounP_NList[lv][s] ];
Buffer/Buf_RecordBoundaryFlag.cpp:60:      for (int ID=0; ID<amr->ParaVar->BounP_NList[lv][s]; ID++)
Buffer/Buf_RecordBoundaryFlag.cpp:62:         FlagPos = amr->ParaVar->BounP_PosList[lv][s][ID];
Buffer/Buf_RecordBoundaryFlag.cpp:63:         PID     = amr->ParaVar->BounP_IDList [lv][s][ID];
Buffer/Buf_RecordBoundaryFlag.cpp:66:         if ( PID < 0  ||  PID >= amr->num[lv] )   Aux_Error( ERROR_INFO, "incorrect PID = %d !!", PID );
Buffer/Buf_RecordBoundaryFlag.cpp:69:         if ( amr->patch[0][lv][PID]->flag )
Buffer/Buf_RecordBoundaryFlag.cpp:72:            amr->ParaVar->BounFlag_PosList[lv][s][ amr->ParaVar->BounFlag_NList[lv][s] ] = FlagPos;
Buffer/Buf_RecordBoundaryFlag.cpp:78:               SibPID = amr->patch[0][lv][PID]->sibling[Sib];
Buffer/Buf_RecordBoundaryFlag.cpp:85:               if ( SibPID >= 0  &&  amr->patch[0][lv][SibPID]->flag )
Buffer/Buf_RecordBoundaryFlag.cpp:86:                  amr->ParaVar->BounFlag_PosList[lv][s][ amr->ParaVar->BounFlag_NList[lv][s]+n ] = BUFFER_IS_FLAGGED;
Buffer/Buf_RecordBoundaryFlag.cpp:88:                  amr->ParaVar->BounFlag_PosList[lv][s][ amr->ParaVar->BounFlag_NList[lv][s]+n ] = -1;
Buffer/Buf_RecordBoundaryFlag.cpp:91:            amr->ParaVar->BounFlag_NList[lv][s] += FlagLayer;
Buffer/Buf_RecordBoundaryFlag.cpp:93:         } // if ( amr->patch[0][lv][PID]->flag )
Buffer/Buf_RecordBoundaryFlag.cpp:94:      } // for (int ID=0; ID<amr->ParaVar->BounP_NList[lv][s]; ID++)
Buffer/Buf_RecordBoundaryPatch.cpp:11:// Description :  Record the patches near the sub-domain boundaries in amr->ParaVar->BounP_IDList[]
Buffer/Buf_RecordBoundaryPatch.cpp:31:   const int scale0 = amr->scale[ 0];
Buffer/Buf_RecordBoundaryPatch.cpp:32:   const int scale  = amr->scale[lv];
Buffer/Buf_RecordBoundaryPatch.cpp:43:      amr->ParaVar->BounP_NList[lv][s] = 0;
Buffer/Buf_RecordBoundaryPatch.cpp:47:      if ( amr->ParaVar->BounP_IDList[lv][s] != NULL )
Buffer/Buf_RecordBoundaryPatch.cpp:49:         delete [] amr->ParaVar->BounP_IDList[lv][s];
Buffer/Buf_RecordBoundaryPatch.cpp:50:         amr->ParaVar->BounP_IDList[lv][s] = NULL;
Buffer/Buf_RecordBoundaryPatch.cpp:53:      if ( amr->ParaVar->BounP_PosList[lv][s] != NULL )
Buffer/Buf_RecordBoundaryPatch.cpp:55:         delete [] amr->ParaVar->BounP_PosList[lv][s];
Buffer/Buf_RecordBoundaryPatch.cpp:56:         amr->ParaVar->BounP_PosList[lv][s] = NULL;
Buffer/Buf_RecordBoundaryPatch.cpp:61:      if ( amr->ParaVar->BounP_NList[lv-1][s] == 0  ||  amr->num[lv] == 0 )   continue;
Buffer/Buf_RecordBoundaryPatch.cpp:70:      amr->ParaVar->BounP_IDList [lv][s] = new int [ amr->ParaVar->BounP_NList[lv-1][s]*NSide ];
Buffer/Buf_RecordBoundaryPatch.cpp:71:      amr->ParaVar->BounP_PosList[lv][s] = new int [ amr->ParaVar->BounP_NList[lv-1][s]*NSide ];
Buffer/Buf_RecordBoundaryPatch.cpp:84://    fill up amr->ParaVar->BounP_IDList[lv][s][] and amr->ParaVar->BounP_PosList[lv][s][]
Buffer/Buf_RecordBoundaryPatch.cpp:85:      for (int FaID=0; FaID<amr->ParaVar->BounP_NList[lv-1][s]; FaID++)
Buffer/Buf_RecordBoundaryPatch.cpp:87:         FaPID = amr->ParaVar->BounP_IDList[lv-1][s][FaID];
Buffer/Buf_RecordBoundaryPatch.cpp:90:         if ( FaPID < 0  ||  FaPID >= amr->num[lv-1] )   Aux_Error( ERROR_INFO, "incorrect FaPID = %d !!\n", FaPID );
Buffer/Buf_RecordBoundaryPatch.cpp:93:         PID0  = amr->patch[0][lv-1][FaPID]->son;
Buffer/Buf_RecordBoundaryPatch.cpp:97:            Corner = amr->patch[0][lv][PID0]->corner;
Buffer/Buf_RecordBoundaryPatch.cpp:108:               amr->ParaVar->BounP_IDList [lv][s][ amr->ParaVar->BounP_NList[lv][s] ] = PID0 + Table[Side];
Buffer/Buf_RecordBoundaryPatch.cpp:109:               amr->ParaVar->BounP_PosList[lv][s][ amr->ParaVar->BounP_NList[lv][s] ] = Pos;
Buffer/Buf_RecordBoundaryPatch.cpp:110:               amr->ParaVar->BounP_NList  [lv][s] ++;
Buffer/Buf_RecordBoundaryPatch.cpp:113:      } // for (int FaID=0; FaID<amr->ParaVar->NList[lv-1][s]; FaID++)
Buffer/Buf_RecordBoundaryPatch.cpp:117:      Buf_SortBoundaryPatch( amr->ParaVar->BounP_NList[lv][s], amr->ParaVar->BounP_IDList[lv][s],
Buffer/Buf_RecordBoundaryPatch.cpp:118:                             amr->ParaVar->BounP_PosList[lv][s] );
Buffer/Buf_RecordBoundaryPatch.cpp:122:      if ( amr->ParaVar->BounP_NList[lv][s] == 0 )
Buffer/Buf_RecordBoundaryPatch.cpp:124:         delete [] amr->ParaVar->BounP_IDList [lv][s];
Buffer/Buf_RecordBoundaryPatch.cpp:125:         delete [] amr->ParaVar->BounP_PosList[lv][s];
Buffer/Buf_RecordBoundaryPatch.cpp:127:         amr->ParaVar->BounP_IDList [lv][s] = NULL;
Buffer/Buf_RecordBoundaryPatch.cpp:128:         amr->ParaVar->BounP_PosList[lv][s] = NULL;
Buffer/Buf_RecordBoundaryPatch_Base.cpp:11://                "amr->ParaVar->BounP_IDList[0]"
Buffer/Buf_RecordBoundaryPatch_Base.cpp:34:      amr->ParaVar->BounP_NList[0][s] = 0;
Buffer/Buf_RecordBoundaryPatch_Base.cpp:38:      if ( amr->ParaVar->BounP_IDList[0][s] != NULL )
Buffer/Buf_RecordBoundaryPatch_Base.cpp:40:         delete [] amr->ParaVar->BounP_IDList[0][s];
Buffer/Buf_RecordBoundaryPatch_Base.cpp:41:         amr->ParaVar->BounP_IDList[0][s] = NULL;
Buffer/Buf_RecordBoundaryPatch_Base.cpp:44:      if ( amr->ParaVar->BounP_PosList[0][s] != NULL )
Buffer/Buf_RecordBoundaryPatch_Base.cpp:46:         delete [] amr->ParaVar->BounP_PosList[0][s];
Buffer/Buf_RecordBoundaryPatch_Base.cpp:47:         amr->ParaVar->BounP_PosList[0][s] = NULL;
Buffer/Buf_RecordBoundaryPatch_Base.cpp:52:      amr->ParaVar->BounP_IDList [0][s] = new int [ Width[0]*Width[1]*Width[2] ];
Buffer/Buf_RecordBoundaryPatch_Base.cpp:53:      amr->ParaVar->BounP_PosList[0][s] = new int [ Width[0]*Width[1]*Width[2] ];
Buffer/Buf_RecordBoundaryPatch_Base.cpp:66:            amr->ParaVar->BounP_IDList [0][s][ amr->ParaVar->BounP_NList[0][s] ] = BaseP[ ID_BaseP ];
Buffer/Buf_RecordBoundaryPatch_Base.cpp:67:            amr->ParaVar->BounP_PosList[0][s][ amr->ParaVar->BounP_NList[0][s] ] = ID_BounP;
Buffer/Buf_RecordBoundaryPatch_Base.cpp:68:            amr->ParaVar->BounP_NList  [0][s] ++;
Buffer/Buf_RecordExchangeDataPatchID.cpp:13://                in the variable "amr->ParaVar"
Buffer/Buf_RecordExchangeDataPatchID.cpp:26:   const int scale0        = amr->scale[ 0];
Buffer/Buf_RecordExchangeDataPatchID.cpp:27:   const int scale         = amr->scale[lv];
Buffer/Buf_RecordExchangeDataPatchID.cpp:39:      amr->ParaVar->SendP_NList[lv][s] = 0;
Buffer/Buf_RecordExchangeDataPatchID.cpp:40:      amr->ParaVar->RecvP_NList[lv][s] = 0;
Buffer/Buf_RecordExchangeDataPatchID.cpp:44:      if ( amr->ParaVar->SendP_IDList[lv][s] != NULL )
Buffer/Buf_RecordExchangeDataPatchID.cpp:46:         delete [] amr->ParaVar->SendP_IDList[lv][s];
Buffer/Buf_RecordExchangeDataPatchID.cpp:47:         amr->ParaVar->SendP_IDList[lv][s] = NULL;
Buffer/Buf_RecordExchangeDataPatchID.cpp:50:      if ( amr->ParaVar->RecvP_IDList[lv][s] != NULL )
Buffer/Buf_RecordExchangeDataPatchID.cpp:52:         delete [] amr->ParaVar->RecvP_IDList[lv][s];
Buffer/Buf_RecordExchangeDataPatchID.cpp:53:         amr->ParaVar->RecvP_IDList[lv][s] = NULL;
Buffer/Buf_RecordExchangeDataPatchID.cpp:58:      if ( amr->ParaVar->BounP_NList[lv][s] == 0 )    continue;
Buffer/Buf_RecordExchangeDataPatchID.cpp:62:      NBuf = ( amr->NPatchComma[lv][s+2] - amr->NPatchComma[lv][s+1] ) / TABLE_05( s );
Buffer/Buf_RecordExchangeDataPatchID.cpp:64:      amr->ParaVar->SendP_IDList[lv][s] = new int [ amr->ParaVar->BounP_NList[lv][s] ];
Buffer/Buf_RecordExchangeDataPatchID.cpp:65:      amr->ParaVar->RecvP_IDList[lv][s] = new int [ NBuf ];
Buffer/Buf_RecordExchangeDataPatchID.cpp:110:      for (int ID=0; ID<amr->ParaVar->BounP_NList[lv][s]; ID++)
Buffer/Buf_RecordExchangeDataPatchID.cpp:112:         PID = amr->ParaVar->BounP_IDList[lv][s][ID];    // BounP_IDList is already sorted
Buffer/Buf_RecordExchangeDataPatchID.cpp:114:         if ( PID < amr->NPatchComma[lv][1] )            // BounP includes some buffer patches
Buffer/Buf_RecordExchangeDataPatchID.cpp:123:               SibPID = amr->patch[0][lv][PID]->sibling[Sib];
Buffer/Buf_RecordExchangeDataPatchID.cpp:125:               if ( SibPID >= 0  &&  SibPID >= amr->NPatchComma[lv][s+1]  &&  SibPID < amr->NPatchComma[lv][s+2] )
Buffer/Buf_RecordExchangeDataPatchID.cpp:127:                  amr->ParaVar->SendP_IDList[lv][s][ amr->ParaVar->SendP_NList[lv][s] ] = PID;
Buffer/Buf_RecordExchangeDataPatchID.cpp:128:                  amr->ParaVar->SendP_NList [lv][s] ++;
Buffer/Buf_RecordExchangeDataPatchID.cpp:134:      } // for (int ID=0; ID<amr->ParaVar->BounP_NList[lv][s]; ID++)
Buffer/Buf_RecordExchangeDataPatchID.cpp:139:      for (int PID0=amr->NPatchComma[lv][s+1]; PID0<amr->NPatchComma[lv][s+2]; PID0+=8)
Buffer/Buf_RecordExchangeDataPatchID.cpp:147:            SibPID = amr->patch[0][lv][PID]->sibling[Sib];
Buffer/Buf_RecordExchangeDataPatchID.cpp:149:            if ( SibPID >= 0  &&  SibPID < amr->NPatchComma[lv][1] )
Buffer/Buf_RecordExchangeDataPatchID.cpp:151:               Corner = amr->patch[0][lv][PID]->corner;
Buffer/Buf_RecordExchangeDataPatchID.cpp:157:               amr->ParaVar->RecvP_IDList[lv][s][ amr->ParaVar->RecvP_NList[lv][s] ] = PID;
Buffer/Buf_RecordExchangeDataPatchID.cpp:158:               RecvP_PosList                    [ amr->ParaVar->RecvP_NList[lv][s] ] = Pos;
Buffer/Buf_RecordExchangeDataPatchID.cpp:159:               amr->ParaVar->RecvP_NList [lv][s] ++;
Buffer/Buf_RecordExchangeDataPatchID.cpp:169:      Buf_SortBoundaryPatch( amr->ParaVar->RecvP_NList[lv][s], amr->ParaVar->RecvP_IDList[lv][s], RecvP_PosList );
Buffer/Buf_RecordExchangeDataPatchID.cpp:173:      if ( amr->ParaVar->SendP_NList[lv][s] == 0 )
Buffer/Buf_RecordExchangeDataPatchID.cpp:175:         delete [] amr->ParaVar->SendP_IDList[lv][s];
Buffer/Buf_RecordExchangeDataPatchID.cpp:176:         amr->ParaVar->SendP_IDList [lv][s] = NULL;
Buffer/Buf_RecordExchangeDataPatchID.cpp:179:      if ( amr->ParaVar->RecvP_NList[lv][s] == 0 )
Buffer/Buf_RecordExchangeDataPatchID.cpp:181:         delete [] amr->ParaVar->RecvP_IDList[lv][s];
Buffer/Buf_RecordExchangeDataPatchID.cpp:182:         amr->ParaVar->RecvP_IDList [lv][s] = NULL;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:11://                in the variable "amr->ParaVar"
Buffer/Buf_RecordExchangeFluxPatchID.cpp:21:   if ( !amr->WithFlux )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:35:      amr->ParaVar->SendF_NList[lv][s] = 0;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:36:      amr->ParaVar->RecvF_NList[lv][s] = 0;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:40:      if ( amr->ParaVar->SendF_IDList[lv][s] != NULL )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:42:         delete [] amr->ParaVar->SendF_IDList[lv][s];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:43:         amr->ParaVar->SendF_IDList[lv][s] = NULL;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:46:      if ( amr->ParaVar->RecvF_IDList[lv][s] != NULL )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:48:         delete [] amr->ParaVar->RecvF_IDList[lv][s];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:49:         amr->ParaVar->RecvF_IDList[lv][s] = NULL;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:54:      if ( amr->ParaVar->BounP_NList[lv][s] == 0 )    continue;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:62:      amr->ParaVar->SendF_IDList [lv][s] = new int [ amr->ParaVar->BounP_NList[lv][s] ];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:63:      amr->ParaVar->RecvF_IDList [lv][s] = new int [ amr->ParaVar->BounP_NList[lv][s] ];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:68:      for (int ID=0; ID<amr->ParaVar->BounP_NList[lv][s]; ID++)
Buffer/Buf_RecordExchangeFluxPatchID.cpp:70:         PID = amr->ParaVar->BounP_IDList[lv][s][ID];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:72:         if ( PID < amr->NPatchComma[lv][1] )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:74:            SibPID = amr->patch[0][lv][PID]->sibling[s];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:78:               FluxPtr = amr->patch[0][lv][SibPID]->flux[ MirrorSib[s] ];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:82:                  amr->ParaVar->SendF_IDList[lv][s][ amr->ParaVar->SendF_NList[lv][s] ] = SibPID;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:83:                  amr->ParaVar->SendF_NList [lv][s] ++;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:92:      for (int ID=0; ID<amr->ParaVar->BounP_NList[lv][s]; ID++)
Buffer/Buf_RecordExchangeFluxPatchID.cpp:94:         PID = amr->ParaVar->BounP_IDList[lv][s][ID];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:96:         if ( PID < amr->NPatchComma[lv][1] )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:98:            FluxPtr = amr->patch[0][lv][PID]->flux[s];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:102:               amr->ParaVar->RecvF_IDList[lv][s][ amr->ParaVar->RecvF_NList[lv][s] ] = PID;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:103:               amr->ParaVar->RecvF_NList [lv][s] ++;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:110:      if ( amr->ParaVar->SendF_NList[lv][s] == 0 )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:112:         delete [] amr->ParaVar->SendF_IDList[lv][s];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:113:         amr->ParaVar->SendF_IDList [lv][s] = NULL;
Buffer/Buf_RecordExchangeFluxPatchID.cpp:116:      if ( amr->ParaVar->RecvF_NList[lv][s] == 0 )
Buffer/Buf_RecordExchangeFluxPatchID.cpp:118:         delete [] amr->ParaVar->RecvF_IDList[lv][s];
Buffer/Buf_RecordExchangeFluxPatchID.cpp:119:         amr->ParaVar->RecvF_IDList [lv][s] = NULL;
Buffer/Buf_ResetBufferFlux.cpp:20:   if ( !amr->WithFlux )
Buffer/Buf_ResetBufferFlux.cpp:30:   for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][27]; PID++)
Buffer/Buf_ResetBufferFlux.cpp:33:      FluxPtr = amr->patch[0][lv][PID]->flux[s];
Binary file Feedback/SNe/.FB_SNe.cpp.swo matches
Feedback/SNe/FB_SNe.cpp:159:      const double dh 	      = amr->dh[lv];
Feedback/FB_AdvanceDt.cpp:85://    --> must initialize it since we will replace amr->Par->Attribute[] by ParAtt_Updated[]
Feedback/FB_AdvanceDt.cpp:102:         ParAtt_Updated[v] = new real [ amr->Par->ParListSize ];
Feedback/FB_AdvanceDt.cpp:103:         memcpy( ParAtt_Updated[v], amr->Par->Attribute[v], amr->Par->ParListSize*sizeof(real) );
Feedback/FB_AdvanceDt.cpp:138:   for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Feedback/FB_AdvanceDt.cpp:140:      const double PGCenter[3] = { amr->patch[0][lv][PID0+7]->EdgeL[0],
Feedback/FB_AdvanceDt.cpp:141:                                   amr->patch[0][lv][PID0+7]->EdgeL[1],
Feedback/FB_AdvanceDt.cpp:142:                                   amr->patch[0][lv][PID0+7]->EdgeL[2] };
Feedback/FB_AdvanceDt.cpp:217:         NParMax = MAX( NParMax, amr->patch[0][lv][PID]->NPar      );
Feedback/FB_AdvanceDt.cpp:218:         NParMax = MAX( NParMax, amr->patch[0][lv][PID]->NPar_Copy );
Feedback/FB_AdvanceDt.cpp:245:         if ( amr->patch[0][lv][PID]->son == -1  &&  PID < amr->NPatchComma[lv][1] )
Feedback/FB_AdvanceDt.cpp:247:            NPar          = amr->patch[0][lv][PID]->NPar;
Feedback/FB_AdvanceDt.cpp:248:            ParList       = amr->patch[0][lv][PID]->ParList;
Feedback/FB_AdvanceDt.cpp:252:            if ( amr->patch[0][lv][PID]->NPar_Copy != -1 )
Feedback/FB_AdvanceDt.cpp:254:                          lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Feedback/FB_AdvanceDt.cpp:260://          note that amr->patch[0][lv][PID]->NPar>0 is still possible
Feedback/FB_AdvanceDt.cpp:261:            NPar          = amr->patch[0][lv][PID]->NPar_Copy;
Feedback/FB_AdvanceDt.cpp:266:            ParList       = amr->patch[0][lv][PID]->ParList_Copy;
Feedback/FB_AdvanceDt.cpp:269:         } // if ( amr->patch[0][lv][PID]->son == -1  &&  PID < amr->NPatchComma[lv][1] ) ... else ...
Feedback/FB_AdvanceDt.cpp:284:                  if ( NPar > 0  &&  amr->patch[0][lv][PID]->ParAtt_Copy[v] == NULL )
Feedback/FB_AdvanceDt.cpp:290:                     ParAtt_Local[v][p] = amr->patch[0][lv][PID]->ParAtt_Copy[v][p];
Feedback/FB_AdvanceDt.cpp:305:                     ParAtt_Local[v][p] = amr->Par->Attribute[v][ ParList[p] ];
Feedback/FB_AdvanceDt.cpp:323:         const double HalfBox  [3] = { 0.5*amr->BoxSize[0], 0.5*amr->BoxSize[1], 0.5*amr->BoxSize[2] };
Feedback/FB_AdvanceDt.cpp:333:                  if      ( dr > +HalfBox[d] )  *ParPos -= amr->BoxSize[d];
Feedback/FB_AdvanceDt.cpp:334:                  else if ( dr < -HalfBox[d] )  *ParPos += amr->BoxSize[d];
Feedback/FB_AdvanceDt.cpp:345:         const long RSeed = FB_RSEED + amr->patch[0][lv][PID]->LB_Idx*100L + AdvanceCounter[lv]*100000000L;
Feedback/FB_AdvanceDt.cpp:351:                                   amr->patch[0][lv][PID0]->EdgeL, amr->dh[lv], CoarseFine, TID, FB_RNG );
Feedback/FB_AdvanceDt.cpp:354:                                        amr->patch[0][lv][PID0]->EdgeL, amr->dh[lv], CoarseFine, TID, FB_RNG );
Feedback/FB_AdvanceDt.cpp:363:         if ( t < 8  &&  amr->patch[0][lv][PID]->son == -1 ) {
Feedback/FB_AdvanceDt.cpp:389:               amr->patch[SaveSg_Flu][lv][PID]->fluid[v][k_o][j_o][i_o] = fluid_PG[v][k_i][j_i][i_i];
Feedback/FB_AdvanceDt.cpp:400:   } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Feedback/FB_AdvanceDt.cpp:418:         memcpy( amr->Par->Attribute[v], ParAtt_Updated[v], amr->Par->ParListSize*sizeof(real) );
Fluid/Flu_AdvanceDt.cpp:52:      for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][19]; FaPID++)
Fluid/Flu_AdvanceDt.cpp:54:         amr->patch[0][FaLv][FaPID]->ele_corrected[e] = false;
Fluid/Flu_AllocateFluxArray.cpp:20:   if ( !amr->WithFlux )
Fluid/Flu_AllocateFluxArray.cpp:21:      Aux_Error( ERROR_INFO, "amr->WithFlux is off !!\n" );
Fluid/Flu_AllocateFluxArray.cpp:33:   for (int PID=0; PID<amr->NPatchComma[lv][7]; PID++)   amr->patch[0][lv][PID]->fdelete();
Fluid/Flu_AllocateFluxArray.cpp:39:   if ( amr->NPatchComma[lv+1][7] != 0 )
Fluid/Flu_AllocateFluxArray.cpp:42:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Fluid/Flu_AllocateFluxArray.cpp:44:         if ( amr->patch[0][lv][PID]->son == -1 )
Fluid/Flu_AllocateFluxArray.cpp:48:               if (  ( SibPID = amr->patch[0][lv][PID]->sibling[s] ) >= 0  )
Fluid/Flu_AllocateFluxArray.cpp:49:                  if ( amr->patch[0][lv][SibPID]->son != -1 )  amr->patch[0][lv][PID]->fnew( s, AUTO_REDUCE_DT );
Fluid/Flu_AllocateFluxArray.cpp:57:   if ( amr->NPatchComma[lv+1][7] != 0 )  Flu_AllocateFluxArray_Buffer( lv );
Fluid/Flu_AllocateFluxArray_Buffer.cpp:19:   if ( !amr->WithFlux )
Fluid/Flu_AllocateFluxArray_Buffer.cpp:20:      Aux_Message( stderr, "WARNING : why invoking %s when amr->WithFlux is off ??\n", __FUNCTION__ );
Fluid/Flu_AllocateFluxArray_Buffer.cpp:31:      for (int PID0=amr->NPatchComma[lv][s+1]; PID0<amr->NPatchComma[lv][s+2]; PID0+=8)
Fluid/Flu_AllocateFluxArray_Buffer.cpp:35:         SonPID = amr->patch[0][lv][PID]->son;
Fluid/Flu_AllocateFluxArray_Buffer.cpp:39:            SibPID = amr->patch[0][lv][PID]->sibling[ MirrorSib[s] ];
Fluid/Flu_AllocateFluxArray_Buffer.cpp:47:            if ( amr->patch[0][lv][SibPID]->son != -1 )
Fluid/Flu_AllocateFluxArray_Buffer.cpp:48:               amr->patch[0][lv][PID]->fnew( MirrorSib[s], AUTO_REDUCE_DT );
Fluid/Flu_ManageFixUpTempArray.cpp:39:   for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Fluid/Flu_ManageFixUpTempArray.cpp:44:         if ( amr->patch[0][lv][PID]->flux_tmp[s] != NULL )
Fluid/Flu_ManageFixUpTempArray.cpp:46:            Aux_SwapPointer( (void**)&amr->patch[0][lv][PID]->flux    [s],
Fluid/Flu_ManageFixUpTempArray.cpp:47:                             (void**)&amr->patch[0][lv][PID]->flux_tmp[s] );
Fluid/Flu_ManageFixUpTempArray.cpp:55:         if ( amr->patch[0][lv][PID]->electric_tmp[s] != NULL )
Fluid/Flu_ManageFixUpTempArray.cpp:57:            Aux_SwapPointer( (void**)&amr->patch[0][lv][PID]->electric    [s],
Fluid/Flu_ManageFixUpTempArray.cpp:58:                             (void**)&amr->patch[0][lv][PID]->electric_tmp[s] );
Fluid/Flu_ManageFixUpTempArray.cpp:62:   } // for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Fluid/Flu_ManageFixUpTempArray.cpp:97:   for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Fluid/Flu_ManageFixUpTempArray.cpp:102:         if ( amr->patch[0][lv][PID]->flux_tmp[s] != NULL )
Fluid/Flu_ManageFixUpTempArray.cpp:103:            memcpy( amr->patch[0][lv][PID]->flux_tmp[s], amr->patch[0][lv][PID]->flux[s], SQR(PS1)*NFLUX_TOTAL*sizeof(real) );
Fluid/Flu_ManageFixUpTempArray.cpp:110:         if ( amr->patch[0][lv][PID]->electric_tmp[s] != NULL )
Fluid/Flu_ManageFixUpTempArray.cpp:113:            memcpy( amr->patch[0][lv][PID]->electric_tmp[s], amr->patch[0][lv][PID]->electric[s], Size );
Fluid/Flu_ManageFixUpTempArray.cpp:117:   } // for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Fluid/Flu_BoundaryCondition_User.cpp:61:   Dens       = Dens0 + 0.2*exp(  -(  SQR(1.1*x-0.5*amr->BoxSize[0])
Fluid/Flu_BoundaryCondition_User.cpp:62:                                     +SQR(2.2*y-0.5*amr->BoxSize[1])
Fluid/Flu_BoundaryCondition_User.cpp:63:                                     +SQR(3.3*z-0.5*amr->BoxSize[2]) ) / SQR( 1.8*amr->BoxSize[2] )  );
Fluid/Flu_BoundaryCondition_User.cpp:67:   Pres       = Pres0*(  2.0 + sin( 2.0*M_PI*(4.5*x+5.5*y*6.5*z)/amr->BoxSize[2] )  );
Fluid/Flu_Close.cpp:60://                3. Copy the data from the "h_Flu_Array_F_Out" and "h_DE_Array_F_Out" arrays to the "amr->patch" pointers
Fluid/Flu_Close.cpp:148:            amr->patch[SaveSg_Flu][lv][PID]->fluid[v][k][j][i] = h_Flu_Array_F_Out[TID][v][KJI];
Fluid/Flu_Close.cpp:161:            amr->patch[0][lv][PID]->de_status[k][j][i] = h_DE_Array_F_Out[TID][KJI];
Fluid/Flu_Close.cpp:180:               amr->patch[SaveSg_Mag][lv][PID]->magnetic[v][ idx ++ ] = h_Mag_Array_F_Out[TID][v][KJI];
Fluid/Flu_Close.cpp:209:   if ( !amr->WithFlux )   Aux_Error( ERROR_INFO, "amr->WithFlux is off !!\n" );
Fluid/Flu_Close.cpp:229:            real (*FluxPtr)[PS1][PS1] = amr->patch[0][lv][PID]->flux_bitrep[s];
Fluid/Flu_Close.cpp:231:            real (*FluxPtr)[PS1][PS1] = amr->patch[0][lv][PID]->flux[s];
Fluid/Flu_Close.cpp:296:   if ( !amr->WithFlux )   Aux_Error( ERROR_INFO, "amr->WithFlux is off !!\n" );
Fluid/Flu_Close.cpp:314:         const int FaPID = amr->patch[0][SonLv][PID0]->father;
Fluid/Flu_Close.cpp:323:            const int FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[s];
Fluid/Flu_Close.cpp:335:            real (*FluxPtr)[PS1][PS1] = ( AUTO_REDUCE_DT ) ? amr->patch[0][FaLv][FaSibPID]->flux_tmp[ MirrorSib[s] ] :
Fluid/Flu_Close.cpp:336:                                                             amr->patch[0][FaLv][FaSibPID]->flux    [ MirrorSib[s] ];
Fluid/Flu_Close.cpp:502:   const real dh               = (real)amr->dh[lv];
Fluid/Flu_Close.cpp:1087:                  const int MagSg = amr->MagSg[lv];
Fluid/Flu_Close.cpp:1092:                  const int PotSg = amr->PotSg[lv];
Fluid/Flu_Close.cpp:1096:                  Output_Patch( lv, PID_Failed, amr->FluSg[lv], MagSg, PotSg, "Unphy" );
Fluid/Flu_Close.cpp:1198:   if ( !amr->WithElectric )  Aux_Error( ERROR_INFO, "amr->WithElectric is off !!\n" );
Fluid/Flu_Close.cpp:1216:            real (*ElePtr)[EleSize] = ( real (*)[EleSize] )amr->patch[0][lv][PID]->electric_bitrep[s];
Fluid/Flu_Close.cpp:1218:            real (*ElePtr)[EleSize] = ( real (*)[EleSize] )amr->patch[0][lv][PID]->electric[s];
Fluid/Flu_Close.cpp:1274:            ElePtr[s-6] = amr->patch[0][lv][PID]->electric_bitrep[s];
Fluid/Flu_Close.cpp:1276:            ElePtr[s-6] = amr->patch[0][lv][PID]->electric[s];
Fluid/Flu_Close.cpp:1366:   if ( !amr->WithElectric )  Aux_Error( ERROR_INFO, "amr->WithElectric is off !!\n" );
Fluid/Flu_Close.cpp:1387:         const int FaPID = amr->patch[0][SonLv][PID0]->father;
Fluid/Flu_Close.cpp:1396:            const int FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[s];
Fluid/Flu_Close.cpp:1409:                                            (  ( AUTO_REDUCE_DT ) ? amr->patch[0][FaLv][FaSibPID]->electric_tmp[ MirrorSib[s] ] :
Fluid/Flu_Close.cpp:1410:                                                                    amr->patch[0][FaLv][FaSibPID]->electric    [ MirrorSib[s] ]  );
Fluid/Flu_Close.cpp:1471:               const int FaPID = amr->patch[0][SonLv][PID0]->father;
Fluid/Flu_Close.cpp:1482:                  const int FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[ SibID[u] ];
Fluid/Flu_Close.cpp:1494:                  real *CoarseElePtr= ( AUTO_REDUCE_DT ) ? amr->patch[0][FaLv][FaSibPID]->electric_tmp[ SibSibID[u] ] :
Fluid/Flu_Close.cpp:1495:                                                           amr->patch[0][FaLv][FaSibPID]->electric    [ SibSibID[u] ];
Fluid/Flu_Close.cpp:1501:                  if ( amr->patch[0][FaLv][FaSibPID]->ele_corrected[ SibSibID[u]-6 ] )    continue;
Fluid/Flu_Close.cpp:1526:                  amr->patch[0][FaLv][FaSibPID]->ele_corrected[ SibSibID[u]-6 ] = true;
Fluid/Flu_CorrAfterAllSync.cpp:79:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT, _TOTAL, _MAG );
Fluid/Flu_CorrAfterAllSync.cpp:82:      LB_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_RESTRICT, _TOTAL, _MAG, NULL_INT );
Fluid/Flu_CorrAfterAllSync.cpp:85:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_AFTER_FIXUP, _TOTAL, _MAG, Flu_ParaBuf, USELB_YES );
Fluid/Flu_CorrAfterAllSync.cpp:102:      Buf_GetBufferData( lv, amr->FluSg[lv], NULL_INT, NULL_INT, DATA_GENERAL, _DENS, _NONE, Rho_ParaBuf, USELB_YES );
Fluid/Flu_CorrAfterAllSync.cpp:104:      Gra_AdvanceDt( lv, Time[lv], NULL_REAL, NULL_REAL, NULL_INT, amr->PotSg[lv], true, false, false, false, false );
Fluid/Flu_CorrAfterAllSync.cpp:107:      Buf_GetBufferData( lv, NULL_INT, NULL_INT, amr->PotSg[lv], POT_FOR_POISSON, _POTE, _NONE, Pot_ParaBuf, USELB_YES );
Fluid/Flu_CorrAfterAllSync.cpp:123:      Par_UpdateParticle( lv, amr->PotSgTime[lv][ amr->PotSg[lv] ], NULL_REAL, PAR_UPSTEP_ACC_ONLY, StoreAcc_Yes, UseStoredAcc_No );
Fluid/Flu_FixUp_Flux.cpp:21:   const real Const[6]        = { real(-1.0/amr->dh[lv]), real(+1.0/amr->dh[lv]),
Fluid/Flu_FixUp_Flux.cpp:22:                                  real(-1.0/amr->dh[lv]), real(+1.0/amr->dh[lv]),
Fluid/Flu_FixUp_Flux.cpp:23:                                  real(-1.0/amr->dh[lv]), real(+1.0/amr->dh[lv]) };
Fluid/Flu_FixUp_Flux.cpp:24:   const int  FluSg           = amr->FluSg[lv];
Fluid/Flu_FixUp_Flux.cpp:26:   const int  MagSg           = amr->MagSg[lv];
Fluid/Flu_FixUp_Flux.cpp:50:   if ( !amr->WithFlux )
Fluid/Flu_FixUp_Flux.cpp:51:      Aux_Error( ERROR_INFO, "amr->WithFlux is off -> no flux array is allocated for OPT__FIXUP_FLUX !!\n" );
Fluid/Flu_FixUp_Flux.cpp:84:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Fluid/Flu_FixUp_Flux.cpp:90:         real (*FluxPtr)[PS1][PS1] = amr->patch[0][lv][PID]->flux[s];
Fluid/Flu_FixUp_Flux.cpp:97:               FluxPtr[v][m][n] += amr->patch[0][lv][PID]->flux_bitrep[s][v][m][n];
Fluid/Flu_FixUp_Flux.cpp:108:         const real (*FluxPtr)[PS1][PS1] = amr->patch[0][lv][PID]->flux[s];
Fluid/Flu_FixUp_Flux.cpp:114:         for (int v=0; v<NCOMP_TOTAL; v++)   FluidPtr1D0[v] = amr->patch[FluSg][lv][PID]->fluid[v][0][0] + Offset[s];
Fluid/Flu_FixUp_Flux.cpp:116:         const char *DE_StatusPtr1D0 = amr->patch[0][lv][PID]->de_status[0][0] + Offset[s];
Fluid/Flu_FixUp_Flux.cpp:332:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Fluid/Flu_FixUp_Flux.cpp:338:   for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Fluid/Flu_FixUp_Flux.cpp:344:         FluxPtr = amr->patch[0][lv][PID]->flux[s];
Fluid/Flu_FixUp_Flux.cpp:353:         FluxPtr = amr->patch[0][lv][PID]->flux_bitrep[s];
Fluid/Flu_FixUp_Restrict.cpp:77:   if ( amr->NPatchComma[SonLv][1] == 0 )    return;
Fluid/Flu_FixUp_Restrict.cpp:114:   for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)
Fluid/Flu_FixUp_Restrict.cpp:116:      const int FaPID = amr->patch[0][SonLv][SonPID0]->father;
Fluid/Flu_FixUp_Restrict.cpp:124:      if ( ResFlu  &&  amr->patch[FaFluSg][FaLv][FaPID]->fluid == NULL )
Fluid/Flu_FixUp_Restrict.cpp:129:      if ( ResPot  &&  amr->patch[FaPotSg][FaLv][FaPID]->pot == NULL )
Fluid/Flu_FixUp_Restrict.cpp:135:      if ( ResMag  &&  amr->patch[FaMagSg][FaLv][FaPID]->magnetic == NULL )
Fluid/Flu_FixUp_Restrict.cpp:152:         if ( ResFlu  &&  amr->patch[SonFluSg][SonLv][SonPID]->fluid == NULL )
Fluid/Flu_FixUp_Restrict.cpp:157:         if ( ResPot  &&  amr->patch[SonPotSg][SonLv][SonPID]->pot == NULL )
Fluid/Flu_FixUp_Restrict.cpp:163:         if ( ResMag  &&  amr->patch[SonMagSg][SonLv][SonPID]->magnetic == NULL )
Fluid/Flu_FixUp_Restrict.cpp:175:            const real (*SonPtr)[PS1][PS1] = amr->patch[SonFluSg][SonLv][SonPID]->fluid[TFluVarIdx];
Fluid/Flu_FixUp_Restrict.cpp:176:                  real (* FaPtr)[PS1][PS1] = amr->patch[ FaFluSg][ FaLv][ FaPID]->fluid[TFluVarIdx];
Fluid/Flu_FixUp_Restrict.cpp:196:            const real (*SonPtr)[PS1][PS1] = amr->patch[SonPotSg][SonLv][SonPID]->pot;
Fluid/Flu_FixUp_Restrict.cpp:197:                  real (* FaPtr)[PS1][PS1] = amr->patch[ FaPotSg][ FaLv][ FaPID]->pot;
Fluid/Flu_FixUp_Restrict.cpp:224:            const real *SonBx = amr->patch[SonMagSg][SonLv][SonPID]->magnetic[0];
Fluid/Flu_FixUp_Restrict.cpp:225:                  real * FaBx = amr->patch[ FaMagSg][ FaLv][ FaPID]->magnetic[0];
Fluid/Flu_FixUp_Restrict.cpp:241:            const real *SonBy = amr->patch[SonMagSg][SonLv][SonPID]->magnetic[1];
Fluid/Flu_FixUp_Restrict.cpp:242:                  real * FaBy = amr->patch[ FaMagSg][ FaLv][ FaPID]->magnetic[1];
Fluid/Flu_FixUp_Restrict.cpp:258:            const real *SonBz = amr->patch[SonMagSg][SonLv][SonPID]->magnetic[2];
Fluid/Flu_FixUp_Restrict.cpp:259:                  real * FaBz = amr->patch[ FaMagSg][ FaLv][ FaPID]->magnetic[2];
Fluid/Flu_FixUp_Restrict.cpp:282:         const int FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[s];
Fluid/Flu_FixUp_Restrict.cpp:293:         if ( amr->patch[0][FaLv][FaSibPID]->son == -1 )    MHD_CopyPatchInterfaceBField( FaLv, FaPID, s, FaMagSg );
Fluid/Flu_FixUp_Restrict.cpp:326:         Hydro_DualEnergyFix( amr->patch[FaFluSg][FaLv][FaPID]->fluid[DENS][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:327:                              amr->patch[FaFluSg][FaLv][FaPID]->fluid[MOMX][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:328:                              amr->patch[FaFluSg][FaLv][FaPID]->fluid[MOMY][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:329:                              amr->patch[FaFluSg][FaLv][FaPID]->fluid[MOMZ][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:330:                              amr->patch[FaFluSg][FaLv][FaPID]->fluid[ENGY][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:331:                              amr->patch[FaFluSg][FaLv][FaPID]->fluid[DUAL][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:338:         amr->patch[FaFluSg][FaLv][FaPID]->fluid[ENGY][k][j][i]
Fluid/Flu_FixUp_Restrict.cpp:339:            = Hydro_CheckMinEintInEngy( amr->patch[FaFluSg][FaLv][FaPID]->fluid[DENS][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:340:                                        amr->patch[FaFluSg][FaLv][FaPID]->fluid[MOMX][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:341:                                        amr->patch[FaFluSg][FaLv][FaPID]->fluid[MOMY][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:342:                                        amr->patch[FaFluSg][FaLv][FaPID]->fluid[MOMZ][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:343:                                        amr->patch[FaFluSg][FaLv][FaPID]->fluid[ENGY][k][j][i],
Fluid/Flu_FixUp_Restrict.cpp:359:         Real      = amr->patch[FaFluSg][FaLv][FaPID]->fluid[REAL][k][j][i];
Fluid/Flu_FixUp_Restrict.cpp:360:         Imag      = amr->patch[FaFluSg][FaLv][FaPID]->fluid[IMAG][k][j][i];
Fluid/Flu_FixUp_Restrict.cpp:362:         Rho_Corr  = amr->patch[FaFluSg][FaLv][FaPID]->fluid[DENS][k][j][i];
Fluid/Flu_FixUp_Restrict.cpp:367:            amr->patch[FaFluSg][FaLv][FaPID]->fluid[DENS][k][j][i] = (real)0.0;
Fluid/Flu_FixUp_Restrict.cpp:373:         amr->patch[FaFluSg][FaLv][FaPID]->fluid[REAL][k][j][i] *= Rescale;
Fluid/Flu_FixUp_Restrict.cpp:374:         amr->patch[FaFluSg][FaLv][FaPID]->fluid[IMAG][k][j][i] *= Rescale;
Fluid/Flu_FixUp_Restrict.cpp:378:   } // for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)
Fluid/Flu_Prepare.cpp:86:      const double dh_half = 0.5*amr->dh[lv];
Fluid/Flu_Prepare.cpp:96:         for (int d=0; d<3; d++)    h_Corner_Array_F[TID][d] = amr->patch[0][lv][PID0]->EdgeL[d] + dh_half;
Fluid/Flu_ResetByUser.cpp:48:   const real dr[3]   = { x-amr->BoxCenter[0], y-amr->BoxCenter[1], z-amr->BoxCenter[2] };
Fluid/Flu_ResetByUser.cpp:115:   const double dh = amr->dh[lv];
Fluid/Flu_ResetByUser.cpp:123:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Fluid/Flu_ResetByUser.cpp:125:      x0 = amr->patch[0][lv][PID]->EdgeL[0] + 0.5*dh;
Fluid/Flu_ResetByUser.cpp:126:      y0 = amr->patch[0][lv][PID]->EdgeL[1] + 0.5*dh;
Fluid/Flu_ResetByUser.cpp:127:      z0 = amr->patch[0][lv][PID]->EdgeL[2] + 0.5*dh;
Fluid/Flu_ResetByUser.cpp:133:         for (int v=0; v<NCOMP_TOTAL; v++)   fluid[v] = amr->patch[FluSg][lv][PID]->fluid[v][k][j][i];
Fluid/Flu_ResetByUser.cpp:143:            const real Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Fluid/Flu_ResetByUser.cpp:169:            for (int v=0; v<NCOMP_TOTAL; v++)   amr->patch[FluSg][lv][PID]->fluid[v][k][j][i] = fluid[v];
Fluid/Flu_ResetByUser.cpp:173:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
GPU_API/CUAPI_MemAllocate_Fluid.cu:130:   if ( amr->WithFlux )
GPU_API/CUAPI_MemAllocate_Fluid.cu:147:   if ( amr->WithElectric )
GPU_API/CUAPI_MemAllocate_Fluid.cu:189:   if ( amr->WithFlux )
GPU_API/CUAPI_MemAllocate_Fluid.cu:207:   if ( amr->WithElectric )
GPU_API/CUAPI_MemAllocate_Fluid.cu:264:      if ( amr->WithFlux )
GPU_API/CUAPI_MemAllocate_Fluid.cu:282:      if ( amr->WithElectric )
Grackle/Grackle_Close.cpp:112:         fluid = amr->patch[SaveSg][lv][PID]->fluid;
Grackle/Grackle_Prepare.cpp:167:         fluid = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid;
Grackle/Grackle_Prepare.cpp:193:            Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Grackle/Grackle_Prepare.cpp:243:   Che_FieldData->grid_dx         = amr->dh[lv];
Init/Init_BaseLevel.cpp:14:   const int scale0    = amr->scale[0];
Init/Init_BaseLevel.cpp:25:      amr->pnew( 0, Cr[0],       Cr[1],       Cr[2],       -1, true, true, true );
Init/Init_BaseLevel.cpp:26:      amr->pnew( 0, Cr[0]+Width, Cr[1],       Cr[2],       -1, true, true, true );
Init/Init_BaseLevel.cpp:27:      amr->pnew( 0, Cr[0],       Cr[1]+Width, Cr[2],       -1, true, true, true );
Init/Init_BaseLevel.cpp:28:      amr->pnew( 0, Cr[0],       Cr[1],       Cr[2]+Width, -1, true, true, true );
Init/Init_BaseLevel.cpp:29:      amr->pnew( 0, Cr[0]+Width, Cr[1]+Width, Cr[2],       -1, true, true, true );
Init/Init_BaseLevel.cpp:30:      amr->pnew( 0, Cr[0],       Cr[1]+Width, Cr[2]+Width, -1, true, true, true );
Init/Init_BaseLevel.cpp:31:      amr->pnew( 0, Cr[0]+Width, Cr[1],       Cr[2]+Width, -1, true, true, true );
Init/Init_BaseLevel.cpp:32:      amr->pnew( 0, Cr[0]+Width, Cr[1]+Width, Cr[2]+Width, -1, true, true, true );
Init/Init_BaseLevel.cpp:36:   for (int m=1; m<28; m++)   amr->NPatchComma[0][m] = amr->num[0];
Init/Init_ByFunction.cpp:37:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_NO );
Init/Init_ByFunction.cpp:60:         Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT, _TOTAL, _MAG );
Init/Init_ByFunction.cpp:62:         Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_NO );
Init/Init_MemAllocate.cpp:56:   amr->LB = new LB_t( MPI_NRank, LB_INPUT__WLI_MAX, LB_INPUT__PAR_WEIGHT );
Init/Init_MemAllocate.cpp:58:   amr->LB = new LB_t( MPI_NRank, LB_INPUT__WLI_MAX, NULL_REAL );
Init/Init_MemAllocate.cpp:65:   if ( amr->Par->Init != PAR_INIT_BY_RESTART )    amr->Par->InitRepo( amr->Par->NPar_AcPlusInac, MPI_NRank );
Init/Init_MemAllocate_Fluid.cpp:44:      if ( amr->WithFlux )
Init/Init_MemAllocate_Fluid.cpp:65:      if ( amr->WithElectric )
Init/Init_MemoryPool.cpp:85:         amr->pnew( lv, 0, 0, 0, NULL_INT, WithFluData_Yes, WithMagData_Yes, WithPotData_Yes );
Init/Init_MemoryPool.cpp:89:         amr->pdelete( lv, PID, ReuseMemory_Yes );
Init/Init_RecordBasePatch.cpp:18:   const int scale0      = amr->scale[0];
Init/Init_RecordBasePatch.cpp:30:   for (int P=0; P<amr->num[0]; P+=8)
Init/Init_RecordBasePatch.cpp:33:         order[d] = (amr->patch[0][0][P]->corner[d] - MPI_Rank_X[d]*NX0[d]*scale0) / (PATCH_SIZE*scale0) + NBuf;
Init/Init_Refine.cpp:20:   const int Width = PATCH_SIZE*amr->scale[lv+1];
Init/Init_Refine.cpp:46:      for (int PID=amr->NPatchComma[lv][m]; PID<amr->NPatchComma[lv][m+1]; PID++)
Init/Init_Refine.cpp:48:         if ( amr->patch[0][lv][PID]->flag )
Init/Init_Refine.cpp:51:            amr->patch[0][lv][PID]->son = amr->num[lv+1];
Init/Init_Refine.cpp:55:            Cr = amr->patch[0][lv][PID]->corner;
Init/Init_Refine.cpp:57:            amr->pnew( lv+1, Cr[0],       Cr[1],       Cr[2],       PID, AllocData[0], AllocData[0], AllocData[0] );
Init/Init_Refine.cpp:58:            amr->pnew( lv+1, Cr[0]+Width, Cr[1],       Cr[2],       PID, AllocData[1], AllocData[1], AllocData[1] );
Init/Init_Refine.cpp:59:            amr->pnew( lv+1, Cr[0],       Cr[1]+Width, Cr[2],       PID, AllocData[2], AllocData[2], AllocData[2] );
Init/Init_Refine.cpp:60:            amr->pnew( lv+1, Cr[0],       Cr[1],       Cr[2]+Width, PID, AllocData[3], AllocData[3], AllocData[3] );
Init/Init_Refine.cpp:61:            amr->pnew( lv+1, Cr[0]+Width, Cr[1]+Width, Cr[2],       PID, AllocData[4], AllocData[4], AllocData[4] );
Init/Init_Refine.cpp:62:            amr->pnew( lv+1, Cr[0],       Cr[1]+Width, Cr[2]+Width, PID, AllocData[5], AllocData[5], AllocData[5] );
Init/Init_Refine.cpp:63:            amr->pnew( lv+1, Cr[0]+Width, Cr[1],       Cr[2]+Width, PID, AllocData[6], AllocData[6], AllocData[6] );
Init/Init_Refine.cpp:64:            amr->pnew( lv+1, Cr[0]+Width, Cr[1]+Width, Cr[2]+Width, PID, AllocData[7], AllocData[7], AllocData[7] );
Init/Init_Refine.cpp:68:            amr->NPatchComma[lv+1][m+1] += 8;
Init/Init_Refine.cpp:75:         } // if ( amr->patch[0][lv][PID]->flag )
Init/Init_Refine.cpp:76:      } // for (int PID=amr->NPatchComma[lv][s+1]; PID<amr->NPatchComma[lv][s+2]; PID++)
Init/Init_Refine.cpp:78:      for (int n=m+2; n<28; n++)    amr->NPatchComma[lv+1][n] = amr->num[lv+1];
Init/Init_Refine.cpp:93:   if ( amr->WithFlux )
Init/Init_Refine.cpp:98:   if ( amr->WithElectric )
Init/Init_UniformGrid.cpp:32:   const int scale          = amr->scale[lv];
Init/Init_UniformGrid.cpp:37:// 1. set up the load-balance cut points amr->LB->CutPoint[] on lv
Init/Init_UniformGrid.cpp:69:   LB_SetCutPoint( lv, NPG_Total, amr->LB->CutPoint[lv], InputLBIdx0AndLoad_Yes, LBIdx0_AllRank, Load_AllRank,
Init/Init_UniformGrid.cpp:93:         amr->pnew( lv, Cr[0],        Cr[1],        Cr[2],        -1, true, true, true );
Init/Init_UniformGrid.cpp:94:         amr->pnew( lv, Cr[0]+PScale, Cr[1],        Cr[2],        -1, true, true, true );
Init/Init_UniformGrid.cpp:95:         amr->pnew( lv, Cr[0],        Cr[1]+PScale, Cr[2],        -1, true, true, true );
Init/Init_UniformGrid.cpp:96:         amr->pnew( lv, Cr[0],        Cr[1],        Cr[2]+PScale, -1, true, true, true );
Init/Init_UniformGrid.cpp:97:         amr->pnew( lv, Cr[0]+PScale, Cr[1]+PScale, Cr[2],        -1, true, true, true );
Init/Init_UniformGrid.cpp:98:         amr->pnew( lv, Cr[0],        Cr[1]+PScale, Cr[2]+PScale, -1, true, true, true );
Init/Init_UniformGrid.cpp:99:         amr->pnew( lv, Cr[0]+PScale, Cr[1],        Cr[2]+PScale, -1, true, true, true );
Init/Init_UniformGrid.cpp:100:         amr->pnew( lv, Cr[0]+PScale, Cr[1]+PScale, Cr[2]+PScale, -1, true, true, true );
Init/Init_UniformGrid.cpp:105:   for (int m=1; m<28; m++)   amr->NPatchComma[lv][m] = amr->num[lv];
Init/End_MemFree.cpp:26:      for (int PID=0; PID<amr->num[lv]; PID++)
Init/End_MemFree.cpp:28:         amr->patch[0][lv][PID]->NPar = 0;
Init/End_MemFree.cpp:29:         for (int i=0; i<PAR_NTYPE; i++) amr->patch[0][lv][PID]->NParType[i] = 0;
Init/End_MemFree.cpp:30:         free( amr->patch[0][lv][PID]->ParList );
Init/End_MemFree.cpp:31:         amr->patch[0][lv][PID]->ParList = NULL;
Init/Init_ByFile.cpp:64:   const double Par_Weight    = amr->LB->Par_Weight;
Init/Init_ByFile.cpp:109:         const int NP = Mis_Scale2Cell( amr->BoxScale[d], lv ) / PS1;
Init/Init_ByFile.cpp:196:      if ( amr->LB->IdxList_Real         [lv] != NULL )   delete [] amr->LB->IdxList_Real         [lv];
Init/Init_ByFile.cpp:197:      if ( amr->LB->IdxList_Real_IdxTable[lv] != NULL )   delete [] amr->LB->IdxList_Real_IdxTable[lv];
Init/Init_ByFile.cpp:199:      amr->LB->IdxList_Real         [lv] = new long [ amr->NPatchComma[lv][1] ];
Init/Init_ByFile.cpp:200:      amr->LB->IdxList_Real_IdxTable[lv] = new int  [ amr->NPatchComma[lv][1] ];
Init/Init_ByFile.cpp:202:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Init/Init_ByFile.cpp:203:         amr->LB->IdxList_Real[lv][PID] = amr->patch[0][lv][PID]->LB_Idx;
Init/Init_ByFile.cpp:205:      Mis_Heapsort( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], amr->LB->IdxList_Real_IdxTable[lv] );
Init/Init_ByFile.cpp:256:         if ( amr->WithFlux )       Flu_AllocateFluxArray( lv-1 );
Init/Init_ByFile.cpp:258:         if ( amr->WithElectric )   MHD_AllocateElectricArray( lv-1 );
Init/Init_ByFile.cpp:275:   Buf_GetBufferData( OPT__UM_IC_LEVEL, amr->FluSg[OPT__UM_IC_LEVEL], amr->MagSg[OPT__UM_IC_LEVEL], NULL_INT,
Init/Init_ByFile.cpp:324:      Buf_GetBufferData( SonLv, amr->FluSg[SonLv], amr->MagSg[SonLv], NULL_INT,
Init/Init_ByFile.cpp:340:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT,
Init/Init_ByFile.cpp:344:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_RESTRICT, _TOTAL, _MAG, NULL_INT,    USELB_YES );
Init/Init_ByFile.cpp:347:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL,  _TOTAL, _MAG, Flu_ParaBuf, USELB_YES );
Init/Init_ByFile.cpp:413:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT,
Init/Init_ByFile.cpp:417:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_RESTRICT,    _TOTAL, _MAG, NULL_INT,    USELB_YES );
Init/Init_ByFile.cpp:419:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_AFTER_FIXUP, _TOTAL, _MAG, Flu_ParaBuf, USELB_YES );
Init/Init_ByFile.cpp:455:// Return      :  amr->patch->fluid
Init/Init_ByFile.cpp:472:   const int    scale       = amr->scale[UM_lv];
Init/Init_ByFile.cpp:473:   const double dh          = amr->dh[UM_lv];
Init/Init_ByFile.cpp:499:         for (int PID0=0; PID0<amr->NPatchComma[UM_lv][1]; PID0+=8)
Init/Init_ByFile.cpp:502:            for (int d=0; d<3; d++)    Offset3D_File0[d] = amr->patch[0][UM_lv][PID0]->corner[d] / scale;
Init/Init_ByFile.cpp:549:               for (int k=0; k<PS1; k++)  {  z = amr->patch[0][UM_lv][PID]->EdgeL[2] + (k+0.5)*dh;
Init/Init_ByFile.cpp:550:               for (int j=0; j<PS1; j++)  {  y = amr->patch[0][UM_lv][PID]->EdgeL[1] + (j+0.5)*dh;
Init/Init_ByFile.cpp:551:               for (int i=0; i<PS1; i++)  {  x = amr->patch[0][UM_lv][PID]->EdgeL[0] + (i+0.5)*dh;
Init/Init_ByFile.cpp:567:                     amr->patch[ amr->FluSg[UM_lv] ][UM_lv][PID]->fluid[v][k][j][i] = fluid_out[v];
Init/Init_ByFile.cpp:570:         } // for (int PID0=0; PID0<amr->NPatchComma[UM_lv][1]; PID0+=8)
Init/Init_ByFile.cpp:746:// Return      :  amr->patch[0][lv][*]->flag
Init/Init_ByFile.cpp:752:   for (int PID=0; PID<amr->num[lv]; PID++)  amr->patch[0][lv][PID]->flag = false;
Init/Init_ByFile.cpp:756:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Init/Init_ByFile.cpp:759:      for (int d=0; d<3; d++)    order[d] = Mis_Scale2Cell( amr->patch[0][lv][PID]->corner[d], lv )/PS1;
Init/Init_ByFile.cpp:764:         amr->patch[0][lv][PID]->flag = true;
Init/Init_ByRestart_HDF5.cpp:212:   LoadField( "BoxSize",               KeyInfo.BoxSize,              H5_SetID_KeyInfo, H5_TypeID_KeyInfo,    Fatal,  amr->BoxSize,          3,    Fatal );
Init/Init_ByRestart_HDF5.cpp:247:   amr->Par->NPar_Active_AllRank = KeyInfo.Par_NPar;
Init/Init_ByRestart_HDF5.cpp:282:      amr->FluSgTime[lv][ amr->FluSg[lv] ] = Time[lv];
Init/Init_ByRestart_HDF5.cpp:284:      amr->MagSgTime[lv][ amr->MagSg[lv] ] = Time[lv];
Init/Init_ByRestart_HDF5.cpp:287:      amr->PotSgTime[lv][ amr->PotSg[lv] ] = Time[lv];
Init/Init_ByRestart_HDF5.cpp:424:      LB_SetCutPoint( lv, NPatchTotal[lv]/8, amr->LB->CutPoint[lv], InputLBIdx0AndLoad_Yes, LBIdx0_AllRank, Load_AllRank,
Init/Init_ByRestart_HDF5.cpp:550:   if ( MPI_Rank == 0  &&  NParAllRank != amr->Par->NPar_Active_AllRank )
Init/Init_ByRestart_HDF5.cpp:552:                 NParAllRank, amr->Par->NPar_Active_AllRank );
Init/Init_ByRestart_HDF5.cpp:557:   NParThisRank = amr->Par->NPar_Active_AllRank;
Init/Init_ByRestart_HDF5.cpp:562:   amr->Par->InitRepo( NParThisRank, MPI_NRank );
Init/Init_ByRestart_HDF5.cpp:567:   amr->Par->NPar_AcPlusInac = 0;
Init/Init_ByRestart_HDF5.cpp:568:   amr->Par->NPar_Active     = 0;
Init/Init_ByRestart_HDF5.cpp:578:   if ( GParID_Offset[ NPatchAllLv-1 ] + NParList_AllLv[ NPatchAllLv-1 ] != amr->Par->NPar_Active_AllRank )
Init/Init_ByRestart_HDF5.cpp:580:                 GParID_Offset[ NPatchAllLv-1 ] + NParList_AllLv[ NPatchAllLv-1 ], amr->Par->NPar_Active_AllRank );
Init/Init_ByRestart_HDF5.cpp:695:      H5_SetDims_ParData[0] = amr->Par->NPar_Active_AllRank;
Init/Init_ByRestart_HDF5.cpp:775:            const int PatchScale = PS1*amr->scale[lv];
Init/Init_ByRestart_HDF5.cpp:778:            for (int PID=0; PID<amr->num[lv]; PID++)
Init/Init_ByRestart_HDF5.cpp:784:                  if (  TABLE_02( LocalID, 'x'+d, 0, 1 ) != (amr->patch[0][lv][PID]->corner[d]/PatchScale)%2  )
Init/Init_ByRestart_HDF5.cpp:804:            TRange_Min[d] = MPI_Rank_X[d]*NX0[d]*amr->scale[0];
Init/Init_ByRestart_HDF5.cpp:805:            TRange_Max[d] = TRange_Min[d] + NX0[d]*amr->scale[0];
Init/Init_ByRestart_HDF5.cpp:868:      for (int m=1; m<28; m++)   amr->NPatchComma[lv][m] = amr->num[lv];
Init/Init_ByRestart_HDF5.cpp:871:      if ( amr->LB->IdxList_Real         [lv] != NULL )   delete [] amr->LB->IdxList_Real         [lv];
Init/Init_ByRestart_HDF5.cpp:872:      if ( amr->LB->IdxList_Real_IdxTable[lv] != NULL )   delete [] amr->LB->IdxList_Real_IdxTable[lv];
Init/Init_ByRestart_HDF5.cpp:874:      amr->LB->IdxList_Real         [lv] = new long [ amr->NPatchComma[lv][1] ];
Init/Init_ByRestart_HDF5.cpp:875:      amr->LB->IdxList_Real_IdxTable[lv] = new int  [ amr->NPatchComma[lv][1] ];
Init/Init_ByRestart_HDF5.cpp:877:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Init/Init_ByRestart_HDF5.cpp:878:         amr->LB->IdxList_Real[lv][PID] = amr->patch[0][lv][PID]->LB_Idx;
Init/Init_ByRestart_HDF5.cpp:880:      Mis_Heapsort( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], amr->LB->IdxList_Real_IdxTable[lv] );
Init/Init_ByRestart_HDF5.cpp:891:   MPI_Reduce( amr->num, NLoadPatch, KeyInfo.NLevel, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD );
Init/Init_ByRestart_HDF5.cpp:902:   if ( amr->Par->NPar_AcPlusInac != NParThisRank )
Init/Init_ByRestart_HDF5.cpp:904:                 amr->Par->NPar_AcPlusInac, NParThisRank );
Init/Init_ByRestart_HDF5.cpp:949://     needs amr->LB->IdxList_Real[], which will be constructed only AFTER calling LB_Init_LoadBalance()
Init/Init_ByRestart_HDF5.cpp:967:   if ( amr->LB->Par_Weight > 0.0  &&  !ReenablePar )
Init/Init_ByRestart_HDF5.cpp:968:   LB_Init_LoadBalance( Redistribute_Yes, SendGridData_Yes, amr->LB->Par_Weight, ResetLB_Yes, AllLv );
Init/Init_ByRestart_HDF5.cpp:998:      if ( lv > 0  &&  amr->WithFlux )    Flu_AllocateFluxArray( lv-1 );
Init/Init_ByRestart_HDF5.cpp:1002:      if ( lv > 0  &&  amr->WithElectric )   MHD_AllocateElectricArray( lv-1 );
Init/Init_ByRestart_HDF5.cpp:1006:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_NO );
Init/Init_ByRestart_HDF5.cpp:1246:   amr->pnew( lv, CrList[GID][0], CrList[GID][1], CrList[GID][2], -1, WithData_Yes, WithData_Yes, WithData_Yes );
Init/Init_ByRestart_HDF5.cpp:1248:   PID = amr->num[lv] - 1;
Init/Init_ByRestart_HDF5.cpp:1271:                           amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v] );
Init/Init_ByRestart_HDF5.cpp:1296:                           amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic[v] );
Init/Init_ByRestart_HDF5.cpp:1349:         NewParList[p] = amr->Par->AddOneParticle( NewParAtt );
Init/Init_ByRestart_HDF5.cpp:1358:      const real *PType = amr->Par->Type;
Init/Init_ByRestart_HDF5.cpp:1360:      const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Init/Init_ByRestart_HDF5.cpp:1363:      amr->patch[0][lv][PID]->AddParticle( NParThisPatch, NewParList, &amr->Par->NPar_Lv[lv],
Init/Init_ByRestart_HDF5.cpp:1364:                                           PType, ParPos, amr->Par->NPar_AcPlusInac, Comment );
Init/Init_ByRestart_HDF5.cpp:1366:      amr->patch[0][lv][PID]->AddParticle( NParThisPatch, NewParList, &amr->Par->NPar_Lv[lv],
Init/Init_ByRestart_v1.cpp:189:      amr->FluSgTime[lv][ amr->FluSg[lv] ] = Time[lv];
Init/Init_ByRestart_v1.cpp:191:      amr->MagSgTime[lv][ amr->MagSg[lv] ] = Time[lv];
Init/Init_ByRestart_v1.cpp:194:      amr->PotSgTime[lv][ amr->PotSg[lv] ] = Time[lv];
Init/Init_ByRestart_v1.cpp:323:      LB_SetCutPoint( lv, NPatchTotal[lv]/8, amr->LB->CutPoint[lv], InputLBIdx0AndLoad_Yes, LBIdx0_AllRank, Load_AllRank,
Init/Init_ByRestart_v1.cpp:357:               TargetRange_Min[d] = MPI_Rank_X[d]*NX0[d]*amr->scale[0];
Init/Init_ByRestart_v1.cpp:358:               TargetRange_Max[d] = TargetRange_Min[d] + NX0[d]*amr->scale[0];
Init/Init_ByRestart_v1.cpp:385:                  amr->pnew( lv, LoadCorner[0], LoadCorner[1], LoadCorner[2], -1, true, true, true );
Init/Init_ByRestart_v1.cpp:390:                     PID = amr->num[lv] - 1;
Init/Init_ByRestart_v1.cpp:401:                           amr->patch[amr->FluSg[lv]][lv][PID]->fluid[v][k][j][i] = InvData_Flu[k][j][i][v];
Init/Init_ByRestart_v1.cpp:405:                        fread( amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid, sizeof(real),
Init/Init_ByRestart_v1.cpp:425:            for (int m=1; m<28; m++)   amr->NPatchComma[lv][m] = amr->num[lv];
Init/Init_ByRestart_v1.cpp:428:            if ( amr->LB->IdxList_Real         [lv] != NULL )   delete [] amr->LB->IdxList_Real         [lv];
Init/Init_ByRestart_v1.cpp:429:            if ( amr->LB->IdxList_Real_IdxTable[lv] != NULL )   delete [] amr->LB->IdxList_Real_IdxTable[lv];
Init/Init_ByRestart_v1.cpp:431:            amr->LB->IdxList_Real         [lv] = new long [ amr->NPatchComma[lv][1] ];
Init/Init_ByRestart_v1.cpp:432:            amr->LB->IdxList_Real_IdxTable[lv] = new int  [ amr->NPatchComma[lv][1] ];
Init/Init_ByRestart_v1.cpp:434:            for (int RPID=0; RPID<amr->NPatchComma[lv][1]; RPID++)
Init/Init_ByRestart_v1.cpp:435:               amr->LB->IdxList_Real[lv][RPID] = amr->patch[0][lv][RPID]->LB_Idx;
Init/Init_ByRestart_v1.cpp:437:            Mis_Heapsort( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], amr->LB->IdxList_Real_IdxTable[lv] );
Init/Init_ByRestart_v1.cpp:473://     needs amr->LB->IdxList_Real[], which will be constructed only AFTER calling LB_Init_LoadBalance()
Init/Init_ByRestart_v1.cpp:492:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], NULL_INT, NULL_INT, NULL_INT, NULL_INT, _TOTAL, _NONE );
Init/Init_ByRestart_v1.cpp:494:      LB_GetBufferData( lv, amr->FluSg[lv], NULL_INT, NULL_INT, DATA_RESTRICT, _TOTAL, _NONE, NULL_INT );
Init/Init_ByRestart_v1.cpp:496:      Buf_GetBufferData( lv, amr->FluSg[lv], NULL_INT, NULL_INT, DATA_GENERAL, _TOTAL, _NONE, Flu_ParaBuf, USELB_YES );
Init/Init_ByRestart_v1.cpp:525:      if ( lv > 0  &&  amr->WithFlux )    Flu_AllocateFluxArray( lv-1 );
Init/Init_ByRestart_v1.cpp:530:   Buf_GetBufferData( NLEVEL-1, amr->FluSg[NLEVEL-1], NULL_INT, NULL_INT, DATA_GENERAL, _TOTAL, _NONE, Flu_ParaBuf, USELB_NO );
Init/Init_ByRestart_v1.cpp:538:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], NULL_INT, NULL_INT, NULL_INT, NULL_INT, _TOTAL, _NONE );
Init/Init_ByRestart_v1.cpp:541:      Buf_GetBufferData( lv, amr->FluSg[lv], NULL_INT, NULL_INT, DATA_GENERAL, _TOTAL, _NONE, Flu_ParaBuf, USELB_NO );
Init/Init_ByRestart_v1.cpp:1370:      CompareVar( "LB->WLI_Max",             lb_wli_max,             (real)amr->LB->WLI_Max,          NonFatal );
Init/Init_ByRestart_v2.cpp:231:   fread( &amr->Par->NPar_Active_AllRank, sizeof(long),             1, File );
Init/Init_ByRestart_v2.cpp:275:      amr->FluSgTime[lv][ amr->FluSg[lv] ] = Time[lv];
Init/Init_ByRestart_v2.cpp:277:      amr->MagSgTime[lv][ amr->MagSg[lv] ] = Time[lv];
Init/Init_ByRestart_v2.cpp:280:      amr->PotSgTime[lv][ amr->PotSg[lv] ] = Time[lv];
Init/Init_ByRestart_v2.cpp:331:   ExpectSize += (long)PAR_NATT_STORED*amr->Par->NPar_Active_AllRank*sizeof(real);
Init/Init_ByRestart_v2.cpp:419:      LB_SetCutPoint( lv, NPatchTotal[lv]/8, amr->LB->CutPoint[lv], InputLBIdx0AndLoad_Yes, LBIdx0_AllRank,
Init/Init_ByRestart_v2.cpp:455:               TargetRange_Min[d] = MPI_Rank_X[d]*NX0[d]*amr->scale[0];
Init/Init_ByRestart_v2.cpp:456:               TargetRange_Max[d] = TargetRange_Min[d] + NX0[d]*amr->scale[0];
Init/Init_ByRestart_v2.cpp:481:                  amr->pnew( lv, LoadCorner[0], LoadCorner[1], LoadCorner[2], -1, true, true, true );
Init/Init_ByRestart_v2.cpp:486:                     PID = amr->num[lv] - 1;
Init/Init_ByRestart_v2.cpp:494:                     amr->patch[0][lv][PID]->NPar   = *Load_NPar;
Init/Init_ByRestart_v2.cpp:495:                     amr->patch[1][lv][PID]->LB_Idx = *Load_GParID;
Init/Init_ByRestart_v2.cpp:502:                     fread( amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid, sizeof(real), CUBE(PS1)*NCOMP_TOTAL, File );
Init/Init_ByRestart_v2.cpp:520:                     fread( amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic, sizeof(real), PS1P1*SQR(PS1)*NCOMP_MAG, File );
Init/Init_ByRestart_v2.cpp:541:            for (int m=1; m<28; m++)   amr->NPatchComma[lv][m] = amr->num[lv];
Init/Init_ByRestart_v2.cpp:544:            if ( amr->LB->IdxList_Real         [lv] != NULL )   delete [] amr->LB->IdxList_Real         [lv];
Init/Init_ByRestart_v2.cpp:545:            if ( amr->LB->IdxList_Real_IdxTable[lv] != NULL )   delete [] amr->LB->IdxList_Real_IdxTable[lv];
Init/Init_ByRestart_v2.cpp:547:            amr->LB->IdxList_Real         [lv] = new long [ amr->NPatchComma[lv][1] ];
Init/Init_ByRestart_v2.cpp:548:            amr->LB->IdxList_Real_IdxTable[lv] = new int  [ amr->NPatchComma[lv][1] ];
Init/Init_ByRestart_v2.cpp:550:            for (int RPID=0; RPID<amr->NPatchComma[lv][1]; RPID++)
Init/Init_ByRestart_v2.cpp:551:               amr->LB->IdxList_Real[lv][RPID] = amr->patch[0][lv][RPID]->LB_Idx;
Init/Init_ByRestart_v2.cpp:553:            Mis_Heapsort( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], amr->LB->IdxList_Real_IdxTable[lv] );
Init/Init_ByRestart_v2.cpp:576:   const long ParDataSize1v = amr->Par->NPar_Active_AllRank*sizeof(real);
Init/Init_ByRestart_v2.cpp:595:   amr->Par->InitRepo( NParThisRank, MPI_NRank );
Init/Init_ByRestart_v2.cpp:600:   amr->Par->NPar_AcPlusInac = 0;
Init/Init_ByRestart_v2.cpp:601:   amr->Par->NPar_Active     = 0;
Init/Init_ByRestart_v2.cpp:606:   const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Init/Init_ByRestart_v2.cpp:620:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Init/Init_ByRestart_v2.cpp:623:            NParThisPatch = amr->patch[0][lv][PID]->NPar;
Init/Init_ByRestart_v2.cpp:624:            GParID        = amr->patch[1][lv][PID]->LB_Idx;
Init/Init_ByRestart_v2.cpp:629:               amr->patch[0][lv][PID]->NPar = 0;
Init/Init_ByRestart_v2.cpp:646:                  NewParList[p] = amr->Par->AddOneParticle( NewParAtt );
Init/Init_ByRestart_v2.cpp:656:               const real *PType = amr->Par->Type;
Init/Init_ByRestart_v2.cpp:660:               amr->patch[0][lv][PID]->AddParticle( NParThisPatch, NewParList, &amr->Par->NPar_Lv[lv],
Init/Init_ByRestart_v2.cpp:661:                                                    PType, ParPos, amr->Par->NPar_AcPlusInac, Comment );
Init/Init_ByRestart_v2.cpp:663:               amr->patch[0][lv][PID]->AddParticle( NParThisPatch, NewParList, &amr->Par->NPar_Lv[lv],
Init/Init_ByRestart_v2.cpp:666:            } // if ( amr->patch[0][lv][PID]->NPar > 0 )
Init/Init_ByRestart_v2.cpp:671:         if ( amr->Par->NPar_AcPlusInac != NParThisRank )
Init/Init_ByRestart_v2.cpp:673:                       amr->Par->NPar_AcPlusInac, NParThisRank );
Init/Init_ByRestart_v2.cpp:699://     needs amr->LB->IdxList_Real[], which will be constructed only AFTER calling LB_Init_LoadBalance()
Init/Init_ByRestart_v2.cpp:717:   if ( amr->LB->Par_Weight > 0.0 )
Init/Init_ByRestart_v2.cpp:718:   LB_Init_LoadBalance( Redistribute_Yes, SendGridData_Yes, amr->LB->Par_Weight, ResetLB_Yes, AllLv );
Init/Init_ByRestart_v2.cpp:726:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT, _TOTAL, _MAG );
Init/Init_ByRestart_v2.cpp:728:      LB_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_RESTRICT, _TOTAL, _MAG, NULL_INT );
Init/Init_ByRestart_v2.cpp:730:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_YES );
Init/Init_ByRestart_v2.cpp:760:      if ( lv > 0  &&  amr->WithFlux )    Flu_AllocateFluxArray( lv-1 );
Init/Init_ByRestart_v2.cpp:764:      if ( lv > 0  &&  amr->WithElectric )   MHD_AllocateElectricArray( lv-1 );
Init/Init_ByRestart_v2.cpp:770:   Buf_GetBufferData( NLEVEL-1, amr->FluSg[NLEVEL-1], amr->MagSg[NLEVEL-1], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_NO );
Init/Init_ByRestart_v2.cpp:777:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT, _TOTAL, _MAG );
Init/Init_ByRestart_v2.cpp:780:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_NO );
Init/Init_ByRestart_v2.cpp:1432:      CompareVar( "LB->WLI_Max",             lb_wli_max,                   amr->LB->WLI_Max,          NonFatal );
Init/Init_Field.cpp:167://                       (e.g., amr->patch->fluid[])
Init/Init_GAMER.cpp:41:   amr->Par = new Particle_t();
Init/Init_GAMER.cpp:200:   switch ( amr->Par->Init )
Init/Init_GAMER.cpp:204:            Par_Init_ByFunction_Ptr( amr->Par->NPar_Active, amr->Par->NPar_Active_AllRank,
Init/Init_GAMER.cpp:205:                                     amr->Par->Mass, amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ,
Init/Init_GAMER.cpp:206:                                     amr->Par->VelX, amr->Par->VelY, amr->Par->VelZ, amr->Par->Time,
Init/Init_GAMER.cpp:207:                                     amr->Par->Type, amr->Par->Attribute );
Init/Init_GAMER.cpp:221:                    "PAR_INIT", (int)amr->Par->Init );
Init/Init_GAMER.cpp:224:   if ( amr->Par->Init != PAR_INIT_BY_RESTART )    Par_Aux_InitCheck();
Init/Init_GAMER.cpp:276:         Buf_GetBufferData( lv, amr->FluSg[lv], NULL_INT, NULL_INT, DATA_GENERAL, _DENS, _NONE, Rho_ParaBuf, USELB_YES );
Init/Init_GAMER.cpp:278:         Gra_AdvanceDt( lv, Time[lv], NULL_REAL, NULL_REAL, NULL_INT, amr->PotSg[lv], true, false, false, false, true );
Init/Init_GAMER.cpp:281:         Buf_GetBufferData( lv, NULL_INT, NULL_INT, amr->PotSg[lv], POT_FOR_POISSON, _POTE, _NONE, Pot_ParaBuf, USELB_YES );
Init/Init_GAMER.cpp:301:      Par_UpdateParticle( lv, amr->PotSgTime[lv][ amr->PotSg[lv] ], NULL_REAL, PAR_UPSTEP_ACC_ONLY, StoreAcc_Yes, UseStoredAcc_No );
Init/Init_Parallelization.cpp:43:   if ( amr->Par->GhostSizeTracer > 0 )
Init/Init_Parallelization.cpp:44:   IntGhostSize_Flu = MAX( IntGhostSize_Flu, (amr->Par->GhostSizeTracer+1)/2 + NGhost_Flu );
Init/Init_Parallelization.cpp:95:   if ( amr->Par->Init != PAR_INIT_BY_RESTART )
Init/Init_Parallelization.cpp:97:      if ( amr->Par->NPar_Active_AllRank < 0 )
Init/Init_Parallelization.cpp:98:         Aux_Error( ERROR_INFO, "NPar_Active_AllRank = %ld < 0 !!\n", amr->Par->NPar_Active_AllRank );
Init/Init_Parallelization.cpp:100:      const int NPar_per_Rank  = amr->Par->NPar_Active_AllRank / MPI_NRank;
Init/Init_Parallelization.cpp:101:      const int Rank_with_more = amr->Par->NPar_Active_AllRank % MPI_NRank;
Init/Init_Parallelization.cpp:104:      amr->Par->NPar_AcPlusInac = NPar_per_Rank;
Init/Init_Parallelization.cpp:106:      if ( MPI_Rank < Rank_with_more )    amr->Par->NPar_AcPlusInac ++;
Init/Init_Parallelization.cpp:111:      MPI_Reduce( &amr->Par->NPar_AcPlusInac, &NPar_Sum, 1, MPI_LONG, MPI_SUM, 0, MPI_COMM_WORLD );
Init/Init_Parallelization.cpp:113:      if ( MPI_Rank == 0  &&  NPar_Sum != amr->Par->NPar_Active_AllRank )
Init/Init_Parallelization.cpp:115:                    NPar_Sum, amr->Par->NPar_Active_AllRank );
Init/Init_Parallelization.cpp:117:   } // if ( amr->Par->Init != PAR_INIT_BY_RESTART )
Init/Init_Parallelization.cpp:223:   const double dh_min             = amr->dh[TOP_LEVEL];
Init/Init_Parallelization.cpp:224:   const int    SubDomain_Scale[3] = { amr->BoxScale[0]/MPI_NRank_X[0],
Init/Init_Parallelization.cpp:225:                                       amr->BoxScale[1]/MPI_NRank_X[1],
Init/Init_Parallelization.cpp:226:                                       amr->BoxScale[2]/MPI_NRank_X[2] };
Init/Init_Parallelization.cpp:255:         SubDomain_EdgeR3D[k][j][i][0] = ( i == MPI_NRank_X[0]-1 ) ? amr->BoxSize[0] : SubDomain_EdgeL3D[k  ][j  ][i+1][0];
Init/Init_Parallelization.cpp:256:         SubDomain_EdgeR3D[k][j][i][1] = ( j == MPI_NRank_X[1]-1 ) ? amr->BoxSize[1] : SubDomain_EdgeL3D[k  ][j+1][i  ][1];
Init/Init_Parallelization.cpp:257:         SubDomain_EdgeR3D[k][j][i][2] = ( k == MPI_NRank_X[2]-1 ) ? amr->BoxSize[2] : SubDomain_EdgeL3D[k+1][j  ][i  ][2];
Init/Init_Parallelization.cpp:262:   MPI_Scatter( SubDomain_EdgeL, 3, MPI_DOUBLE, amr->ParaVar->SubDomain_EdgeL, 3, MPI_DOUBLE, 0, MPI_COMM_WORLD );
Init/Init_Parallelization.cpp:263:   MPI_Scatter( SubDomain_EdgeR, 3, MPI_DOUBLE, amr->ParaVar->SubDomain_EdgeR, 3, MPI_DOUBLE, 0, MPI_COMM_WORLD );
Init/Init_ResetParameter.cpp:17://                   (i.e., those depend on the input runtime parameters, e.g., amr->dh[]/BoxSize[]/BoxScale[])
Init/Init_ResetParameter.cpp:214:   for (int lv=0; lv<NLEVEL; lv++)     amr->dh[lv] = BOX_SIZE / (double)( NX0_Max*(1<<lv) );
Init/Init_ResetParameter.cpp:218:      amr->BoxSize  [d] = NX0_TOT[d]*amr->dh   [0];
Init/Init_ResetParameter.cpp:219:      amr->BoxScale [d] = NX0_TOT[d]*amr->scale[0];
Init/Init_ResetParameter.cpp:220:      amr->BoxEdgeL [d] = 0.0;
Init/Init_ResetParameter.cpp:221:      amr->BoxEdgeR [d] = amr->BoxSize[d];
Init/Init_ResetParameter.cpp:222:      amr->BoxCenter[d] = 0.5*( amr->BoxEdgeL[d] + amr->BoxEdgeR[d] );
Init/Init_ResetParameter.cpp:230:      amr->NUpdateLv[lv] = ( OPT__DT_LEVEL == DT_LEVEL_SHARED ) ? 1L : (1L<<lv);
Init/Init_ResetParameter.cpp:235:   if ( OPT__FIXUP_FLUX )  amr->WithFlux = true;
Init/Init_ResetParameter.cpp:237:   if ( OPT__FIXUP_FLUX )  amr->WithFlux = true;
Init/Init_ResetParameter.cpp:245:   if ( OPT__FIXUP_ELECTRIC )    amr->WithElectric = true;
Init/Init_ResetParameter.cpp:323:   for (int lv=0; lv<NLEVEL; lv++)  amr->ResPower2[lv] = NBits0 + lv;
Init/Init_ResetParameter.cpp:340:   if ( !PeriodicAllDir  &&  amr->Par->RemoveCell < 0.0 )
Init/Init_ResetParameter.cpp:342:      switch ( amr->Par->Interp )
Init/Init_ResetParameter.cpp:344:         case ( PAR_INTERP_NGP ):   amr->Par->RemoveCell = 1.0;   break;
Init/Init_ResetParameter.cpp:345:         case ( PAR_INTERP_CIC ):   amr->Par->RemoveCell = 1.5;   break;
Init/Init_ResetParameter.cpp:346:         case ( PAR_INTERP_TSC ):   amr->Par->RemoveCell = 2.0;   break;
Init/Init_ResetParameter.cpp:350:      const double PAR_REMOVE_CELL = amr->Par->RemoveCell;
Init/Init_ResetParameter.cpp:355:   else if ( PeriodicAllDir  &&  amr->Par->RemoveCell >= 0.0 )
Init/Init_ResetParameter.cpp:357:      amr->Par->RemoveCell = -1.0;
Init/Init_ResetParameter.cpp:359:      const double PAR_REMOVE_CELL = amr->Par->RemoveCell;
Init/Init_ResetParameter.cpp:364:   if ( amr->Par->GhostSize < 0 )
Init/Init_ResetParameter.cpp:366:      switch ( amr->Par->Interp )
Init/Init_ResetParameter.cpp:368:         case ( PAR_INTERP_NGP ): amr->Par->GhostSize = 0;  break;
Init/Init_ResetParameter.cpp:369:         case ( PAR_INTERP_CIC ): amr->Par->GhostSize = 1;  break;
Init/Init_ResetParameter.cpp:370:         case ( PAR_INTERP_TSC ): amr->Par->GhostSize = 1;  break;
Init/Init_ResetParameter.cpp:374:      PRINT_WARNING( amr->Par->GhostSize, FORMAT_INT, "for the adopted PAR_INTERP scheme" );
Init/Init_ResetParameter.cpp:377:   if ( amr->Par->GhostSizeTracer < 0 )
Init/Init_ResetParameter.cpp:379:      switch ( amr->Par->InterpTracer )
Init/Init_ResetParameter.cpp:381:         case ( PAR_INTERP_NGP ): amr->Par->GhostSizeTracer = 1;  break;
Init/Init_ResetParameter.cpp:382:         case ( PAR_INTERP_CIC ): amr->Par->GhostSizeTracer = 2;  break;
Init/Init_ResetParameter.cpp:383:         case ( PAR_INTERP_TSC ): amr->Par->GhostSizeTracer = 2;  break;
Init/Init_ResetParameter.cpp:387:      PRINT_WARNING( amr->Par->GhostSizeTracer, FORMAT_INT, "for the adopted PAR_TR_INTERP scheme" );
Init/Init_ResetParameter.cpp:393:// Green's function coefficient at the origin (must be set after setting amr->Par->Interp)
Init/Init_ResetParameter.cpp:399:      switch ( amr->Par->Interp )
Init/Init_ResetParameter.cpp:487:      amr->FluSgTime[lv][   amr->FluSg[lv] ] = Time[lv];
Init/Init_ResetParameter.cpp:489:      amr->MagSgTime[lv][   amr->MagSg[lv] ] = Time[lv];
Init/Init_ResetParameter.cpp:492:      amr->PotSgTime[lv][   amr->PotSg[lv] ] = Time[lv];
Init/Init_ResetParameter.cpp:495:      amr->FluSgTime[lv][ 1-amr->FluSg[lv] ] = Time_Prev[lv];
Init/Init_ResetParameter.cpp:497:      amr->MagSgTime[lv][ 1-amr->MagSg[lv] ] = Time_Prev[lv];
Init/Init_ResetParameter.cpp:500:      amr->PotSgTime[lv][ 1-amr->PotSg[lv] ] = Time_Prev[lv];
Init/Init_ResetParameter.cpp:566:   if ( OPT__CK_FLUX_ALLOCATE  &&  !amr->WithFlux )
Init/Init_ResetParameter.cpp:817:   if ( OPT__INIT == INIT_BY_RESTART  &&  amr->Par->Init != PAR_INIT_BY_RESTART )
Init/Init_ResetParameter.cpp:819:      amr->Par->Init = PAR_INIT_BY_RESTART;
Init/Init_ResetParameter.cpp:821:      const ParInit_t PAR_INIT = amr->Par->Init;
Init/Init_Load_Parameter.cpp:76:   ReadPara->Add( "PAR_NPAR",                   &amr->Par->NPar_Active_AllRank,  -1L,               NoMin_long,    NoMax_long     );
Init/Init_Load_Parameter.cpp:77:   ReadPara->Add( "PAR_INIT",                   &amr->Par->Init,                 -1,                1,             3              );
Init/Init_Load_Parameter.cpp:78:   ReadPara->Add( "PAR_IC_FORMAT",              &amr->Par->ParICFormat,      PAR_IC_FORMAT_ATT_ID,  1,             2              );
Init/Init_Load_Parameter.cpp:79:   ReadPara->Add( "PAR_IC_MASS",                &amr->Par->ParICMass,            -1.0,              NoMin_double,  NoMax_double   );
Init/Init_Load_Parameter.cpp:80:   ReadPara->Add( "PAR_IC_TYPE",                &amr->Par->ParICType,            -1,                NoMin_int,     PAR_NTYPE-1    );
Init/Init_Load_Parameter.cpp:81:   ReadPara->Add( "PAR_INTERP",                 &amr->Par->Interp,                PAR_INTERP_CIC,   1,             3              );
Init/Init_Load_Parameter.cpp:82:   ReadPara->Add( "PAR_INTEG",                  &amr->Par->Integ,                 PAR_INTEG_KDK,    1,             2              );
Init/Init_Load_Parameter.cpp:83:   ReadPara->Add( "PAR_TR_INTERP",              &amr->Par->InterpTracer,          PAR_INTERP_TSC,   1,             3              );
Init/Init_Load_Parameter.cpp:84:   ReadPara->Add( "PAR_TR_INTEG",               &amr->Par->IntegTracer,           TRACER_INTEG_RK2, 1,             2              );
Init/Init_Load_Parameter.cpp:85:   ReadPara->Add( "PAR_IMPROVE_ACC",            &amr->Par->ImproveAcc,            true,             Useless_bool,  Useless_bool   );
Init/Init_Load_Parameter.cpp:86:   ReadPara->Add( "PAR_PREDICT_POS",            &amr->Par->PredictPos,            true,             Useless_bool,  Useless_bool   );
Init/Init_Load_Parameter.cpp:88:   ReadPara->Add( "PAR_REMOVE_CELL",            &amr->Par->RemoveCell,           -1.0,              NoMin_double,  NoMax_double   );
Init/Init_Load_Parameter.cpp:90:   ReadPara->Add( "PAR_TR_VEL_CORR",            &amr->Par->TracerVelCorr,         false,            Useless_bool,  Useless_bool   );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:64:   if ( !SearchAllSon  &&  ( NInput < 0 || NInput > amr->NPatchComma[SonLv][1]/8 )  )
LoadBalance/LB_AllocateBufferPatch_Father.cpp:66:                 SonLv, NInput, amr->NPatchComma[SonLv][1]/8 );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:68:   if ( amr->NPatchComma[SonLv-1][3] != amr->num[SonLv-1] )
LoadBalance/LB_AllocateBufferPatch_Father.cpp:69:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][3] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_AllocateBufferPatch_Father.cpp:70:                 SonLv-1, amr->NPatchComma[SonLv-1][3], SonLv-1, amr->num[SonLv-1] );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:73:   const int   NTargetSon0         = ( SearchAllSon ) ? amr->NPatchComma[SonLv][1]/8 : NInput;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:77:   const int   BoxNScale_Padded[3] = { amr->BoxScale[0]/PATCH_SIZE + 2*Padded,
LoadBalance/LB_AllocateBufferPatch_Father.cpp:78:                                       amr->BoxScale[1]/PATCH_SIZE + 2*Padded,
LoadBalance/LB_AllocateBufferPatch_Father.cpp:79:                                       amr->BoxScale[2]/PATCH_SIZE + 2*Padded }; //normalized and padded BoxScale
LoadBalance/LB_AllocateBufferPatch_Father.cpp:80:   const int   FaScale             = amr->scale[FaLv];
LoadBalance/LB_AllocateBufferPatch_Father.cpp:87:   const int   NP_Old              = amr->NPatchComma[FaLv][3];
LoadBalance/LB_AllocateBufferPatch_Father.cpp:124:      if ( SonPID0 >= amr->NPatchComma[SonLv][1] )
LoadBalance/LB_AllocateBufferPatch_Father.cpp:126:                    SonLv, SonPID0, amr->NPatchComma[SonLv][1] );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:140:      FaCr1D0 = amr->patch[0][SonLv][SonPID0]->PaddedCr1D;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:144:         FaCr3D0[d] = amr->patch[0][SonLv][SonPID0]->corner[d];
LoadBalance/LB_AllocateBufferPatch_Father.cpp:168:            if ( FaCr3D[2] < 0  ||  FaCr3D[2] >= amr->BoxScale[2] )  continue;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:178:               if ( FaCr3D[1] < 0  ||  FaCr3D[1] >= amr->BoxScale[1] )  continue;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:188:                  if ( FaCr3D[0] < 0  ||  FaCr3D[0] >= amr->BoxScale[0] )  continue;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:222:   Mis_Matching_char( amr->num[FaLv], amr->LB->PaddedCr1DList[FaLv], NFaBuf, FaCr1D_List, Match );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:250:         if ( RecordFaPID )   (*NewFaBufPID0)[ NNew0 ++ ] = amr->num[FaLv];
LoadBalance/LB_AllocateBufferPatch_Father.cpp:253:         amr->pnew( FaLv, FaCr3D[0],          FaCr3D[1],          FaCr3D[2],          -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:254:         amr->pnew( FaLv, FaCr3D[0]+FaPScale, FaCr3D[1],          FaCr3D[2],          -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:255:         amr->pnew( FaLv, FaCr3D[0],          FaCr3D[1]+FaPScale, FaCr3D[2],          -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:256:         amr->pnew( FaLv, FaCr3D[0],          FaCr3D[1],          FaCr3D[2]+FaPScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:257:         amr->pnew( FaLv, FaCr3D[0]+FaPScale, FaCr3D[1]+FaPScale, FaCr3D[2],          -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:258:         amr->pnew( FaLv, FaCr3D[0],          FaCr3D[1]+FaPScale, FaCr3D[2]+FaPScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:259:         amr->pnew( FaLv, FaCr3D[0]+FaPScale, FaCr3D[1],          FaCr3D[2]+FaPScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:260:         amr->pnew( FaLv, FaCr3D[0]+FaPScale, FaCr3D[1]+FaPScale, FaCr3D[2]+FaPScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:266:            if (  OPT__BC_FLU[2*d] != BC_FLU_PERIODIC  &&  ( FaCr3D[d] < 0 || FaCr3D[d] >= amr->BoxScale[d] )  )
LoadBalance/LB_AllocateBufferPatch_Father.cpp:271:         amr->NPatchComma[FaLv][3] += 8;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:277:   for (int m=4; m<28; m++)   amr->NPatchComma[FaLv][m] = amr->NPatchComma[FaLv][3];
LoadBalance/LB_AllocateBufferPatch_Father.cpp:279:// check the amr->NPatchComma recording
LoadBalance/LB_AllocateBufferPatch_Father.cpp:280:   if ( amr->NPatchComma[FaLv][3] != amr->num[FaLv] )
LoadBalance/LB_AllocateBufferPatch_Father.cpp:281:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][3] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_AllocateBufferPatch_Father.cpp:282:                 FaLv, amr->NPatchComma[FaLv][3], FaLv, amr->num[FaLv] );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:286:   const int NP_New = amr->NPatchComma[FaLv][3];
LoadBalance/LB_AllocateBufferPatch_Father.cpp:290:      amr->LB->PaddedCr1DList         [FaLv] = (ulong*)realloc( amr->LB->PaddedCr1DList         [FaLv],
LoadBalance/LB_AllocateBufferPatch_Father.cpp:292:      amr->LB->PaddedCr1DList_IdxTable[FaLv] = (int*  )realloc( amr->LB->PaddedCr1DList_IdxTable[FaLv],
LoadBalance/LB_AllocateBufferPatch_Father.cpp:297:         amr->LB->PaddedCr1DList[FaLv][PID] = amr->patch[0][FaLv][PID]->PaddedCr1D;
LoadBalance/LB_AllocateBufferPatch_Father.cpp:299:      Mis_Heapsort( NP_New, amr->LB->PaddedCr1DList[FaLv], amr->LB->PaddedCr1DList_IdxTable[FaLv] );
LoadBalance/LB_AllocateBufferPatch_Father.cpp:303:      for (int t=1; t<amr->num[FaLv]; t++)
LoadBalance/LB_AllocateBufferPatch_Father.cpp:305:         if ( amr->LB->PaddedCr1DList[FaLv][t] == amr->LB->PaddedCr1DList[FaLv][t-1] )
LoadBalance/LB_AllocateBufferPatch_Father.cpp:307:                       FaLv, amr->LB->PaddedCr1DList[FaLv][t], amr->LB->PaddedCr1DList_IdxTable[FaLv][t],
LoadBalance/LB_AllocateBufferPatch_Father.cpp:308:                       amr->LB->PaddedCr1DList_IdxTable[FaLv][t-1] );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:33:   if ( amr->NPatchComma[lv][1] != amr->num[lv] )
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:34:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][1] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:35:                 lv, amr->NPatchComma[lv][1], lv, amr->num[lv] );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:38:   const int PScale        = PATCH_SIZE*amr->scale[lv];
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:40:   const int NPG_Padded[3] = { amr->BoxScale[0]/PGScale + 2,
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:41:                               amr->BoxScale[1]/PGScale + 2,
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:42:                               amr->BoxScale[2]/PGScale + 2 };
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:61:      MemUnit_Query  [r] = amr->NPatchComma[lv][1];   // set arbitrarily
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:67:      MemUnit_Int    [r] = amr->NPatchComma[lv][1];   // set arbitrarily
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:84:   for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:86:      Cr0 = amr->patch[0][lv][PID0]->corner;
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:95:         if ( LB_Idx < amr->LB->CutPoint[lv][0]  ||  LB_Idx >= amr->LB->CutPoint[lv][MPI_NRank] )  continue;
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:109:            if ( Cr[d] < 0  ||  Cr[d] >= amr->BoxScale[d] )
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:169:   } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:265:      Mis_Matching_char( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], NReply[r],
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:306:               amr->pnew( lv, Cr[0],        Cr[1],        Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:307:               amr->pnew( lv, Cr[0]+PScale, Cr[1],        Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:308:               amr->pnew( lv, Cr[0],        Cr[1]+PScale, Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:309:               amr->pnew( lv, Cr[0],        Cr[1],        Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:310:               amr->pnew( lv, Cr[0]+PScale, Cr[1]+PScale, Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:311:               amr->pnew( lv, Cr[0],        Cr[1]+PScale, Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:312:               amr->pnew( lv, Cr[0]+PScale, Cr[1],        Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:313:               amr->pnew( lv, Cr[0]+PScale, Cr[1]+PScale, Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:315:               amr->NPatchComma[lv][2] += 8;
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:332:                  amr->pnew( lv, Cr[0],        Cr[1],        Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:333:                  amr->pnew( lv, Cr[0]+PScale, Cr[1],        Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:334:                  amr->pnew( lv, Cr[0],        Cr[1]+PScale, Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:335:                  amr->pnew( lv, Cr[0],        Cr[1],        Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:336:                  amr->pnew( lv, Cr[0]+PScale, Cr[1]+PScale, Cr[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:337:                  amr->pnew( lv, Cr[0],        Cr[1]+PScale, Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:338:                  amr->pnew( lv, Cr[0]+PScale, Cr[1],        Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:339:                  amr->pnew( lv, Cr[0]+PScale, Cr[1]+PScale, Cr[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:341:                  amr->NPatchComma[lv][2] += 8;
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:350:                     if (  OPT__BC_FLU[2*d] != BC_FLU_PERIODIC  &&  ( Cr[d] < 0 || Cr[d] >= amr->BoxScale[d] )  )
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:386:   for (int m=3; m<28; m++)   amr->NPatchComma[lv][m] = amr->NPatchComma[lv][2];
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:388:   if ( amr->NPatchComma[lv][2] != amr->num[lv] )
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:389:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][2] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:390:                 lv, amr->NPatchComma[lv][2], lv, amr->num[lv] );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:396:   const int NPatch = amr->NPatchComma[lv][2];
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:398:   amr->LB->PaddedCr1DList         [lv] = (ulong*)realloc( amr->LB->PaddedCr1DList         [lv],
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:400:   amr->LB->PaddedCr1DList_IdxTable[lv] = (int*  )realloc( amr->LB->PaddedCr1DList_IdxTable[lv],
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:404:      amr->LB->PaddedCr1DList[lv][PID] = amr->patch[0][lv][PID]->PaddedCr1D;
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:406:   Mis_Heapsort( NPatch, amr->LB->PaddedCr1DList[lv], amr->LB->PaddedCr1DList_IdxTable[lv] );
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:410:   for (int t=1; t<amr->num[lv]; t++)
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:412:      if ( amr->LB->PaddedCr1DList[lv][t] == amr->LB->PaddedCr1DList[lv][t-1] )
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:414:                    lv, amr->LB->PaddedCr1DList[lv][t], amr->LB->PaddedCr1DList_IdxTable[lv][t],
LoadBalance/LB_AllocateBufferPatch_Sibling.cpp:415:                    amr->LB->PaddedCr1DList_IdxTable[lv][t-1] );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:24:   if ( amr->NPatchComma[0][1] != amr->num[0] )
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:25:      Aux_Error( ERROR_INFO, "amr->NPatchComma[0][1] (%d) != amr->num[0] (%d)\" !!\n",
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:26:                 amr->NPatchComma[0][1], amr->num[0] );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:32:   const int  BoxNScale_Padded[3] = { amr->BoxScale[0]/PATCH_SIZE + 2*Padded,
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:33:                                      amr->BoxScale[1]/PATCH_SIZE + 2*Padded,
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:34:                                      amr->BoxScale[2]/PATCH_SIZE + 2*Padded };  //normalized and padded BoxScale
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:35:   const int  Scale2              = 2*amr->scale[0];
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:51:   const int MemUnit = amr->NPatchComma[0][1];     // set arbitrarily
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:52:   const int PScale  = PATCH_SIZE*amr->scale[0];
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:63:   for (int PID0=0; PID0<amr->NPatchComma[0][1]; PID0+=8)
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:65:      Cr0 = amr->patch[0][0][PID0]->corner;
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:85:            if ( Cr[d] < 0  ||  Cr[d] >= amr->BoxScale[d] )
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:115:            FaPaddedCr1D[ NAlloc_Temp ++ ] = amr->patch[0][0][PID0]->PaddedCr1D + (ulong)Cr1D_Disp[k+1][j+1][i+1];
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:118:   } // for (int PID0=0; PID0<amr->NPatchComma[0][1]; PID0+=8)
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:144:      amr->pnew( 0, FaCr3D[0],        FaCr3D[1],        FaCr3D[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:145:      amr->pnew( 0, FaCr3D[0]+PScale, FaCr3D[1],        FaCr3D[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:146:      amr->pnew( 0, FaCr3D[0],        FaCr3D[1]+PScale, FaCr3D[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:147:      amr->pnew( 0, FaCr3D[0],        FaCr3D[1],        FaCr3D[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:148:      amr->pnew( 0, FaCr3D[0]+PScale, FaCr3D[1]+PScale, FaCr3D[2],        -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:149:      amr->pnew( 0, FaCr3D[0],        FaCr3D[1]+PScale, FaCr3D[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:150:      amr->pnew( 0, FaCr3D[0]+PScale, FaCr3D[1],        FaCr3D[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:151:      amr->pnew( 0, FaCr3D[0]+PScale, FaCr3D[1]+PScale, FaCr3D[2]+PScale, -1, false, false, false );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:153:      amr->NPatchComma[0][2] += 8;
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:159:   for (int m=3; m<28; m++)   amr->NPatchComma[0][m] = amr->NPatchComma[0][2];
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:161:   if ( amr->NPatchComma[0][2] != amr->num[0] )
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:162:      Aux_Error( ERROR_INFO, "amr->NPatchComma[0][2] (%d) != amr->num[0] (%d)\" !!\n",
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:163:                 amr->NPatchComma[0][2], amr->num[0] );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:170:   const int NPatch = amr->NPatchComma[0][2];
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:172:   amr->LB->PaddedCr1DList         [0] = (ulong*)realloc( amr->LB->PaddedCr1DList         [0],
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:174:   amr->LB->PaddedCr1DList_IdxTable[0] = (int*  )realloc( amr->LB->PaddedCr1DList_IdxTable[0],
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:178:      amr->LB->PaddedCr1DList[0][PID] = amr->patch[0][0][PID]->PaddedCr1D;
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:180:   Mis_Heapsort( NPatch, amr->LB->PaddedCr1DList[0], amr->LB->PaddedCr1DList_IdxTable[0] );
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:184:   for (int t=1; t<amr->num[0]; t++)
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:186:      if ( amr->LB->PaddedCr1DList[0][t] == amr->LB->PaddedCr1DList[0][t-1] )
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:188:                    amr->LB->PaddedCr1DList[0][t], amr->LB->PaddedCr1DList_IdxTable[0][t],
LoadBalance/LB_AllocateBufferPatch_Sibling_Base.cpp:189:                    amr->LB->PaddedCr1DList_IdxTable[0][t-1] );
LoadBalance/LB_AllocateFluxArray.cpp:24:   if ( !amr->WithFlux )
LoadBalance/LB_AllocateFluxArray.cpp:25:      Aux_Message( stderr, "WARNING : why invoking %s when amr->WithFlux is off ??\n", __FUNCTION__ );
LoadBalance/LB_AllocateFluxArray.cpp:29:   const int FaNReal = amr->NPatchComma[FaLv][1];
LoadBalance/LB_AllocateFluxArray.cpp:37:   int  *LB_SendF_NList           = amr->LB->SendF_NList          [FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:38:   int **LB_SendF_IDList          = amr->LB->SendF_IDList         [FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:39:   int **LB_SendF_SibList         = amr->LB->SendF_SibList        [FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:40:   int  *LB_RecvF_NList           = amr->LB->RecvF_NList          [FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:41:   int **LB_RecvF_IDList          = amr->LB->RecvF_IDList         [FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:42:   int **LB_RecvF_IDList_IdxTable = amr->LB->RecvF_IDList_IdxTable[FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:43:   int **LB_RecvF_SibList         = amr->LB->RecvF_SibList        [FaLv];
LoadBalance/LB_AllocateFluxArray.cpp:62:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][3]; FaPID++)  amr->patch[0][FaLv][FaPID]->fdelete();
LoadBalance/LB_AllocateFluxArray.cpp:71:         SonPID = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_AllocateFluxArray.cpp:77:               SibPID = amr->patch[0][FaLv][FaPID]->sibling[Sib];
LoadBalance/LB_AllocateFluxArray.cpp:81:                  SibSonPID = amr->patch[0][FaLv][SibPID]->son;
LoadBalance/LB_AllocateFluxArray.cpp:86:                     amr->patch[0][FaLv][FaPID]->fnew( Sib, AUTO_REDUCE_DT );
LoadBalance/LB_AllocateFluxArray.cpp:93:                        SibSonLBIdx = 8*amr->patch[0][FaLv][SibPID]->LB_Idx;  // faster
LoadBalance/LB_AllocateFluxArray.cpp:95:                        SibSonLBIdx = LB_Corner2Index( SonLv, amr->patch[0][FaLv][SibPID]->corner, CHECK_OFF );
LoadBalance/LB_AllocateFluxArray.cpp:224:      Mis_Matching_int( amr->NPatchComma[SonLv][1], amr->LB->IdxList_Real[SonLv], LB_SendF_NList[r],
LoadBalance/LB_AllocateFluxArray.cpp:240:         SibSonPID = amr->LB->IdxList_Real_IdxTable[SonLv][ Match_F[t] ];
LoadBalance/LB_AllocateFluxArray.cpp:241:         SibPID    = amr->patch[0][SonLv][SibSonPID]->father;
LoadBalance/LB_AllocateFluxArray.cpp:248:         TPID = amr->patch[0][FaLv][SibPID]->sibling[MSib];
LoadBalance/LB_AllocateFluxArray.cpp:258:         if ( amr->patch[0][FaLv][TPID]->son != -1 )
LoadBalance/LB_AllocateFluxArray.cpp:260:                       r, FaLv, TPID, amr->patch[0][FaLv][TPID]->son );
LoadBalance/LB_AllocateFluxArray.cpp:267:         amr->patch[0][FaLv][TPID]->fnew( TSib, AUTO_REDUCE_DT );
LoadBalance/LB_EstimateLoadImbalance.cpp:16://                2. Weighting at each level is assumed to be equal to "amr->NUpdateLv"
LoadBalance/LB_EstimateLoadImbalance.cpp:25:// Return      :  amr->LB->WLI
LoadBalance/LB_EstimateLoadImbalance.cpp:32:   const double ParWeight = amr->LB->Par_Weight;
LoadBalance/LB_EstimateLoadImbalance.cpp:41:      const int NPG = amr->NPatchComma[lv][1] / 8;
LoadBalance/LB_EstimateLoadImbalance.cpp:51:      Load_ThisRank[lv] *= (double)amr->NUpdateLv[lv];
LoadBalance/LB_EstimateLoadImbalance.cpp:95:      amr->LB->WLI = ( Load_Max_AllLv - Load_Ave_AllLv ) / Load_Ave_AllLv;
LoadBalance/LB_EstimateLoadImbalance.cpp:116:         NParAll = amr->Par->NPar_Active_AllRank;
LoadBalance/LB_EstimateLoadImbalance.cpp:155:         fprintf( File, "Weighted load-imbalance factor = %6.2f%%\n", 100.0*amr->LB->WLI );
LoadBalance/LB_EstimateLoadImbalance.cpp:167:   MPI_Bcast( &amr->LB->WLI, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD );
LoadBalance/LB_EstimateLoadImbalance.cpp:174:   return amr->LB->WLI;
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:23:   const int NSibBuf = amr->NPatchComma[lv][2] - amr->NPatchComma[lv][1];
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:41:   for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][2]; PID++)
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:43:      if ( amr->patch[0][lv][PID]->flag )
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:45:         LBIdx = amr->patch[0][lv][PID]->LB_Idx;
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:58:      } // if ( amr->patch[0][lv][PID]->flag )
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:59:   } // for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][2]; PID++)
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:103:   Mis_Matching_int( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], NRecv_Total, RecvBuf, Match );
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:114:      TPID = amr->LB->IdxList_Real_IdxTable[lv][ Match[t] ];
LoadBalance/LB_ExchangeFlaggedBuffer.cpp:116:      amr->patch[0][lv][TPID]->flag = true;
LoadBalance/LB_FindFather.cpp:52:   const int NTargetSon0 = ( SearchAllSon ) ? amr->NPatchComma[SonLv][1]/8 : NInput;
LoadBalance/LB_FindFather.cpp:64:   for (int SonPID=0; SonPID<amr->num[SonLv]; SonPID++)  amr->patch[0][SonLv][SonPID]->father = -1;
LoadBalance/LB_FindFather.cpp:67:   for (int FaPID=0; FaPID<amr->num[FaLv]; FaPID++)      amr->patch[0][FaLv][FaPID]->son = -1;
LoadBalance/LB_FindFather.cpp:94:      if ( SonPID0 >= amr->NPatchComma[SonLv][1] )
LoadBalance/LB_FindFather.cpp:96:                    SonLv, SonPID0, amr->NPatchComma[SonLv][1] );
LoadBalance/LB_FindFather.cpp:108:      Cr1D_Son0[t] = amr->patch[0][SonLv][SonPID0]->PaddedCr1D;
LoadBalance/LB_FindFather.cpp:115:   Mis_Matching_int( amr->num[FaLv], amr->LB->PaddedCr1DList[FaLv], NTargetSon0, Cr1D_Son0, Match_Son0 );
LoadBalance/LB_FindFather.cpp:126:         FaPID = amr->LB->PaddedCr1DList_IdxTable[FaLv][FaID];
LoadBalance/LB_FindFather.cpp:129:         for (SonPID=SonPID0; SonPID<SonPID0+8; SonPID++)   amr->patch[0][SonLv][SonPID]->father = FaPID;
LoadBalance/LB_FindFather.cpp:132:         amr->patch[0][FaLv][FaPID]->son = SonPID0;
LoadBalance/LB_FindFather.cpp:142:   const int FaNNoFaBuf = amr->NPatchComma[FaLv][2];  // exclude father-buffer patches
LoadBalance/LB_FindFather.cpp:150:         if ( amr->patch[0][SonLv][SonPID]->father == -1 )
LoadBalance/LB_FindFather.cpp:157:      SonPID = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_FindFather.cpp:159:      if ( SonPID >= amr->NPatchComma[SonLv][1] )
LoadBalance/LB_FindFather.cpp:161:                    FaLv, FaPID, SonPID, amr->NPatchComma[SonLv][1] );
LoadBalance/LB_FindFather.cpp:171:         FaPID = amr->patch[0][SonLv][SonPID]->father;
LoadBalance/LB_FindFather.cpp:173:         if ( amr->patch[0][FaLv][FaPID]->son != SonPID0 )
LoadBalance/LB_FindFather.cpp:175:                       SonLv, FaPID, amr->patch[0][FaLv][FaPID]->son, SonPID, SonPID0 );
LoadBalance/LB_FindFather.cpp:182:      SonPID0 = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_FindFather.cpp:188:            if ( amr->patch[0][SonLv][SonPID]->father != FaPID )
LoadBalance/LB_FindFather.cpp:190:                          SonLv, SonPID, amr->patch[0][SonLv][SonPID]->father, FaPID );
LoadBalance/LB_FindFather.cpp:201:      Corner_Son = amr->patch[0][SonLv][SonPID0]->corner;
LoadBalance/LB_FindFather.cpp:205:         Corner_Fa = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_FindFather.cpp:211:            if ( amr->patch[0][SonLv][SonPID0]->father != FaPID )
LoadBalance/LB_FindFather.cpp:213:                          SonLv, SonPID0, amr->patch[0][SonLv][SonPID0]->father, FaPID );
LoadBalance/LB_FindFather.cpp:215:            if ( amr->patch[0][FaLv][FaPID]->son != SonPID0 )
LoadBalance/LB_FindFather.cpp:217:                          FaLv, FaPID, amr->patch[0][FaLv][FaPID]->son, SonPID0 );
LoadBalance/LB_FindFather.cpp:230:         FaPID = amr->patch[0][SonLv][SonPID]->father;
LoadBalance/LB_FindFather.cpp:232:         if ( amr->patch[0][FaLv][FaPID]->LB_Idx*8 != amr->patch[0][SonLv][SonPID]->LB_Idx - amr->patch[0][SonLv][SonPID]->LB_Idx%8 )
LoadBalance/LB_FindFather.cpp:234:                       SonLv, FaPID, amr->patch[0][FaLv][FaPID]->LB_Idx, SonPID, amr->patch[0][SonLv][SonPID]->LB_Idx );
LoadBalance/LB_FindSonNotHome.cpp:52:   const int  NFaPatch  = amr->num[FaLv];    // real + buffer patches
LoadBalance/LB_FindSonNotHome.cpp:91:      if ( amr->patch[0][FaLv][FaPID]->son <= -1 )
LoadBalance/LB_FindSonNotHome.cpp:93:         Cr = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_FindSonNotHome.cpp:97:         LB_Idx = 8*amr->patch[0][FaLv][FaPID]->LB_Idx;     // faster, LB_Idx of one of the eight sons
LoadBalance/LB_FindSonNotHome.cpp:103:         if ( LB_Idx < amr->LB->CutPoint[SonLv][0]  ||  LB_Idx >= amr->LB->CutPoint[SonLv][MPI_NRank] )
LoadBalance/LB_FindSonNotHome.cpp:105:            amr->patch[0][FaLv][FaPID]->son = -1;
LoadBalance/LB_FindSonNotHome.cpp:115:            if ( Cr[d] < 0  ||  Cr[d] >= amr->BoxScale[d] )
LoadBalance/LB_FindSonNotHome.cpp:131:            if ( amr->patch[0][FaLv][FaPID]->son < -1 )
LoadBalance/LB_FindSonNotHome.cpp:133:                          FaLv, FaPID, amr->patch[0][FaLv][FaPID]->son );
LoadBalance/LB_FindSonNotHome.cpp:152:      } // if ( amr->patch[0][FaLv][FaPID]->son <= -1 )
LoadBalance/LB_FindSonNotHome.cpp:200:      Mis_Matching_char( amr->NPatchComma[SonLv][1], amr->LB->IdxList_Real[SonLv], NReply[r],
LoadBalance/LB_FindSonNotHome.cpp:219:         amr->patch[0][FaLv][FaPID]->son = SON_OFFSET_LB - r;
LoadBalance/LB_FindSonNotHome.cpp:223:         Cr = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_FindSonNotHome.cpp:228:            if ( Cr[d] < 0  ||  Cr[d] >= amr->BoxScale[d] )
LoadBalance/LB_FindSonNotHome.cpp:241:         amr->patch[0][FaLv][FaPID]->son = -1;
LoadBalance/LB_FindSonNotHome.cpp:248:   const int SonNReal = amr->NPatchComma[SonLv][1];
LoadBalance/LB_FindSonNotHome.cpp:254:      if ( amr->patch[0][SonLv][SonPID]->father == -1 )
LoadBalance/LB_FindSonNotHome.cpp:261:      SonPID = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_FindSonNotHome.cpp:271:      FaPID   = amr->patch[0][SonLv][SonPID]->father;
LoadBalance/LB_FindSonNotHome.cpp:274:      if ( amr->patch[0][FaLv][FaPID]->son != SonPID0 )
LoadBalance/LB_FindSonNotHome.cpp:276:                    SonLv, FaPID, amr->patch[0][FaLv][FaPID]->son, SonPID, SonPID0 );
LoadBalance/LB_FindSonNotHome.cpp:282:      SonPID0 = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_FindSonNotHome.cpp:288:            if ( amr->patch[0][SonLv][SonPID]->father != FaPID )
LoadBalance/LB_FindSonNotHome.cpp:290:                          SonLv, SonPID, amr->patch[0][SonLv][SonPID]->father, FaPID );
LoadBalance/LB_FindSonNotHome.cpp:300:      Corner_Son = amr->patch[0][SonLv][SonPID0]->corner;
LoadBalance/LB_FindSonNotHome.cpp:304:         Corner_Fa = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_FindSonNotHome.cpp:310:            if ( amr->patch[0][SonLv][SonPID0]->father != FaPID )
LoadBalance/LB_FindSonNotHome.cpp:312:                          SonLv, SonPID0, amr->patch[0][SonLv][SonPID0]->father, FaPID );
LoadBalance/LB_FindSonNotHome.cpp:314:            if ( amr->patch[0][FaLv][FaPID]->son != SonPID0 )
LoadBalance/LB_FindSonNotHome.cpp:316:                          FaLv, FaPID, amr->patch[0][FaLv][FaPID]->son, SonPID0 );
LoadBalance/LB_GetBufferData.cpp:164:   if ( GetBufMode == COARSE_FINE_FLUX  &&  !amr->WithFlux )
LoadBalance/LB_GetBufferData.cpp:168:   if ( GetBufMode == COARSE_FINE_ELECTRIC  &&  !amr->WithElectric )
LoadBalance/LB_GetBufferData.cpp:201:         Send_NList           = amr->LB->SendH_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:202:         Send_IDList          = amr->LB->SendH_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:203:         Send_SibList         = amr->LB->SendH_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:204:         Recv_NList           = amr->LB->RecvH_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:205:         Recv_IDList          = amr->LB->RecvH_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:206:         Recv_IDList_IdxTable = amr->LB->RecvH_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:207:         Recv_SibList         = amr->LB->RecvH_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:211:         Send_NList           = amr->LB->SendH_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:212:         Send_IDList          = amr->LB->SendH_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:213:         Send_SibList         = amr->LB->SendH_SibDiffList    [lv];
LoadBalance/LB_GetBufferData.cpp:214:         Recv_NList           = amr->LB->RecvH_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:215:         Recv_IDList          = amr->LB->RecvH_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:216:         Recv_IDList_IdxTable = amr->LB->RecvH_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:217:         Recv_SibList         = amr->LB->RecvH_SibDiffList    [lv];
LoadBalance/LB_GetBufferData.cpp:221:         Send_NList           = amr->LB->SendX_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:222:         Send_NResList        = amr->LB->SendX_NResList       [lv];
LoadBalance/LB_GetBufferData.cpp:223:         Send_IDList          = amr->LB->SendX_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:224:         Send_SibList         = amr->LB->SendX_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:225:         Recv_NList           = amr->LB->RecvX_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:226:         Recv_NResList        = amr->LB->RecvX_NResList       [lv];
LoadBalance/LB_GetBufferData.cpp:227:         Recv_IDList          = amr->LB->RecvX_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:228:         Recv_SibList         = amr->LB->RecvX_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:230:         SendY_NList          = amr->LB->SendY_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:231:         SendY_IDList         = amr->LB->SendY_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:232:         SendY_SibList        = amr->LB->SendY_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:233:         RecvY_NList          = amr->LB->RecvY_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:234:         RecvY_IDList         = amr->LB->RecvY_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:235:         RecvY_SibList        = amr->LB->RecvY_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:240:         Send_NList           = amr->LB->SendR_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:241:         Send_IDList          = amr->LB->SendR_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:242:         Send_IDList_IdxTable = amr->LB->SendR_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:243:         Recv_NList           = amr->LB->RecvR_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:244:         Recv_IDList          = amr->LB->RecvR_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:249:         Send_NList           = amr->LB->SendG_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:250:         Send_IDList          = amr->LB->SendG_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:251:         Send_SibList         = amr->LB->SendG_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:252:         Recv_NList           = amr->LB->RecvG_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:253:         Recv_IDList          = amr->LB->RecvG_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:254:         Recv_IDList_IdxTable = amr->LB->RecvG_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:255:         Recv_SibList         = amr->LB->RecvG_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:259:         Send_NList           = amr->LB->SendG_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:260:         Send_IDList          = amr->LB->SendG_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:261:         Send_SibList         = amr->LB->SendG_SibDiffList    [lv];
LoadBalance/LB_GetBufferData.cpp:262:         Recv_NList           = amr->LB->RecvG_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:263:         Recv_IDList          = amr->LB->RecvG_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:264:         Recv_IDList_IdxTable = amr->LB->RecvG_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:265:         Recv_SibList         = amr->LB->RecvG_SibDiffList    [lv];
LoadBalance/LB_GetBufferData.cpp:270:         Send_NList           = amr->LB->SendF_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:271:         Send_IDList          = amr->LB->SendF_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:272:         Send_SibList         = amr->LB->SendF_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:273:         Recv_NList           = amr->LB->RecvF_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:274:         Recv_IDList          = amr->LB->RecvF_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:275:         Recv_IDList_IdxTable = amr->LB->RecvF_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:276:         Recv_SibList         = amr->LB->RecvF_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:281:         Send_NList           = amr->LB->SendE_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:282:         Send_IDList          = amr->LB->SendE_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:283:         Send_SibList         = amr->LB->SendE_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:284:         Recv_NList           = amr->LB->RecvE_NList          [lv];
LoadBalance/LB_GetBufferData.cpp:285:         Recv_IDList          = amr->LB->RecvE_IDList         [lv];
LoadBalance/LB_GetBufferData.cpp:286:         Recv_IDList_IdxTable = amr->LB->RecvE_IDList_IdxTable[lv];
LoadBalance/LB_GetBufferData.cpp:287:         Recv_SibList         = amr->LB->RecvE_SibList        [lv];
LoadBalance/LB_GetBufferData.cpp:619:                  if ( amr->patch[FluSg][lv][SPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:631:                  if ( amr->patch[PotSg][lv][SPID]->pot == NULL )
LoadBalance/LB_GetBufferData.cpp:644:                  if ( amr->patch[MagSg][lv][SPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:669:                           SendPtr[ Counter ++ ] = amr->patch[FluSg][lv][SPID]->fluid[TFluVarIdx][k][j][i];
LoadBalance/LB_GetBufferData.cpp:679:                           SendPtr[ Counter ++ ] = amr->patch[PotSg][lv][SPID]->pot[k][j][i];
LoadBalance/LB_GetBufferData.cpp:698:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:708:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:718:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:751:               if ( ExchangeFlu  &&  amr->patch[FluSg][lv][SPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:756:               if ( ExchangePot  &&  amr->patch[PotSg][lv][SPID]->pot == NULL )
LoadBalance/LB_GetBufferData.cpp:762:               if ( ExchangeMag  &&  amr->patch[MagSg][lv][SPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:785:                           SendPtr[ Counter ++ ] = amr->patch[FluSg][lv][SPID]->fluid[TFluVarIdx][k][j][i];
LoadBalance/LB_GetBufferData.cpp:795:                           SendPtr[ Counter ++ ] = amr->patch[PotSg][lv][SPID]->pot[k][j][i];
LoadBalance/LB_GetBufferData.cpp:814:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:824:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:834:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:858:               if ( amr->patch[FluSg][lv][SPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:879:                           SendPtr[ Counter ++ ] = amr->patch[FluSg][lv][SPID]->fluid[TFluVarIdx][k][j][i];
LoadBalance/LB_GetBufferData.cpp:895:               if ( amr->patch[MagSg][lv][SPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:921:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:931:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:941:                                 SendPtr[ Counter ++ ] = amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][idxB];
LoadBalance/LB_GetBufferData.cpp:971:               if ( ExchangeFlu  &&  amr->patch[FluSg][lv][SPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:976:               if ( ExchangePot  &&  amr->patch[PotSg][lv][SPID]->pot == NULL )
LoadBalance/LB_GetBufferData.cpp:981:               if ( ExchangeMag  &&  amr->patch[MagSg][lv][SPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:993:                  memcpy( SendPtr, &amr->patch[FluSg][lv][SPID]->fluid[TFluVarIdx][0][0][0],
LoadBalance/LB_GetBufferData.cpp:1003:                  memcpy( SendPtr, &amr->patch[PotSg][lv][SPID]->pot[0][0][0],
LoadBalance/LB_GetBufferData.cpp:1017:                  memcpy( SendPtr, &amr->patch[MagSg][lv][SPID]->magnetic[TMagVarIdx][0],
LoadBalance/LB_GetBufferData.cpp:1040:               const real (*FluxPtr)[PS1][PS1] = amr->patch[0][lv][SPID]->flux[SSib];
LoadBalance/LB_GetBufferData.cpp:1075:               const real *ElePtr = amr->patch[0][lv][SPID]->electric[SSib];
LoadBalance/LB_GetBufferData.cpp:1155:                  if ( amr->patch[FluSg][lv][RPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:1167:                  if ( amr->patch[PotSg][lv][RPID]->pot == NULL )
LoadBalance/LB_GetBufferData.cpp:1180:                  if ( amr->patch[MagSg][lv][RPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:1205:                           amr->patch[FluSg][lv][RPID]->fluid[TFluVarIdx][k][j][i] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1215:                           amr->patch[PotSg][lv][RPID]->pot[k][j][i] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1234:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1244:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1254:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1287:               if ( ExchangeFlu  &&  amr->patch[FluSg][lv][RPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:1292:               if ( ExchangePot  &&  amr->patch[PotSg][lv][RPID]->pot == NULL )
LoadBalance/LB_GetBufferData.cpp:1298:               if ( ExchangeMag  &&  amr->patch[MagSg][lv][RPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:1321:                           amr->patch[FluSg][lv][RPID]->fluid[TFluVarIdx][k][j][i] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1331:                           amr->patch[PotSg][lv][RPID]->pot[k][j][i] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1350:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1360:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1370:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1394:               if ( amr->patch[FluSg][lv][RPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:1415:                           amr->patch[FluSg][lv][RPID]->fluid[TFluVarIdx][k][j][i] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1431:               if ( amr->patch[MagSg][lv][RPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:1457:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1467:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1477:                                 amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][idxB] = RecvPtr[ Counter ++ ];
LoadBalance/LB_GetBufferData.cpp:1507:               if ( ExchangeFlu  &&  amr->patch[FluSg][lv][RPID]->fluid == NULL )
LoadBalance/LB_GetBufferData.cpp:1512:               if ( ExchangePot  &&  amr->patch[PotSg][lv][RPID]->pot == NULL )
LoadBalance/LB_GetBufferData.cpp:1518:               if ( ExchangeMag  &&  amr->patch[MagSg][lv][RPID]->magnetic == NULL )
LoadBalance/LB_GetBufferData.cpp:1529:                  memcpy( &amr->patch[FluSg][lv][RPID]->fluid[TFluVarIdx][0][0][0], RecvPtr, CUBE(PS1)*sizeof(real) );
LoadBalance/LB_GetBufferData.cpp:1537:                  memcpy( &amr->patch[PotSg][lv][RPID]->pot[0][0][0], RecvPtr, CUBE(PS1)*sizeof(real) );
LoadBalance/LB_GetBufferData.cpp:1548:                  memcpy( &amr->patch[MagSg][lv][RPID]->magnetic[TMagVarIdx][0], RecvPtr, SQR(PS1)*PS1P1*sizeof(real) );
LoadBalance/LB_GetBufferData.cpp:1569:               real (*FluxPtr)[PS1][PS1] = amr->patch[0][lv][RPID]->flux[RSib];
LoadBalance/LB_GetBufferData.cpp:1605:               real *ElePtr = amr->patch[0][lv][RPID]->electric[RSib];
LoadBalance/LB_GetBufferData.cpp:1612:               if ( RSib >= 6  &&  amr->patch[0][lv][RPID]->ele_corrected[RSib-6] )
LoadBalance/LB_GetBufferData.cpp:1623:               if ( RSib >= 6 )  amr->patch[0][lv][RPID]->ele_corrected[RSib-6] = true;
LoadBalance/LB_GetBufferData.cpp:1732:         if ( RPID >= amr->NPatchComma[lv][1] )
LoadBalance/LB_GetBufferData.cpp:1734:                       RPID, lv, amr->NPatchComma[lv][1] );
LoadBalance/LB_GetBufferData.cpp:1740:            const int RSibPID = amr->patch[0][lv][RPID]->sibling[s];
LoadBalance/LB_GetBufferData.cpp:1747:            if ( RSibPID >= 0  &&  RSibPID < amr->NPatchComma[lv][1]  &&  amr->patch[0][lv][RSibPID]->son == -1 )
LoadBalance/LB_GetBufferData.cpp:1764:      for (int RealPID=0; RealPID<amr->NPatchComma[lv][1]; RealPID++)
LoadBalance/LB_GetBufferData.cpp:1766:         if ( amr->patch[0][lv][RealPID]->son == -1 )
LoadBalance/LB_GetBufferData.cpp:1770:               const int SibBufPID = amr->patch[0][lv][RealPID]->sibling[s];
LoadBalance/LB_GetBufferData.cpp:1772:               if ( SibBufPID >= amr->NPatchComma[lv][1]  &&  amr->patch[0][lv][SibBufPID]->son != -1 )
LoadBalance/LB_GrandsonCheck.cpp:33:   const int FaNReal = amr->NPatchComma[ FaLv][1];
LoadBalance/LB_GrandsonCheck.cpp:55:      SonPID = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_GrandsonCheck.cpp:65:               if ( amr->patch[0][SonLv][SonPID+LocalID]->son != -1 )   // if grandson exists
LoadBalance/LB_GrandsonCheck.cpp:71:                  amr->patch[0][FaLv][FaPID]->flag = true;
LoadBalance/LB_GrandsonCheck.cpp:83:            SonLBIdx = 8*amr->patch[0][FaLv][FaPID]->LB_Idx;   // faster, but may not correspond to LocalID==0
LoadBalance/LB_GrandsonCheck.cpp:85:            SonLBIdx = LB_Corner2Index( SonLv, amr->patch[0][FaLv][FaPID]->corner, CHECK_OFF );
LoadBalance/LB_GrandsonCheck.cpp:162:      Mis_Matching_int( amr->NPatchComma[SonLv][1], amr->LB->IdxList_Real[SonLv], NReply[r], QueryPtr, Match );
LoadBalance/LB_GrandsonCheck.cpp:171:         SonPID0 = amr->LB->IdxList_Real_IdxTable[SonLv][ Match[t] ];
LoadBalance/LB_GrandsonCheck.cpp:179:            if ( amr->patch[0][SonLv][SonPID]->son != -1 )  ReplyPtr[t] |= ( 1 << LocalID );
LoadBalance/LB_GrandsonCheck.cpp:205:         amr->patch[0][FaLv][FaPID]->flag = true;
LoadBalance/LB_Output_LBIdx.cpp:20:   const int NP = amr->NPatchComma[lv][1];
LoadBalance/LB_Output_LBIdx.cpp:47:            LB_Idx    = amr->patch[0][lv][PID]->LB_Idx;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:36:   const int NReal      = amr->NPatchComma[Lv][1];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:37:   const int NBuff      = amr->NPatchComma[Lv][3] - amr->NPatchComma[Lv][1];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:52:   int   *LB_SendH_NList           = amr->LB->SendH_NList          [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:53:   int  **LB_SendH_IDList          = amr->LB->SendH_IDList         [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:54:   int  **LB_SendH_SibList         = amr->LB->SendH_SibList        [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:55:   int  **LB_SendH_SibDiffList     = amr->LB->SendH_SibDiffList    [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:56:   long **LB_SendH_LBIdxList       = amr->LB->SendH_LBIdxList      [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:57:   int   *LB_RecvH_NList           = amr->LB->RecvH_NList          [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:58:   int  **LB_RecvH_IDList          = amr->LB->RecvH_IDList         [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:59:   int  **LB_RecvH_IDList_IdxTable = amr->LB->RecvH_IDList_IdxTable[Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:60:   int  **LB_RecvH_SibList         = amr->LB->RecvH_SibList        [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:61:   int  **LB_RecvH_SibDiffList     = amr->LB->RecvH_SibDiffList    [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:62:   long **LB_RecvH_LBIdxList       = amr->LB->RecvH_LBIdxList      [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:63:  ulong **LB_RecvH_PCr1D           = amr->LB->RecvH_PCr1D          [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:64:   int  **LB_RecvH_PCr1D_IdxTable  = amr->LB->RecvH_PCr1D_IdxTable [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:71:   int   *LB_SendG_NList           = amr->LB->SendG_NList          [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:72:   int  **LB_SendG_IDList          = amr->LB->SendG_IDList         [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:73:   int  **LB_SendG_SibList         = amr->LB->SendG_SibList        [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:74:   int  **LB_SendG_SibDiffList     = amr->LB->SendG_SibDiffList    [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:75:   long **LB_SendG_LBIdxList       = amr->LB->SendG_LBIdxList      [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:76:   int   *LB_RecvG_NList           = amr->LB->RecvG_NList          [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:77:   int  **LB_RecvG_IDList          = amr->LB->RecvG_IDList         [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:78:   int  **LB_RecvG_IDList_IdxTable = amr->LB->RecvG_IDList_IdxTable[Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:79:   int  **LB_RecvG_SibList         = amr->LB->RecvG_SibList        [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:80:   int  **LB_RecvG_SibDiffList     = amr->LB->RecvG_SibDiffList    [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:81:   long **LB_RecvG_LBIdxList       = amr->LB->RecvG_LBIdxList      [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:82:  ulong **LB_RecvG_PCr1D           = amr->LB->RecvG_PCr1D          [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:83:   int  **LB_RecvG_PCr1D_IdxTable  = amr->LB->RecvG_PCr1D_IdxTable [Lv];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:163:               for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][SibPID]->hnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:166:               for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][SibPID]->mnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:170:               for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][SibPID]->gnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:194:   for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)  // loop over all "real" patches at SonLv
LoadBalance/LB_RecordExchangeDataPatchID.cpp:196:      FaPID = amr->patch[0][SonLv][SonPID0]->father;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:211:            FaSibPID0 = amr->patch[0][Lv][FaPID]->sibling[s];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:224:               FaSibPID = amr->patch[0][Lv][FaSibPID0]->sibling[Side];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:252:                  for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][TPID]->hnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:255:                  for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][TPID]->mnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:259:                  for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][TPID]->gnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:266:   } // for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)
LoadBalance/LB_RecordExchangeDataPatchID.cpp:272:   for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)  // loop over all "real" patches at SonLv
LoadBalance/LB_RecordExchangeDataPatchID.cpp:274:      FaPID = amr->patch[0][SonLv][SonPID0]->father;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:280:      for (int s=0; s<NSib_C; s++)  FaBuff[s] = amr->patch[0][Lv][FaPID]->sibling[s];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:308:            for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][Lv][TPID]->gnew();
LoadBalance/LB_RecordExchangeDataPatchID.cpp:312:   } // for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)
LoadBalance/LB_RecordExchangeDataPatchID.cpp:371:         SibLBIdx = amr->patch[0][Lv][SibPID]->LB_Idx;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:398:            SibLBIdx = amr->patch[0][Lv][SibPID]->LB_Idx;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:501:         LB_RecvH_LBIdxList[r][t] = amr->patch[0][Lv][ LB_RecvH_IDList[r][t] ]->LB_Idx;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:511:         LB_RecvH_PCr1D  [r][t] = amr->patch[0][Lv][TPID]->PaddedCr1D;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:606:         LB_RecvG_LBIdxList[r][t] = amr->patch[0][Lv][ LB_RecvG_IDList[r][t] ]->LB_Idx;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:616:         LB_RecvG_PCr1D  [r][t] = amr->patch[0][Lv][TPID]->PaddedCr1D;
LoadBalance/LB_RecordExchangeDataPatchID.cpp:727:      Mis_Matching_int( amr->NPatchComma[Lv][1], amr->LB->IdxList_Real[Lv], LB_SendH_NList[r],
LoadBalance/LB_RecordExchangeDataPatchID.cpp:740:         LB_SendH_IDList[r][t] = amr->LB->IdxList_Real_IdxTable[Lv][ Match_H[t] ];
LoadBalance/LB_RecordExchangeDataPatchID.cpp:754:      Mis_Matching_int( amr->NPatchComma[Lv][1], amr->LB->IdxList_Real[Lv], LB_SendG_NList[r],
LoadBalance/LB_RecordExchangeDataPatchID.cpp:767:         LB_SendG_IDList[r][t] = amr->LB->IdxList_Real_IdxTable[Lv][ Match_G[t] ];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:35:   int  *LB_SendH_NList           = amr->LB->SendH_NList          [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:36:   int **LB_SendH_IDList          = amr->LB->SendH_IDList         [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:37:   int **LB_SendH_SibList         = amr->LB->SendH_SibList        [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:38:   int  *LB_RecvH_NList           = amr->LB->RecvH_NList          [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:39:   int **LB_RecvH_IDList          = amr->LB->RecvH_IDList         [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:40:   int **LB_RecvH_IDList_IdxTable = amr->LB->RecvH_IDList_IdxTable[Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:41:   int **LB_RecvH_SibList         = amr->LB->RecvH_SibList        [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:43:   int  *LB_SendX_NList           = amr->LB->SendX_NList          [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:44:   int  *LB_SendX_NResList        = amr->LB->SendX_NResList       [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:45:   int **LB_SendX_IDList          = amr->LB->SendX_IDList         [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:46:   int **LB_SendX_SibList         = amr->LB->SendX_SibList        [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:47:   int  *LB_RecvX_NList           = amr->LB->RecvX_NList          [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:48:   int  *LB_RecvX_NResList        = amr->LB->RecvX_NResList       [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:49:   int **LB_RecvX_IDList          = amr->LB->RecvX_IDList         [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:50:   int **LB_RecvX_SibList         = amr->LB->RecvX_SibList        [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:53:   int  *LB_SendY_NList           = amr->LB->SendY_NList          [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:54:   int **LB_SendY_IDList          = amr->LB->SendY_IDList         [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:55:   int **LB_SendY_SibList         = amr->LB->SendY_SibList        [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:56:   int  *LB_RecvY_NList           = amr->LB->RecvY_NList          [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:57:   int **LB_RecvY_IDList          = amr->LB->RecvY_IDList         [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:58:   int **LB_RecvY_SibList         = amr->LB->RecvY_SibList        [Lv];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:127:            if ( amr->patch[0][Lv][SPID]->son != -1 ) // sons may not be home --> need LB_RecordExchangeRestrictDataPatchID()
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:146:            if ( amr->patch[0][Lv][RPID]->son != -1 ) // assuming that all buffer patches know whether or not they have sons
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:166:      if ( !amr->WithFlux )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:167:         Aux_Error( ERROR_INFO, "amr->WithFlux is off --> no flux array is required !!\n" );
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:179:            if ( amr->patch[0][Lv][SPID]->flux[s] != NULL )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:182:               if ( amr->patch[0][Lv][SPID]->son != -1 )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:184:                             Lv, SPID, amr->patch[0][Lv][SPID]->son, s );
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:199:            } // if ( amr->patch[0][Lv][SPID]->flux[s] != NULL )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:213:         if ( amr->patch[0][Lv][RPID]->son == -1 )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:216:            const int SibPID = amr->patch[0][Lv][RPID]->sibling[s];
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:218:            if ( SibPID >= 0  &&  amr->patch[0][Lv][SibPID]->son != -1 )   // work for non-periodic B.C. as well
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:232:            } // if ( SibPID >= 0  &&  amr->patch[0][Lv][SibPID]->son != -1 )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:248:      if ( !amr->WithElectric )
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:249:         Aux_Error( ERROR_INFO, "amr->WithElectric is off --> no electric field array is required !!\n" );
LoadBalance/LB_RecordExchangeFixUpDataPatchID.cpp:261:            if ( amr->patch[0][Lv][SPID]->electric[s] != NULL )
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:32:   const int FaNReal  = amr->NPatchComma[FaLv ][1];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:33:   const int SonNReal = amr->NPatchComma[SonLv][1];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:34:   const int MemUnit  = 1 + ( amr->NPatchComma[FaLv][3] - FaNReal ) / MPI_NRank;    // set arbitrarily
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:40:   int  *LB_SendR_NList           = amr->LB->SendR_NList          [FaLv];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:41:   int **LB_SendR_IDList          = amr->LB->SendR_IDList         [FaLv];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:42:   int **LB_SendR_IDList_IdxTable = amr->LB->SendR_IDList_IdxTable[FaLv];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:43:   int  *LB_RecvR_NList           = amr->LB->RecvR_NList          [FaLv];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:44:   int **LB_RecvR_IDList          = amr->LB->RecvR_IDList         [FaLv];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:62:      FaPID = amr->patch[0][SonLv][SonPID0]->father;
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:73:         FaLBIdx = amr->patch[0][FaLv][FaPID]->LB_Idx;
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:95:         for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][FaLv][FaPID]->hnew();
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:98:         for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][FaLv][FaPID]->mnew();
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:102:         for (int Sg=0; Sg<2; Sg++)    amr->patch[Sg][FaLv][FaPID]->gnew();
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:183:      Mis_Matching_int( amr->NPatchComma[FaLv][1], amr->LB->IdxList_Real[FaLv], LB_RecvR_NList[r],
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:196:         LB_RecvR_IDList[r][t] = amr->LB->IdxList_Real_IdxTable[FaLv][ Match_R[t] ];
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:205:         SonPID = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:221:         SonPID = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_RecordExchangeRestrictDataPatchID.cpp:230:               TempList_LBIdx[Counter] = amr->patch[0][FaLv][FaPID]->LB_Idx;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:25:   const int NReal0 = amr->NPatchComma[Lv][1]/8;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:27:   int  *LB_SendH_NList  = amr->LB->SendH_NList [Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:28:   int **LB_SendH_IDList = amr->LB->SendH_IDList[Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:31:   int  *LB_SendG_NList  = amr->LB->SendG_NList [Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:32:   int **LB_SendG_IDList = amr->LB->SendG_IDList[Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:39:   amr->LB->OverlapMPI_FluSyncN [Lv] = 0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:40:   amr->LB->OverlapMPI_FluAsyncN[Lv] = 0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:42:   if ( amr->LB->OverlapMPI_FluSyncPID0 [Lv] != NULL )   delete [] amr->LB->OverlapMPI_FluSyncPID0 [Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:43:   if ( amr->LB->OverlapMPI_FluAsyncPID0[Lv] != NULL )   delete [] amr->LB->OverlapMPI_FluAsyncPID0[Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:45:   amr->LB->OverlapMPI_FluSyncPID0 [Lv] = new int [NReal0];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:46:   amr->LB->OverlapMPI_FluAsyncPID0[Lv] = new int [NReal0];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:51:   amr->LB->OverlapMPI_PotSyncN [Lv] = 0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:52:   amr->LB->OverlapMPI_PotAsyncN[Lv] = 0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:54:   if ( amr->LB->OverlapMPI_PotSyncPID0 [Lv] != NULL )   delete [] amr->LB->OverlapMPI_PotSyncPID0 [Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:55:   if ( amr->LB->OverlapMPI_PotAsyncPID0[Lv] != NULL )   delete [] amr->LB->OverlapMPI_PotAsyncPID0[Lv];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:57:   amr->LB->OverlapMPI_PotSyncPID0 [Lv] = new int [NReal0];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:58:   amr->LB->OverlapMPI_PotAsyncPID0[Lv] = new int [NReal0];
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:106:      if ( FluSyncList[t] )   amr->LB->OverlapMPI_FluSyncPID0 [Lv][ amr->LB->OverlapMPI_FluSyncN [Lv] ++ ] = PID0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:107:      else                    amr->LB->OverlapMPI_FluAsyncPID0[Lv][ amr->LB->OverlapMPI_FluAsyncN[Lv] ++ ] = PID0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:110:      if ( PotSyncList[t] )   amr->LB->OverlapMPI_PotSyncPID0 [Lv][ amr->LB->OverlapMPI_PotSyncN [Lv] ++ ] = PID0;
LoadBalance/LB_RecordOvelapMPIPatchID.cpp:111:      else                    amr->LB->OverlapMPI_PotAsyncPID0[Lv][ amr->LB->OverlapMPI_PotAsyncN[Lv] ++ ] = PID0;
LoadBalance/LB_Refine.cpp:67:   RefineS2F_Send_PIDList = new int  [ amr->NPatchComma[FaLv][3] - amr->NPatchComma[FaLv][1] ];
LoadBalance/LB_Refine.cpp:68:   RefineF2S_Send_PIDList = new int  [ amr->NPatchComma[FaLv][1] ];
LoadBalance/LB_Refine.cpp:77:      for (int r=0; r<MPI_NRank+1; r++)   amr->LB->CutPoint[SonLv][r] = amr->LB->CutPoint[FaLv][r]*8;
LoadBalance/LB_Refine.cpp:130:   if ( amr->WithFlux )
LoadBalance/LB_Refine.cpp:138:   if ( amr->WithElectric )
LoadBalance/LB_Refine.cpp:165:// only for reconstructing the amr->Par->B2R_Real/Buffer_NPatchTotal[FaLv][0] lists
LoadBalance/LB_Refine.cpp:188:      for (int r=0; r<MPI_NRank+1; r++)   amr->LB->CutPoint[SonLv][r] = -1;
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:17://                   --> amr->num[SonLv] should be equal to amr->NPatchComma[SonLv][2]
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:32:   if ( amr->NPatchComma[SonLv][1] != amr->num[SonLv] )
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:33:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][1] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:34:                 SonLv, amr->NPatchComma[SonLv][1], SonLv, amr->num[SonLv] );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:40:   const int NFaPatch = amr->num[FaLv];
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:41:   const int PScale   = PATCH_SIZE*amr->scale[SonLv];
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:54:   for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:56:      FaPID = amr->patch[0][SonLv][SonPID0]->father;
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:64:         FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[s];
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:74:            FaSibSonPID = amr->patch[0][FaLv][FaSibPID]->son;
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:79:               FaCr = amr->patch[0][FaLv][FaSibPID]->corner;
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:84:               amr->pnew( SonLv, FaCr[0],        FaCr[1],        FaCr[2],        -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:85:               amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1],        FaCr[2],        -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:86:               amr->pnew( SonLv, FaCr[0],        FaCr[1]+PScale, FaCr[2],        -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:87:               amr->pnew( SonLv, FaCr[0],        FaCr[1],        FaCr[2]+PScale, -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:88:               amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1]+PScale, FaCr[2],        -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:89:               amr->pnew( SonLv, FaCr[0],        FaCr[1]+PScale, FaCr[2]+PScale, -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:90:               amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1],        FaCr[2]+PScale, -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:91:               amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1]+PScale, FaCr[2]+PScale, -1, false, false, false );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:93:               amr->NPatchComma[SonLv][2] += 8;
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:100:   } // for (int SonPID0=0; SonPID0<amr->NPatchComma[SonLv][1]; SonPID0+=8)
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:104:   for (int m=3; m<28; m++)   amr->NPatchComma[SonLv][m] = amr->NPatchComma[SonLv][2];
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:106:   if ( amr->NPatchComma[SonLv][2] != amr->num[SonLv] )
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:107:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][2] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:108:                 SonLv, amr->NPatchComma[SonLv][2], SonLv, amr->num[SonLv] );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:114:   const int NPatch = amr->num[SonLv];
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:116:   amr->LB->PaddedCr1DList         [SonLv] = (ulong*)realloc( amr->LB->PaddedCr1DList         [SonLv],
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:118:   amr->LB->PaddedCr1DList_IdxTable[SonLv] = (int*  )realloc( amr->LB->PaddedCr1DList_IdxTable[SonLv],
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:122:      amr->LB->PaddedCr1DList[SonLv][SonPID] = amr->patch[0][SonLv][SonPID]->PaddedCr1D;
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:124:   Mis_Heapsort( NPatch, amr->LB->PaddedCr1DList[SonLv], amr->LB->PaddedCr1DList_IdxTable[SonLv] );
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:130:      if ( amr->LB->PaddedCr1DList[SonLv][t] == amr->LB->PaddedCr1DList[SonLv][t-1] )
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:132:                    SonLv, amr->LB->PaddedCr1DList[SonLv][t], amr->LB->PaddedCr1DList_IdxTable[SonLv][t],
LoadBalance/LB_Refine_AllocateBufferPatch_Sibling.cpp:133:                    amr->LB->PaddedCr1DList_IdxTable[SonLv][t-1] );
LoadBalance/LB_SetCutPoint.cpp:16://                   (e.g., we don't know the number of patches in each rank, amr->NPatchComma, and any
LoadBalance/LB_SetCutPoint.cpp:66://     (e.g., we don't know the number of patches in each rank, amr->NPatchComma, and any particle information yet ...)
LoadBalance/LB_SetCutPoint.cpp:79:      int NPG_ThisRank = amr->NPatchComma[lv][1] / 8;
LoadBalance/LB_SetCutPoint.cpp:111:         LBIdx0_ThisRank[t]  = amr->patch[0][lv][PID0]->LB_Idx;
LoadBalance/LB_SiblingSearch.cpp:42:   const int  NPatch              = amr->num[lv];
LoadBalance/LB_SiblingSearch.cpp:48:   const int  BoxNScale_Padded[3] = { amr->BoxScale[0]/PATCH_SIZE + 2*Padded,
LoadBalance/LB_SiblingSearch.cpp:49:                                      amr->BoxScale[1]/PATCH_SIZE + 2*Padded,
LoadBalance/LB_SiblingSearch.cpp:50:                                      amr->BoxScale[2]/PATCH_SIZE + 2*Padded };  //normalized and padded BoxScale
LoadBalance/LB_SiblingSearch.cpp:51:   const int  Scale2              = 2*amr->scale[lv];
LoadBalance/LB_SiblingSearch.cpp:80:         amr->patch[0][lv][PID]->sibling[s] = -1;
LoadBalance/LB_SiblingSearch.cpp:116:         SibCr1D[ Count++ ] = amr->patch[0][lv][PID0]->PaddedCr1D + (ulong)Cr1D_Disp[s];
LoadBalance/LB_SiblingSearch.cpp:133:   Mis_Matching_int( NPatch, amr->LB->PaddedCr1DList[lv], NSearch, SibCr1D_Search, Match );
LoadBalance/LB_SiblingSearch.cpp:154:         Cr1D    = amr->LB->PaddedCr1DList         [lv][ Match[t] ];
LoadBalance/LB_SiblingSearch.cpp:155:         SibPID0 = amr->LB->PaddedCr1DList_IdxTable[lv][ Match[t] ];
LoadBalance/LB_SiblingSearch.cpp:156:         Cr2     = amr->patch[0][lv][SibPID0]->corner;
LoadBalance/LB_SiblingSearch.cpp:165:                  Cr1  = amr->patch[0][lv][PID0]->corner;
LoadBalance/LB_SiblingSearch.cpp:216:   const int PScale        = PATCH_SIZE*amr->scale[lv];
LoadBalance/LB_SiblingSearch.cpp:221:      int SibPID = amr->patch[0][lv][PID]->sibling[s];
LoadBalance/LB_SiblingSearch.cpp:226:         if ( amr->patch[0][lv][SibPID]->sibling[ MirrorSib[s] ] != PID )
LoadBalance/LB_SiblingSearch.cpp:229:                       amr->patch[0][lv][SibPID]->sibling[ MirrorSib[s] ] );
LoadBalance/LB_SiblingSearch.cpp:234:            if (    amr->patch[0][lv][   PID]->corner[d] + TABLE_01( s, 'x'+d, -PScale, 0, PScale )
LoadBalance/LB_SiblingSearch.cpp:235:                 != amr->patch[0][lv][SibPID]->corner[d]  )
LoadBalance/LB_SiblingSearch.cpp:237:                          lv, s, PID, SibPID, d, amr->patch[0][lv][PID]->corner[d],
LoadBalance/LB_SiblingSearch.cpp:238:                          TABLE_01( s, 'x'+d, -PScale, 0, PScale ), amr->patch[0][lv][SibPID]->corner[d] );
LoadBalance/LB_SiblingSearch.cpp:279:   amr->patch[0][lv][ PID[0] ]->sibling[ 1] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:280:   amr->patch[0][lv][ PID[0] ]->sibling[ 3] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:281:   amr->patch[0][lv][ PID[0] ]->sibling[ 5] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:282:   amr->patch[0][lv][ PID[0] ]->sibling[ 9] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:283:   amr->patch[0][lv][ PID[0] ]->sibling[13] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:284:   amr->patch[0][lv][ PID[0] ]->sibling[17] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:285:   amr->patch[0][lv][ PID[0] ]->sibling[25] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:288:   amr->patch[0][lv][ PID[1] ]->sibling[ 0] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:289:   amr->patch[0][lv][ PID[1] ]->sibling[ 8] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:290:   amr->patch[0][lv][ PID[1] ]->sibling[15] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:291:   amr->patch[0][lv][ PID[1] ]->sibling[ 3] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:292:   amr->patch[0][lv][ PID[1] ]->sibling[24] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:293:   amr->patch[0][lv][ PID[1] ]->sibling[ 5] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:294:   amr->patch[0][lv][ PID[1] ]->sibling[13] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:297:   amr->patch[0][lv][ PID[2] ]->sibling[ 2] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:298:   amr->patch[0][lv][ PID[2] ]->sibling[ 7] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:299:   amr->patch[0][lv][ PID[2] ]->sibling[12] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:300:   amr->patch[0][lv][ PID[2] ]->sibling[ 1] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:301:   amr->patch[0][lv][ PID[2] ]->sibling[ 5] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:302:   amr->patch[0][lv][ PID[2] ]->sibling[23] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:303:   amr->patch[0][lv][ PID[2] ]->sibling[17] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:306:   amr->patch[0][lv][ PID[3] ]->sibling[ 4] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:307:   amr->patch[0][lv][ PID[3] ]->sibling[16] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:308:   amr->patch[0][lv][ PID[3] ]->sibling[11] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:309:   amr->patch[0][lv][ PID[3] ]->sibling[21] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:310:   amr->patch[0][lv][ PID[3] ]->sibling[ 3] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:311:   amr->patch[0][lv][ PID[3] ]->sibling[ 1] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:312:   amr->patch[0][lv][ PID[3] ]->sibling[ 9] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:315:   amr->patch[0][lv][ PID[4] ]->sibling[ 6] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:316:   amr->patch[0][lv][ PID[4] ]->sibling[ 2] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:317:   amr->patch[0][lv][ PID[4] ]->sibling[ 0] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:318:   amr->patch[0][lv][ PID[4] ]->sibling[22] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:319:   amr->patch[0][lv][ PID[4] ]->sibling[15] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:320:   amr->patch[0][lv][ PID[4] ]->sibling[12] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:321:   amr->patch[0][lv][ PID[4] ]->sibling[ 5] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:324:   amr->patch[0][lv][ PID[5] ]->sibling[10] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:325:   amr->patch[0][lv][ PID[5] ]->sibling[19] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:326:   amr->patch[0][lv][ PID[5] ]->sibling[ 4] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:327:   amr->patch[0][lv][ PID[5] ]->sibling[ 2] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:328:   amr->patch[0][lv][ PID[5] ]->sibling[16] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:329:   amr->patch[0][lv][ PID[5] ]->sibling[ 7] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:330:   amr->patch[0][lv][ PID[5] ]->sibling[ 1] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:333:   amr->patch[0][lv][ PID[6] ]->sibling[14] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:334:   amr->patch[0][lv][ PID[6] ]->sibling[ 4] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:335:   amr->patch[0][lv][ PID[6] ]->sibling[20] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:336:   amr->patch[0][lv][ PID[6] ]->sibling[ 0] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:337:   amr->patch[0][lv][ PID[6] ]->sibling[11] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:338:   amr->patch[0][lv][ PID[6] ]->sibling[ 8] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:339:   amr->patch[0][lv][ PID[6] ]->sibling[ 3] = PID[7];
LoadBalance/LB_SiblingSearch.cpp:342:   amr->patch[0][lv][ PID[7] ]->sibling[18] = PID[0];
LoadBalance/LB_SiblingSearch.cpp:343:   amr->patch[0][lv][ PID[7] ]->sibling[10] = PID[1];
LoadBalance/LB_SiblingSearch.cpp:344:   amr->patch[0][lv][ PID[7] ]->sibling[14] = PID[2];
LoadBalance/LB_SiblingSearch.cpp:345:   amr->patch[0][lv][ PID[7] ]->sibling[ 6] = PID[3];
LoadBalance/LB_SiblingSearch.cpp:346:   amr->patch[0][lv][ PID[7] ]->sibling[ 4] = PID[4];
LoadBalance/LB_SiblingSearch.cpp:347:   amr->patch[0][lv][ PID[7] ]->sibling[ 0] = PID[5];
LoadBalance/LB_SiblingSearch.cpp:348:   amr->patch[0][lv][ PID[7] ]->sibling[ 2] = PID[6];
LoadBalance/LB_SiblingSearch.cpp:380:         amr->patch[0][lv][ PID0+0 ]->sibling[ 0] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:381:         amr->patch[0][lv][ PID0+0 ]->sibling[ 8] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:382:         amr->patch[0][lv][ PID0+0 ]->sibling[15] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:383:         amr->patch[0][lv][ PID0+0 ]->sibling[24] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:385:         amr->patch[0][lv][ PID0+2 ]->sibling[ 6] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:386:         amr->patch[0][lv][ PID0+2 ]->sibling[ 0] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:387:         amr->patch[0][lv][ PID0+2 ]->sibling[22] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:388:         amr->patch[0][lv][ PID0+2 ]->sibling[15] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:390:         amr->patch[0][lv][ PID0+3 ]->sibling[14] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:391:         amr->patch[0][lv][ PID0+3 ]->sibling[20] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:392:         amr->patch[0][lv][ PID0+3 ]->sibling[ 0] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:393:         amr->patch[0][lv][ PID0+3 ]->sibling[ 8] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:395:         amr->patch[0][lv][ PID0+5 ]->sibling[18] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:396:         amr->patch[0][lv][ PID0+5 ]->sibling[14] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:397:         amr->patch[0][lv][ PID0+5 ]->sibling[ 6] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:398:         amr->patch[0][lv][ PID0+5 ]->sibling[ 0] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:402:            amr->patch[0][lv][ SibPID0+1 ]->sibling[ 1] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:403:            amr->patch[0][lv][ SibPID0+4 ]->sibling[ 7] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:404:            amr->patch[0][lv][ SibPID0+6 ]->sibling[16] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:405:            amr->patch[0][lv][ SibPID0+7 ]->sibling[19] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:407:            amr->patch[0][lv][ SibPID0+1 ]->sibling[ 9] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:408:            amr->patch[0][lv][ SibPID0+4 ]->sibling[ 1] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:409:            amr->patch[0][lv][ SibPID0+6 ]->sibling[21] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:410:            amr->patch[0][lv][ SibPID0+7 ]->sibling[16] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:412:            amr->patch[0][lv][ SibPID0+1 ]->sibling[17] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:413:            amr->patch[0][lv][ SibPID0+4 ]->sibling[23] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:414:            amr->patch[0][lv][ SibPID0+6 ]->sibling[ 1] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:415:            amr->patch[0][lv][ SibPID0+7 ]->sibling[ 7] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:417:            amr->patch[0][lv][ SibPID0+1 ]->sibling[25] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:418:            amr->patch[0][lv][ SibPID0+4 ]->sibling[17] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:419:            amr->patch[0][lv][ SibPID0+6 ]->sibling[ 9] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:420:            amr->patch[0][lv][ SibPID0+7 ]->sibling[ 1] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:426:         amr->patch[0][lv][ PID0+1 ]->sibling[ 1] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:427:         amr->patch[0][lv][ PID0+1 ]->sibling[ 9] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:428:         amr->patch[0][lv][ PID0+1 ]->sibling[17] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:429:         amr->patch[0][lv][ PID0+1 ]->sibling[25] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:431:         amr->patch[0][lv][ PID0+4 ]->sibling[ 7] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:432:         amr->patch[0][lv][ PID0+4 ]->sibling[ 1] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:433:         amr->patch[0][lv][ PID0+4 ]->sibling[23] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:434:         amr->patch[0][lv][ PID0+4 ]->sibling[17] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:436:         amr->patch[0][lv][ PID0+6 ]->sibling[16] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:437:         amr->patch[0][lv][ PID0+6 ]->sibling[21] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:438:         amr->patch[0][lv][ PID0+6 ]->sibling[ 1] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:439:         amr->patch[0][lv][ PID0+6 ]->sibling[ 9] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:441:         amr->patch[0][lv][ PID0+7 ]->sibling[19] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:442:         amr->patch[0][lv][ PID0+7 ]->sibling[16] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:443:         amr->patch[0][lv][ PID0+7 ]->sibling[ 7] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:444:         amr->patch[0][lv][ PID0+7 ]->sibling[ 1] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:448:            amr->patch[0][lv][ SibPID0+0 ]->sibling[ 0] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:449:            amr->patch[0][lv][ SibPID0+2 ]->sibling[ 6] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:450:            amr->patch[0][lv][ SibPID0+3 ]->sibling[14] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:451:            amr->patch[0][lv][ SibPID0+5 ]->sibling[18] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:453:            amr->patch[0][lv][ SibPID0+0 ]->sibling[ 8] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:454:            amr->patch[0][lv][ SibPID0+2 ]->sibling[ 0] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:455:            amr->patch[0][lv][ SibPID0+3 ]->sibling[20] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:456:            amr->patch[0][lv][ SibPID0+5 ]->sibling[14] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:458:            amr->patch[0][lv][ SibPID0+0 ]->sibling[15] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:459:            amr->patch[0][lv][ SibPID0+2 ]->sibling[22] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:460:            amr->patch[0][lv][ SibPID0+3 ]->sibling[ 0] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:461:            amr->patch[0][lv][ SibPID0+5 ]->sibling[ 6] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:463:            amr->patch[0][lv][ SibPID0+0 ]->sibling[24] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:464:            amr->patch[0][lv][ SibPID0+2 ]->sibling[15] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:465:            amr->patch[0][lv][ SibPID0+3 ]->sibling[ 8] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:466:            amr->patch[0][lv][ SibPID0+5 ]->sibling[ 0] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:472:         amr->patch[0][lv][ PID0+0 ]->sibling[ 2] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:473:         amr->patch[0][lv][ PID0+0 ]->sibling[ 7] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:474:         amr->patch[0][lv][ PID0+0 ]->sibling[12] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:475:         amr->patch[0][lv][ PID0+0 ]->sibling[23] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:477:         amr->patch[0][lv][ PID0+1 ]->sibling[ 6] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:478:         amr->patch[0][lv][ PID0+1 ]->sibling[ 2] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:479:         amr->patch[0][lv][ PID0+1 ]->sibling[22] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:480:         amr->patch[0][lv][ PID0+1 ]->sibling[12] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:482:         amr->patch[0][lv][ PID0+3 ]->sibling[10] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:483:         amr->patch[0][lv][ PID0+3 ]->sibling[19] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:484:         amr->patch[0][lv][ PID0+3 ]->sibling[ 2] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:485:         amr->patch[0][lv][ PID0+3 ]->sibling[ 7] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:487:         amr->patch[0][lv][ PID0+6 ]->sibling[18] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:488:         amr->patch[0][lv][ PID0+6 ]->sibling[10] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:489:         amr->patch[0][lv][ PID0+6 ]->sibling[ 6] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:490:         amr->patch[0][lv][ PID0+6 ]->sibling[ 2] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:494:            amr->patch[0][lv][ SibPID0+2 ]->sibling[ 3] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:495:            amr->patch[0][lv][ SibPID0+4 ]->sibling[ 8] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:496:            amr->patch[0][lv][ SibPID0+5 ]->sibling[11] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:497:            amr->patch[0][lv][ SibPID0+7 ]->sibling[20] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:499:            amr->patch[0][lv][ SibPID0+2 ]->sibling[ 9] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:500:            amr->patch[0][lv][ SibPID0+4 ]->sibling[ 3] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:501:            amr->patch[0][lv][ SibPID0+5 ]->sibling[21] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:502:            amr->patch[0][lv][ SibPID0+7 ]->sibling[11] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:504:            amr->patch[0][lv][ SibPID0+2 ]->sibling[13] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:505:            amr->patch[0][lv][ SibPID0+4 ]->sibling[24] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:506:            amr->patch[0][lv][ SibPID0+5 ]->sibling[ 3] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:507:            amr->patch[0][lv][ SibPID0+7 ]->sibling[ 8] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:509:            amr->patch[0][lv][ SibPID0+2 ]->sibling[25] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:510:            amr->patch[0][lv][ SibPID0+4 ]->sibling[13] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:511:            amr->patch[0][lv][ SibPID0+5 ]->sibling[ 9] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:512:            amr->patch[0][lv][ SibPID0+7 ]->sibling[ 3] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:518:         amr->patch[0][lv][ PID0+2 ]->sibling[ 3] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:519:         amr->patch[0][lv][ PID0+2 ]->sibling[ 9] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:520:         amr->patch[0][lv][ PID0+2 ]->sibling[13] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:521:         amr->patch[0][lv][ PID0+2 ]->sibling[25] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:523:         amr->patch[0][lv][ PID0+4 ]->sibling[ 8] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:524:         amr->patch[0][lv][ PID0+4 ]->sibling[ 3] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:525:         amr->patch[0][lv][ PID0+4 ]->sibling[24] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:526:         amr->patch[0][lv][ PID0+4 ]->sibling[13] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:528:         amr->patch[0][lv][ PID0+5 ]->sibling[11] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:529:         amr->patch[0][lv][ PID0+5 ]->sibling[21] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:530:         amr->patch[0][lv][ PID0+5 ]->sibling[ 3] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:531:         amr->patch[0][lv][ PID0+5 ]->sibling[ 9] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:533:         amr->patch[0][lv][ PID0+7 ]->sibling[20] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:534:         amr->patch[0][lv][ PID0+7 ]->sibling[11] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:535:         amr->patch[0][lv][ PID0+7 ]->sibling[ 8] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:536:         amr->patch[0][lv][ PID0+7 ]->sibling[ 3] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:540:            amr->patch[0][lv][ SibPID0+0 ]->sibling[ 2] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:541:            amr->patch[0][lv][ SibPID0+1 ]->sibling[ 6] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:542:            amr->patch[0][lv][ SibPID0+3 ]->sibling[10] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:543:            amr->patch[0][lv][ SibPID0+6 ]->sibling[18] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:545:            amr->patch[0][lv][ SibPID0+0 ]->sibling[ 7] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:546:            amr->patch[0][lv][ SibPID0+1 ]->sibling[ 2] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:547:            amr->patch[0][lv][ SibPID0+3 ]->sibling[19] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:548:            amr->patch[0][lv][ SibPID0+6 ]->sibling[10] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:550:            amr->patch[0][lv][ SibPID0+0 ]->sibling[12] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:551:            amr->patch[0][lv][ SibPID0+1 ]->sibling[22] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:552:            amr->patch[0][lv][ SibPID0+3 ]->sibling[ 2] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:553:            amr->patch[0][lv][ SibPID0+6 ]->sibling[ 6] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:555:            amr->patch[0][lv][ SibPID0+0 ]->sibling[23] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:556:            amr->patch[0][lv][ SibPID0+1 ]->sibling[12] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:557:            amr->patch[0][lv][ SibPID0+3 ]->sibling[ 7] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:558:            amr->patch[0][lv][ SibPID0+6 ]->sibling[ 2] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:564:         amr->patch[0][lv][ PID0+0 ]->sibling[ 4] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:565:         amr->patch[0][lv][ PID0+0 ]->sibling[11] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:566:         amr->patch[0][lv][ PID0+0 ]->sibling[16] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:567:         amr->patch[0][lv][ PID0+0 ]->sibling[21] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:569:         amr->patch[0][lv][ PID0+1 ]->sibling[14] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:570:         amr->patch[0][lv][ PID0+1 ]->sibling[20] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:571:         amr->patch[0][lv][ PID0+1 ]->sibling[ 4] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:572:         amr->patch[0][lv][ PID0+1 ]->sibling[11] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:574:         amr->patch[0][lv][ PID0+2 ]->sibling[10] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:575:         amr->patch[0][lv][ PID0+2 ]->sibling[ 4] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:576:         amr->patch[0][lv][ PID0+2 ]->sibling[19] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:577:         amr->patch[0][lv][ PID0+2 ]->sibling[16] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:579:         amr->patch[0][lv][ PID0+4 ]->sibling[18] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:580:         amr->patch[0][lv][ PID0+4 ]->sibling[14] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:581:         amr->patch[0][lv][ PID0+4 ]->sibling[10] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:582:         amr->patch[0][lv][ PID0+4 ]->sibling[ 4] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:586:            amr->patch[0][lv][ SibPID0+3 ]->sibling[ 5] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:587:            amr->patch[0][lv][ SibPID0+5 ]->sibling[12] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:588:            amr->patch[0][lv][ SibPID0+6 ]->sibling[15] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:589:            amr->patch[0][lv][ SibPID0+7 ]->sibling[22] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:591:            amr->patch[0][lv][ SibPID0+3 ]->sibling[17] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:592:            amr->patch[0][lv][ SibPID0+5 ]->sibling[23] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:593:            amr->patch[0][lv][ SibPID0+6 ]->sibling[ 5] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:594:            amr->patch[0][lv][ SibPID0+7 ]->sibling[12] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:596:            amr->patch[0][lv][ SibPID0+3 ]->sibling[13] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:597:            amr->patch[0][lv][ SibPID0+5 ]->sibling[ 5] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:598:            amr->patch[0][lv][ SibPID0+6 ]->sibling[24] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:599:            amr->patch[0][lv][ SibPID0+7 ]->sibling[15] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:601:            amr->patch[0][lv][ SibPID0+3 ]->sibling[25] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:602:            amr->patch[0][lv][ SibPID0+5 ]->sibling[17] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:603:            amr->patch[0][lv][ SibPID0+6 ]->sibling[13] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:604:            amr->patch[0][lv][ SibPID0+7 ]->sibling[ 5] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:610:         amr->patch[0][lv][ PID0+3 ]->sibling[ 5] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:611:         amr->patch[0][lv][ PID0+3 ]->sibling[17] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:612:         amr->patch[0][lv][ PID0+3 ]->sibling[13] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:613:         amr->patch[0][lv][ PID0+3 ]->sibling[25] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:615:         amr->patch[0][lv][ PID0+5 ]->sibling[12] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:616:         amr->patch[0][lv][ PID0+5 ]->sibling[23] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:617:         amr->patch[0][lv][ PID0+5 ]->sibling[ 5] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:618:         amr->patch[0][lv][ PID0+5 ]->sibling[17] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:620:         amr->patch[0][lv][ PID0+6 ]->sibling[15] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:621:         amr->patch[0][lv][ PID0+6 ]->sibling[ 5] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:622:         amr->patch[0][lv][ PID0+6 ]->sibling[24] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:623:         amr->patch[0][lv][ PID0+6 ]->sibling[13] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:625:         amr->patch[0][lv][ PID0+7 ]->sibling[22] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:626:         amr->patch[0][lv][ PID0+7 ]->sibling[12] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:627:         amr->patch[0][lv][ PID0+7 ]->sibling[15] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:628:         amr->patch[0][lv][ PID0+7 ]->sibling[ 5] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:632:            amr->patch[0][lv][ SibPID0+0 ]->sibling[ 4] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:633:            amr->patch[0][lv][ SibPID0+1 ]->sibling[14] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:634:            amr->patch[0][lv][ SibPID0+2 ]->sibling[10] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:635:            amr->patch[0][lv][ SibPID0+4 ]->sibling[18] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:637:            amr->patch[0][lv][ SibPID0+0 ]->sibling[11] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:638:            amr->patch[0][lv][ SibPID0+1 ]->sibling[20] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:639:            amr->patch[0][lv][ SibPID0+2 ]->sibling[ 4] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:640:            amr->patch[0][lv][ SibPID0+4 ]->sibling[14] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:642:            amr->patch[0][lv][ SibPID0+0 ]->sibling[16] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:643:            amr->patch[0][lv][ SibPID0+1 ]->sibling[ 4] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:644:            amr->patch[0][lv][ SibPID0+2 ]->sibling[19] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:645:            amr->patch[0][lv][ SibPID0+4 ]->sibling[10] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:647:            amr->patch[0][lv][ SibPID0+0 ]->sibling[21] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:648:            amr->patch[0][lv][ SibPID0+1 ]->sibling[11] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:649:            amr->patch[0][lv][ SibPID0+2 ]->sibling[16] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:650:            amr->patch[0][lv][ SibPID0+4 ]->sibling[ 4] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:656:         amr->patch[0][lv][ PID0+0 ]->sibling[ 6] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:657:         amr->patch[0][lv][ PID0+0 ]->sibling[22] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:659:         amr->patch[0][lv][ PID0+3 ]->sibling[18] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:660:         amr->patch[0][lv][ PID0+3 ]->sibling[ 6] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:664:            amr->patch[0][lv][ SibPID0+4 ]->sibling[ 9] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:665:            amr->patch[0][lv][ SibPID0+7 ]->sibling[21] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:667:            amr->patch[0][lv][ SibPID0+4 ]->sibling[25] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:668:            amr->patch[0][lv][ SibPID0+7 ]->sibling[ 9] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:674:         amr->patch[0][lv][ PID0+1 ]->sibling[ 7] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:675:         amr->patch[0][lv][ PID0+1 ]->sibling[23] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:677:         amr->patch[0][lv][ PID0+6 ]->sibling[19] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:678:         amr->patch[0][lv][ PID0+6 ]->sibling[ 7] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:682:            amr->patch[0][lv][ SibPID0+2 ]->sibling[ 8] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:683:            amr->patch[0][lv][ SibPID0+5 ]->sibling[20] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:685:            amr->patch[0][lv][ SibPID0+2 ]->sibling[24] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:686:            amr->patch[0][lv][ SibPID0+5 ]->sibling[ 8] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:692:         amr->patch[0][lv][ PID0+2 ]->sibling[ 8] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:693:         amr->patch[0][lv][ PID0+2 ]->sibling[24] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:695:         amr->patch[0][lv][ PID0+5 ]->sibling[20] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:696:         amr->patch[0][lv][ PID0+5 ]->sibling[ 8] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:700:            amr->patch[0][lv][ SibPID0+1 ]->sibling[ 7] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:701:            amr->patch[0][lv][ SibPID0+6 ]->sibling[19] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:703:            amr->patch[0][lv][ SibPID0+1 ]->sibling[23] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:704:            amr->patch[0][lv][ SibPID0+6 ]->sibling[ 7] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:710:         amr->patch[0][lv][ PID0+4 ]->sibling[ 9] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:711:         amr->patch[0][lv][ PID0+4 ]->sibling[25] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:713:         amr->patch[0][lv][ PID0+7 ]->sibling[21] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:714:         amr->patch[0][lv][ PID0+7 ]->sibling[ 9] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:718:            amr->patch[0][lv][ SibPID0+0 ]->sibling[ 6] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:719:            amr->patch[0][lv][ SibPID0+3 ]->sibling[18] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:721:            amr->patch[0][lv][ SibPID0+0 ]->sibling[22] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:722:            amr->patch[0][lv][ SibPID0+3 ]->sibling[ 6] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:728:         amr->patch[0][lv][ PID0+0 ]->sibling[10] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:729:         amr->patch[0][lv][ PID0+0 ]->sibling[19] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:731:         amr->patch[0][lv][ PID0+1 ]->sibling[18] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:732:         amr->patch[0][lv][ PID0+1 ]->sibling[10] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:736:            amr->patch[0][lv][ SibPID0+5 ]->sibling[13] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:737:            amr->patch[0][lv][ SibPID0+7 ]->sibling[24] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:739:            amr->patch[0][lv][ SibPID0+5 ]->sibling[25] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:740:            amr->patch[0][lv][ SibPID0+7 ]->sibling[13] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:746:         amr->patch[0][lv][ PID0+2 ]->sibling[11] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:747:         amr->patch[0][lv][ PID0+2 ]->sibling[21] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:749:         amr->patch[0][lv][ PID0+4 ]->sibling[20] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:750:         amr->patch[0][lv][ PID0+4 ]->sibling[11] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:754:            amr->patch[0][lv][ SibPID0+3 ]->sibling[12] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:755:            amr->patch[0][lv][ SibPID0+6 ]->sibling[22] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:757:            amr->patch[0][lv][ SibPID0+3 ]->sibling[23] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:758:            amr->patch[0][lv][ SibPID0+6 ]->sibling[12] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:764:         amr->patch[0][lv][ PID0+3 ]->sibling[12] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:765:         amr->patch[0][lv][ PID0+3 ]->sibling[23] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:767:         amr->patch[0][lv][ PID0+6 ]->sibling[22] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:768:         amr->patch[0][lv][ PID0+6 ]->sibling[12] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:772:            amr->patch[0][lv][ SibPID0+2 ]->sibling[11] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:773:            amr->patch[0][lv][ SibPID0+4 ]->sibling[20] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:775:            amr->patch[0][lv][ SibPID0+2 ]->sibling[21] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:776:            amr->patch[0][lv][ SibPID0+4 ]->sibling[11] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:782:         amr->patch[0][lv][ PID0+5 ]->sibling[13] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:783:         amr->patch[0][lv][ PID0+5 ]->sibling[25] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:785:         amr->patch[0][lv][ PID0+7 ]->sibling[24] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:786:         amr->patch[0][lv][ PID0+7 ]->sibling[13] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:790:            amr->patch[0][lv][ SibPID0+0 ]->sibling[10] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:791:            amr->patch[0][lv][ SibPID0+1 ]->sibling[18] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:793:            amr->patch[0][lv][ SibPID0+0 ]->sibling[19] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:794:            amr->patch[0][lv][ SibPID0+1 ]->sibling[10] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:800:         amr->patch[0][lv][ PID0+0 ]->sibling[14] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:801:         amr->patch[0][lv][ PID0+0 ]->sibling[20] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:803:         amr->patch[0][lv][ PID0+2 ]->sibling[18] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:804:         amr->patch[0][lv][ PID0+2 ]->sibling[14] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:808:            amr->patch[0][lv][ SibPID0+6 ]->sibling[17] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:809:            amr->patch[0][lv][ SibPID0+7 ]->sibling[23] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:811:            amr->patch[0][lv][ SibPID0+6 ]->sibling[25] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:812:            amr->patch[0][lv][ SibPID0+7 ]->sibling[17] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:818:         amr->patch[0][lv][ PID0+3 ]->sibling[15] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:819:         amr->patch[0][lv][ PID0+3 ]->sibling[24] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:821:         amr->patch[0][lv][ PID0+5 ]->sibling[22] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:822:         amr->patch[0][lv][ PID0+5 ]->sibling[15] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:826:            amr->patch[0][lv][ SibPID0+1 ]->sibling[16] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:827:            amr->patch[0][lv][ SibPID0+4 ]->sibling[19] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:829:            amr->patch[0][lv][ SibPID0+1 ]->sibling[21] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:830:            amr->patch[0][lv][ SibPID0+4 ]->sibling[16] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:836:         amr->patch[0][lv][ PID0+1 ]->sibling[16] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:837:         amr->patch[0][lv][ PID0+1 ]->sibling[21] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:839:         amr->patch[0][lv][ PID0+4 ]->sibling[19] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:840:         amr->patch[0][lv][ PID0+4 ]->sibling[16] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:844:            amr->patch[0][lv][ SibPID0+3 ]->sibling[15] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:845:            amr->patch[0][lv][ SibPID0+5 ]->sibling[22] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:847:            amr->patch[0][lv][ SibPID0+3 ]->sibling[24] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:848:            amr->patch[0][lv][ SibPID0+5 ]->sibling[15] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:854:         amr->patch[0][lv][ PID0+6 ]->sibling[17] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:855:         amr->patch[0][lv][ PID0+6 ]->sibling[25] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:857:         amr->patch[0][lv][ PID0+7 ]->sibling[23] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:858:         amr->patch[0][lv][ PID0+7 ]->sibling[17] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:862:            amr->patch[0][lv][ SibPID0+0 ]->sibling[14] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:863:            amr->patch[0][lv][ SibPID0+2 ]->sibling[18] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:865:            amr->patch[0][lv][ SibPID0+0 ]->sibling[20] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:866:            amr->patch[0][lv][ SibPID0+2 ]->sibling[14] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:872:         amr->patch[0][lv][ PID0+0 ]->sibling[18] = SibPID0+7;
LoadBalance/LB_SiblingSearch.cpp:875:            amr->patch[0][lv][ SibPID0+7 ]->sibling[25] = PID0+0;
LoadBalance/LB_SiblingSearch.cpp:880:         amr->patch[0][lv][ PID0+1 ]->sibling[19] = SibPID0+5;
LoadBalance/LB_SiblingSearch.cpp:883:            amr->patch[0][lv][ SibPID0+5 ]->sibling[24] = PID0+1;
LoadBalance/LB_SiblingSearch.cpp:888:         amr->patch[0][lv][ PID0+2 ]->sibling[20] = SibPID0+6;
LoadBalance/LB_SiblingSearch.cpp:891:            amr->patch[0][lv][ SibPID0+6 ]->sibling[23] = PID0+2;
LoadBalance/LB_SiblingSearch.cpp:896:         amr->patch[0][lv][ PID0+4 ]->sibling[21] = SibPID0+3;
LoadBalance/LB_SiblingSearch.cpp:899:            amr->patch[0][lv][ SibPID0+3 ]->sibling[22] = PID0+4;
LoadBalance/LB_SiblingSearch.cpp:904:         amr->patch[0][lv][ PID0+3 ]->sibling[22] = SibPID0+4;
LoadBalance/LB_SiblingSearch.cpp:907:            amr->patch[0][lv][ SibPID0+4 ]->sibling[21] = PID0+3;
LoadBalance/LB_SiblingSearch.cpp:912:         amr->patch[0][lv][ PID0+6 ]->sibling[23] = SibPID0+2;
LoadBalance/LB_SiblingSearch.cpp:915:            amr->patch[0][lv][ SibPID0+2 ]->sibling[20] = PID0+6;
LoadBalance/LB_SiblingSearch.cpp:920:         amr->patch[0][lv][ PID0+5 ]->sibling[24] = SibPID0+1;
LoadBalance/LB_SiblingSearch.cpp:923:            amr->patch[0][lv][ SibPID0+1 ]->sibling[19] = PID0+5;
LoadBalance/LB_SiblingSearch.cpp:928:         amr->patch[0][lv][ PID0+7 ]->sibling[25] = SibPID0+0;
LoadBalance/LB_SiblingSearch.cpp:931:            amr->patch[0][lv][ SibPID0+0 ]->sibling[18] = PID0+7;
LoadBalance/LB_SiblingSearch.cpp:967:   const int MaxIntCr[3] = { amr->BoxScale[0] - PATCH_SIZE*amr->scale[lv],
LoadBalance/LB_SiblingSearch.cpp:968:                             amr->BoxScale[1] - PATCH_SIZE*amr->scale[lv],
LoadBalance/LB_SiblingSearch.cpp:969:                             amr->BoxScale[2] - PATCH_SIZE*amr->scale[lv] };
LoadBalance/LB_SiblingSearch.cpp:983:               ( amr->patch[0][lv][PID0]->corner[d] < 0 || amr->patch[0][lv][PID0+7]->corner[d] > MaxIntCr[d] )  )
LoadBalance/LB_SiblingSearch.cpp:990:      if ( amr->patch[0][lv][PID0]->corner[0] > 0  &&  amr->patch[0][lv][PID0+7]->corner[0] < MaxIntCr[0]  &&
LoadBalance/LB_SiblingSearch.cpp:991:           amr->patch[0][lv][PID0]->corner[1] > 0  &&  amr->patch[0][lv][PID0+7]->corner[1] < MaxIntCr[1]  &&
LoadBalance/LB_SiblingSearch.cpp:992:           amr->patch[0][lv][PID0]->corner[2] > 0  &&  amr->patch[0][lv][PID0+7]->corner[2] < MaxIntCr[2]     )
LoadBalance/LB_SiblingSearch.cpp:997:         Sibling = amr->patch[0][lv][PID]->sibling;
LoadBalance/LB_SiblingSearch.cpp:1002:            Cr[d] = amr->patch[0][lv][PID]->corner[d];
LoadBalance/LB_SiblingSearch.cpp:1004:            if ( OPT__BC_FLU[2*d] == BC_FLU_PERIODIC )   Cr[d] = ( Cr[d] + amr->BoxScale[d] ) % amr->BoxScale[d];
LoadBalance/LB_Utility.cpp:14:// Note        :  1. "amr->ResPower2[lv]" must be prepared in advance
LoadBalance/LB_Utility.cpp:16://                3. By inputting "amr->ResPower2[lv]" for LB_Hilbert_c2i, we ensure the following property
LoadBalance/LB_Utility.cpp:38:      if ( Corner[d] < 0  ||  Corner[d] >= amr->BoxScale[d] )
LoadBalance/LB_Utility.cpp:45:   const int PatchScale  = amr->scale[lv]*PATCH_SIZE;
LoadBalance/LB_Utility.cpp:59:      Cr_Periodic[d] = ( Corner[d] + amr->BoxScale[d] ) % amr->BoxScale[d];
LoadBalance/LB_Utility.cpp:63:   return LB_Hilbert_c2i( Coord, amr->ResPower2[lv]-PatchPower2 );
LoadBalance/LB_Utility.cpp:75:// Note        :  1. "amr->ResPower2[lv]" must be prepared in advance
LoadBalance/LB_Utility.cpp:76://                2. By inputting "amr->ResPower2[lv]" for LB_Hilbert_i2c, we ensure the following property
LoadBalance/LB_Utility.cpp:87:   const int PatchScale = amr->scale[lv]*PATCH_SIZE;
LoadBalance/LB_Utility.cpp:95:   LB_Hilbert_i2c( LB_Idx, Coord, amr->ResPower2[lv]-PatchPower2 );
LoadBalance/LB_Utility.cpp:103:      if ( Corner[d] < 0  ||  Corner[d] >= NX0_TOT[d]*amr->scale[0] )
LoadBalance/LB_Utility.cpp:133:      if ( LB_Idx >= amr->LB->CutPoint[lv][r]  &&  LB_Idx < amr->LB->CutPoint[lv][r+1] )  return r;
LoadBalance/LB_Init_ByFunction.cpp:34:   const double Par_Weight              = amr->LB->Par_Weight;
LoadBalance/LB_Init_ByFunction.cpp:77:      Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv], NULL_INT, NULL_INT, _TOTAL, _MAG );
LoadBalance/LB_Init_ByFunction.cpp:79:      LB_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_RESTRICT, _TOTAL, _MAG, NULL_INT );
LoadBalance/LB_Init_ByFunction.cpp:81:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_YES );
LoadBalance/LB_Init_Refine.cpp:26:   const int  PScale = PS1*amr->scale[SonLv];
LoadBalance/LB_Init_Refine.cpp:35:   if ( amr->num[SonLv] != 0 )
LoadBalance/LB_Init_Refine.cpp:36:      Aux_Error( ERROR_INFO, "number of son patches on level %d = %d != 0 !!\n", SonLv, amr->num[SonLv] );
LoadBalance/LB_Init_Refine.cpp:40:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
LoadBalance/LB_Init_Refine.cpp:42:      if ( amr->patch[0][FaLv][FaPID]->flag )
LoadBalance/LB_Init_Refine.cpp:45:         amr->patch[0][FaLv][FaPID]->son = amr->num[SonLv];
LoadBalance/LB_Init_Refine.cpp:49:         FaCr = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_Init_Refine.cpp:51:         amr->pnew( SonLv, FaCr[0],        FaCr[1],        FaCr[2],        FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:52:         amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1],        FaCr[2],        FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:53:         amr->pnew( SonLv, FaCr[0],        FaCr[1]+PScale, FaCr[2],        FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:54:         amr->pnew( SonLv, FaCr[0],        FaCr[1],        FaCr[2]+PScale, FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:55:         amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1]+PScale, FaCr[2],        FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:56:         amr->pnew( SonLv, FaCr[0],        FaCr[1]+PScale, FaCr[2]+PScale, FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:57:         amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1],        FaCr[2]+PScale, FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:58:         amr->pnew( SonLv, FaCr[0]+PScale, FaCr[1]+PScale, FaCr[2]+PScale, FaPID, AllocData, AllocData, AllocData );
LoadBalance/LB_Init_Refine.cpp:65:      } // if ( amr->patch[0][FaLv][FaPID]->flag )
LoadBalance/LB_Init_Refine.cpp:66:   } // for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
LoadBalance/LB_Init_Refine.cpp:68:   for (int m=1; m<28; m++)   amr->NPatchComma[SonLv][m] = amr->num[SonLv];
LoadBalance/LB_EstimateWorkload_AllPatchGroup.cpp:25://                            --> Must be preallocated with th size "amr->NPatchComma[lv][1]/8"
LoadBalance/LB_EstimateWorkload_AllPatchGroup.cpp:37:   const int NPG_ThisRank = amr->NPatchComma[lv][1] / 8;
LoadBalance/LB_EstimateWorkload_AllPatchGroup.cpp:64:         if ( amr->patch[0][lv][PID]->son == -1 )  NParThisPatch = amr->patch[0][lv][PID]->NPar;
LoadBalance/LB_EstimateWorkload_AllPatchGroup.cpp:65:         else                                      NParThisPatch = amr->patch[0][lv][PID]->NPar_Copy;
LoadBalance/LB_Init_LoadBalance.cpp:44://                                                LB_EstimateWorkload_AllPatchGroup() needs amr->LB->IdxList_Real[], which
LoadBalance/LB_Init_LoadBalance.cpp:66:   if ( amr->LB == NULL )  Aux_Error( ERROR_INFO, "amr->LB has not been allocated !!\n" );
LoadBalance/LB_Init_LoadBalance.cpp:77:   if ( amr->ParaVar != NULL )
LoadBalance/LB_Init_LoadBalance.cpp:79:      delete amr->ParaVar;
LoadBalance/LB_Init_LoadBalance.cpp:80:      amr->ParaVar = NULL;
LoadBalance/LB_Init_LoadBalance.cpp:94:      LB_SetCutPoint( lv, NPatchTotal[lv]/8, amr->LB->CutPoint[lv], InputLBIdxAndLoad_No, NULL, NULL, ParWeight );
LoadBalance/LB_Init_LoadBalance.cpp:101://            will access amr->LB->IdxList_Real[], which will be reset when calling amr->LB->reset()
LoadBalance/LB_Init_LoadBalance.cpp:102://    --> amr->LB->reset() will NOT reset CutPoint[]
LoadBalance/LB_Init_LoadBalance.cpp:105:   for (int lv=lv_min; lv<=lv_max; lv++)  amr->LB->reset( lv );
LoadBalance/LB_Init_LoadBalance.cpp:126:         for (int v=0; v<PAR_NATT_TOTAL; v++)   ParAtt_Old[v] = amr->Par->Attribute[v];
LoadBalance/LB_Init_LoadBalance.cpp:222:      if ( amr->WithFlux )
LoadBalance/LB_Init_LoadBalance.cpp:227:      if ( amr->WithElectric )
LoadBalance/LB_Init_LoadBalance.cpp:260:      Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_GENERAL, _TOTAL, _MAG, Flu_ParaBuf, USELB_YES );
LoadBalance/LB_Init_LoadBalance.cpp:263:      Buf_GetBufferData( lv, NULL_INT, NULL_INT, amr->PotSg[lv], POT_FOR_POISSON, _POTE, _NONE, Pot_ParaBuf, USELB_YES );
LoadBalance/LB_Init_LoadBalance.cpp:286://                array amr->LB->CutPoint[]
LoadBalance/LB_Init_LoadBalance.cpp:295://                ParAtt_Old        : Pointers pointing to the particle attribute arrays (amr->Par->Attribute[])
LoadBalance/LB_Init_LoadBalance.cpp:296://                RemoveParFromRepo : Remove particles on lv from the particle repository (amr->Par)
LoadBalance/LB_Init_LoadBalance.cpp:373:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
LoadBalance/LB_Init_LoadBalance.cpp:375:      LB_Idx = amr->patch[0][lv][PID]->LB_Idx;
LoadBalance/LB_Init_LoadBalance.cpp:380:      Send_NCount_ParData[TRank] += amr->patch[0][lv][PID]->NPar;
LoadBalance/LB_Init_LoadBalance.cpp:435:   if ( NSend_Total_Patch != amr->NPatchComma[lv][1] )
LoadBalance/LB_Init_LoadBalance.cpp:437:                 NSend_Total_Patch, amr->NPatchComma[lv][1] );
LoadBalance/LB_Init_LoadBalance.cpp:440:   if ( NSend_Total_ParData != amr->Par->NPar_Lv[lv]*PAR_NATT_TOTAL )
LoadBalance/LB_Init_LoadBalance.cpp:442:                 NSend_Total_ParData, amr->Par->NPar_Lv[lv]*PAR_NATT_TOTAL );
LoadBalance/LB_Init_LoadBalance.cpp:450:   const int  FluSg              = amr->FluSg[lv];
LoadBalance/LB_Init_LoadBalance.cpp:452:   const int  PotSg              = amr->PotSg[lv];
LoadBalance/LB_Init_LoadBalance.cpp:459:   const int  MagSg              = amr->MagSg[lv];
LoadBalance/LB_Init_LoadBalance.cpp:489:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
LoadBalance/LB_Init_LoadBalance.cpp:491:      LB_Idx = amr->patch[0][lv][PID]->LB_Idx;
LoadBalance/LB_Init_LoadBalance.cpp:503:            memcpy( SendPtr, &amr->patch[FluSg][lv][PID]->fluid[v][0][0][0], FluSize1v*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:509:         memcpy( SendPtr, &amr->patch[PotSg][lv][PID]->pot[0][0][0], FluSize1v*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:514:         memcpy( SendPtr, &amr->patch[PotSg][lv][PID]->pot_ext[0][0][0], GraNxtSize*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:523:            memcpy( SendPtr, &amr->patch[MagSg][lv][PID]->magnetic[v][0], MagSize1v*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:530:      SendBuf_NPar[ Send_NDisp_Patch[TRank] + NDone_Patch[TRank] ] = amr->patch[0][lv][PID]->NPar;
LoadBalance/LB_Init_LoadBalance.cpp:534:      for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
LoadBalance/LB_Init_LoadBalance.cpp:536:         ParID = amr->patch[0][lv][PID]->ParList[p];
LoadBalance/LB_Init_LoadBalance.cpp:547:         if ( RemoveParFromRepo )   amr->Par->RemoveOneParticle( ParID, PAR_INACTIVE_MPI );
LoadBalance/LB_Init_LoadBalance.cpp:553:      NDone_ParData[TRank] += amr->patch[0][lv][PID]->NPar*PAR_NATT_TOTAL;
LoadBalance/LB_Init_LoadBalance.cpp:557:      const real *PType = amr->Par->Type;
LoadBalance/LB_Init_LoadBalance.cpp:558:      amr->patch[0][lv][PID]->RemoveParticle( NULL_INT, NULL, &amr->Par->NPar_Lv[lv], RemoveAllParticle, PType );
LoadBalance/LB_Init_LoadBalance.cpp:560:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
LoadBalance/LB_Init_LoadBalance.cpp:564:   if ( amr->Par->NPar_Lv[lv] != 0 )
LoadBalance/LB_Init_LoadBalance.cpp:565:      Aux_Error( ERROR_INFO, "NPar_Lv[%d] = %ld != 0 !!\n", lv, amr->Par->NPar_Lv[lv] );
LoadBalance/LB_Init_LoadBalance.cpp:574:   amr->Lvdelete( lv, OPT__REUSE_MEMORY==2 );
LoadBalance/LB_Init_LoadBalance.cpp:709:   const int   PScale       = PATCH_SIZE*amr->scale[lv];
LoadBalance/LB_Init_LoadBalance.cpp:717:   const long NParExpect = amr->Par->NPar_AcPlusInac + NRecv_Total_ParData/PAR_NATT_TOTAL;
LoadBalance/LB_Init_LoadBalance.cpp:718:   if ( !RemoveParFromRepo  &&  NParExpect > amr->Par->ParListSize )
LoadBalance/LB_Init_LoadBalance.cpp:719:      Aux_Error( ERROR_INFO, "NParExpect (%ld) > ParListSize (%ld) !!\n", NParExpect, amr->Par->ParListSize );
LoadBalance/LB_Init_LoadBalance.cpp:741:      amr->pnew( lv, Cr0[0],        Cr0[1],        Cr0[2],        -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:742:      amr->pnew( lv, Cr0[0]+PScale, Cr0[1],        Cr0[2],        -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:743:      amr->pnew( lv, Cr0[0],        Cr0[1]+PScale, Cr0[2],        -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:744:      amr->pnew( lv, Cr0[0],        Cr0[1],        Cr0[2]+PScale, -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:745:      amr->pnew( lv, Cr0[0]+PScale, Cr0[1]+PScale, Cr0[2],        -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:746:      amr->pnew( lv, Cr0[0],        Cr0[1]+PScale, Cr0[2]+PScale, -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:747:      amr->pnew( lv, Cr0[0]+PScale, Cr0[1],        Cr0[2]+PScale, -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:748:      amr->pnew( lv, Cr0[0]+PScale, Cr0[1]+PScale, Cr0[2]+PScale, -1, true, true, true );
LoadBalance/LB_Init_LoadBalance.cpp:761:               memcpy( &amr->patch[FluSg][lv][PID]->fluid[v][0][0][0], RecvPtr_Grid, FluSize1v*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:767:            memcpy( &amr->patch[PotSg][lv][PID]->pot[0][0][0], RecvPtr_Grid, FluSize1v*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:772:            memcpy( &amr->patch[PotSg][lv][PID]->pot_ext[0][0][0], RecvPtr_Grid, GraNxtSize*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:781:               memcpy( &amr->patch[MagSg][lv][PID]->magnetic[v][0], RecvPtr_Grid, MagSize1v*sizeof(real) );
LoadBalance/LB_Init_LoadBalance.cpp:791:            ParID        = amr->Par->AddOneParticle( RecvPtr_Par );
LoadBalance/LB_Init_LoadBalance.cpp:799:            if ( amr->Par->Attribute[PAR_MASS][ParID] < (real)0.0 )
LoadBalance/LB_Init_LoadBalance.cpp:801:                          ParID, amr->Par->Attribute[PAR_MASS][ParID] );
LoadBalance/LB_Init_LoadBalance.cpp:806:         const real *PType = amr->Par->Type;
LoadBalance/LB_Init_LoadBalance.cpp:808://       do not set ParPos too early since pointers to the particle repository (e.g., amr->Par->PosX)
LoadBalance/LB_Init_LoadBalance.cpp:809://       may change after calling amr->Par->AddOneParticle()
LoadBalance/LB_Init_LoadBalance.cpp:810:         const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
LoadBalance/LB_Init_LoadBalance.cpp:813:         amr->patch[0][lv][PID]->AddParticle( RecvBuf_NPar[PID], ParList, &amr->Par->NPar_Lv[lv],
LoadBalance/LB_Init_LoadBalance.cpp:814:                                              PType, ParPos, amr->Par->NPar_AcPlusInac, Comment );
LoadBalance/LB_Init_LoadBalance.cpp:816:         amr->patch[0][lv][PID]->AddParticle( RecvBuf_NPar[PID], ParList, &amr->Par->NPar_Lv[lv],
LoadBalance/LB_Init_LoadBalance.cpp:824:   for (int m=1; m<28; m++)   amr->NPatchComma[lv][m] = NRecv_Total_Patch;
LoadBalance/LB_Init_LoadBalance.cpp:826:// check the amr->NPatchComma recording
LoadBalance/LB_Init_LoadBalance.cpp:827:   if ( amr->NPatchComma[lv][1] != amr->num[lv] )
LoadBalance/LB_Init_LoadBalance.cpp:828:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][1] (%d) != amr->num[%d] (%d) !!\n",
LoadBalance/LB_Init_LoadBalance.cpp:829:                 lv, amr->NPatchComma[lv][1], lv, amr->num[lv] );
LoadBalance/LB_Init_LoadBalance.cpp:834:   if ( amr->LB->IdxList_Real         [lv] != NULL )  delete [] amr->LB->IdxList_Real         [lv];
LoadBalance/LB_Init_LoadBalance.cpp:835:   if ( amr->LB->IdxList_Real_IdxTable[lv] != NULL )  delete [] amr->LB->IdxList_Real_IdxTable[lv];
LoadBalance/LB_Init_LoadBalance.cpp:837:   amr->LB->IdxList_Real         [lv] = new long [NRecv_Total_Patch];
LoadBalance/LB_Init_LoadBalance.cpp:838:   amr->LB->IdxList_Real_IdxTable[lv] = new int  [NRecv_Total_Patch];
LoadBalance/LB_Init_LoadBalance.cpp:840:   for (int PID=0; PID<NRecv_Total_Patch; PID++)   amr->LB->IdxList_Real[lv][PID] = amr->patch[0][lv][PID]->LB_Idx;
LoadBalance/LB_Init_LoadBalance.cpp:842:   Mis_Heapsort( NRecv_Total_Patch, amr->LB->IdxList_Real[lv], amr->LB->IdxList_Real_IdxTable[lv] );
LoadBalance/LB_Init_LoadBalance.cpp:881://                2. This function will also reallocate particle repository by calling amr->Par->InitRepo().
LoadBalance/LB_Init_LoadBalance.cpp:886:// Parameter   :  ParAtt_Old : Pointers for backing up the old particle attribute arrays (amr->Par->Attribute[])
LoadBalance/LB_Init_LoadBalance.cpp:894:// remember to reset Attribute[] to NULL so that amr->Par->InitRepo will NOT delete these arrays
LoadBalance/LB_Init_LoadBalance.cpp:897:      ParAtt_Old         [v] = amr->Par->Attribute[v];
LoadBalance/LB_Init_LoadBalance.cpp:898:      amr->Par->Attribute[v] = NULL;
LoadBalance/LB_Init_LoadBalance.cpp:910:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
LoadBalance/LB_Init_LoadBalance.cpp:912:      LB_Idx            = amr->patch[0][lv][PID]->LB_Idx;
LoadBalance/LB_Init_LoadBalance.cpp:914:      Send_NPar[TRank] += amr->patch[0][lv][PID]->NPar;
LoadBalance/LB_Init_LoadBalance.cpp:923:   amr->Par->InitRepo( Recv_NPar_Sum, MPI_NRank );
LoadBalance/LB_Init_LoadBalance.cpp:928:   amr->Par->NPar_AcPlusInac = 0;
LoadBalance/LB_Init_LoadBalance.cpp:929:   amr->Par->NPar_Active     = 0;
LoadBalance/LB_Init_LoadBalance.cpp:941:// Parameter   :  ParAtt_Old : Pointers for backing up the old particle attribute arrays (amr->Par->Attribute[])
LoadBalance/LB_Init_LoadBalance.cpp:953:   if ( amr->Par->NPar_AcPlusInac != amr->Par->NPar_Active )
LoadBalance/LB_Init_LoadBalance.cpp:955:                 amr->Par->NPar_AcPlusInac, amr->Par->NPar_Active );
LoadBalance/LB_Init_LoadBalance.cpp:958:   for (int lv=0; lv<NLEVEL; lv++)  NPar_Lv_Sum += amr->Par->NPar_Lv[lv];
LoadBalance/LB_Init_LoadBalance.cpp:960:   if ( NPar_Lv_Sum != amr->Par->NPar_Active )
LoadBalance/LB_Init_LoadBalance.cpp:961:      Aux_Error( ERROR_INFO, "NPar_Lv_Sum (%ld) != expect (%ld) !!\n", NPar_Lv_Sum, amr->Par->NPar_Active );
LoadBalance/LB_Init_LoadBalance.cpp:966:   MPI_Reduce( &amr->Par->NPar_Active, &NPar_Active_AllRank_Check, 1, MPI_LONG, MPI_SUM, 0, MPI_COMM_WORLD );
LoadBalance/LB_Init_LoadBalance.cpp:968:   if ( MPI_Rank == 0  &&  NPar_Active_AllRank_Check != amr->Par->NPar_Active_AllRank )
LoadBalance/LB_Init_LoadBalance.cpp:970:                 NPar_Active_AllRank_Check, amr->Par->NPar_Active_AllRank );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:73:   const int SonNReal = amr->NPatchComma[SonLv][1];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:74:   const int SonNBuff = amr->NPatchComma[SonLv][3] - SonNReal;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:75:   const int FaNPatch = amr->num[FaLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:83:   Mis_Matching_int( FaNPatch, amr->LB->PaddedCr1DList[FaLv], NNew_Away, NewCr1D_Away, Match_New );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:84:   Mis_Matching_int( FaNPatch, amr->LB->PaddedCr1DList[FaLv], NDel_Away, DelCr1D_Away, Match_Del );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:94:      DelPID_Away[t] = amr->LB->PaddedCr1DList_IdxTable[FaLv][ Match_Del[t] ];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:105:   const int FSg_Flu    = amr->FluSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:108:   const int FSg_Pot    = amr->PotSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:112:   const int FSg_Mag    = amr->MagSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:148:         NBufBk_Dup += amr->LB->RecvH_NList[SonLv][r];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:150:         NBufBk_Dup += amr->LB->RecvG_NList[SonLv][r];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:161:         for (int t=0; t<amr->LB->RecvH_NList[SonLv][r]; t++)  PID_BufBk[ NBufBk_Dup ++ ] = amr->LB->RecvH_IDList[SonLv][r][t];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:165:         for (int t=0; t<amr->LB->RecvG_NList[SonLv][r]; t++)  PID_BufBk[ NBufBk_Dup ++ ] = amr->LB->RecvG_IDList[SonLv][r][t];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:193:            Aux_SwapPointer( (void**)&amr->patch[FSg_Flu ][SonLv][SonPID]->fluid,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:194:                             (void**)&amr->patch[FSg_Flu2][SonLv][SonPID]->fluid );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:197:            Aux_SwapPointer( (void**)&amr->patch[FSg_Pot ][SonLv][SonPID]->pot,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:198:                             (void**)&amr->patch[FSg_Pot2][SonLv][SonPID]->pot );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:202:            Aux_SwapPointer( (void**)&amr->patch[FSg_Mag ][SonLv][SonPID]->magnetic,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:203:                             (void**)&amr->patch[FSg_Mag2][SonLv][SonPID]->magnetic );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:211:            flu_BufBk[t] = amr->patch[FSg_Flu][SonLv][SonPID]->fluid;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:212:            amr->patch[FSg_Flu][SonLv][SonPID]->fluid    = NULL;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:215:            pot_BufBk[t] = amr->patch[FSg_Pot][SonLv][SonPID]->pot;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:216:            amr->patch[FSg_Pot][SonLv][SonPID]->pot      = NULL;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:220:            mag_BufBk[t] = amr->patch[FSg_Mag][SonLv][SonPID]->magnetic;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:221:            amr->patch[FSg_Mag][SonLv][SonPID]->magnetic = NULL;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:226:         PCr1D_BufBk[t] = amr->patch[0][SonLv][SonPID]->PaddedCr1D;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:234:      for (int SonPID=SonNReal; SonPID<amr->NPatchComma[SonLv][3]; SonPID++)
LoadBalance/LB_Refine_AllocateNewPatch.cpp:239:            const int SibPID = amr->patch[0][SonLv][SonPID]->sibling[s];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:241:            if ( SibPID >= 0 )   amr->patch[0][SonLv][SibPID]->sibling[ MirSib[s] ] = -1;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:245:         amr->patch[0][SonLv][SonPID]->son = -1;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:246:         amr->pdelete( SonLv, SonPID, OPT__REUSE_MEMORY );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:250:      for (int m=2; m<28; m++)   amr->NPatchComma[SonLv][m] = SonNReal;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:253:      amr->LB->PaddedCr1DList         [SonLv] = (ulong*)realloc( amr->LB->PaddedCr1DList         [SonLv],
LoadBalance/LB_Refine_AllocateNewPatch.cpp:255:      amr->LB->PaddedCr1DList_IdxTable[SonLv] = (int*  )realloc( amr->LB->PaddedCr1DList_IdxTable[SonLv],
LoadBalance/LB_Refine_AllocateNewPatch.cpp:259:         amr->LB->PaddedCr1DList[SonLv][SonPID] = amr->patch[0][SonLv][SonPID]->PaddedCr1D;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:261:      Mis_Heapsort( SonNReal, amr->LB->PaddedCr1DList[SonLv], amr->LB->PaddedCr1DList_IdxTable[SonLv] );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:271:   const int BoxNScale_Padded[3] = { amr->BoxScale[0]/PS1 + 2*Padded,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:272:                                     amr->BoxScale[1]/PS1 + 2*Padded,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:273:                                     amr->BoxScale[2]/PS1 + 2*Padded }; //normalized and padded BoxScale
LoadBalance/LB_Refine_AllocateNewPatch.cpp:274:   const int PScale              = PS1*amr->scale[SonLv];  // scale of a single patch at SonLv
LoadBalance/LB_Refine_AllocateNewPatch.cpp:357:      Cr3D_Ptr = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:397:         FaPID    = amr->LB->PaddedCr1DList_IdxTable[FaLv][ Match_New[t] ];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:398:         Cr3D_Ptr = amr->patch[0][FaLv][FaPID]->corner;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:447:   const int SonNReal_New = amr->NPatchComma[SonLv][1];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:450:   if ( SonNReal_New != amr->num[SonLv] )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:451:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][1] (%d) != amr->num[%d] (%d)\" !!\n",
LoadBalance/LB_Refine_AllocateNewPatch.cpp:452:                 SonLv, amr->NPatchComma[SonLv][1], SonLv, amr->num[SonLv] );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:454:   for (int m=2; m<28; m++)   amr->NPatchComma[SonLv][m] = SonNReal_New;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:462:   if ( amr->LB->IdxList_Real         [SonLv] != NULL )  delete [] amr->LB->IdxList_Real         [SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:463:   if ( amr->LB->IdxList_Real_IdxTable[SonLv] != NULL )  delete [] amr->LB->IdxList_Real_IdxTable[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:465:   amr->LB->IdxList_Real         [SonLv] = new long [SonNReal_New];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:466:   amr->LB->IdxList_Real_IdxTable[SonLv] = new int  [SonNReal_New];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:469:      amr->LB->IdxList_Real[SonLv][SonPID] = amr->patch[0][SonLv][SonPID]->LB_Idx;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:471:   Mis_Heapsort( SonNReal_New, amr->LB->IdxList_Real[SonLv], amr->LB->IdxList_Real_IdxTable[SonLv] );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:478:      ulong *TempPaddedCr1D          = new ulong [ amr->num[lv] ];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:479:      int   *TempPaddedCr1D_IdxTable = new  int  [ amr->num[lv] ];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:481:      for (int PID=0; PID<amr->num[lv]; PID++)
LoadBalance/LB_Refine_AllocateNewPatch.cpp:482:         TempPaddedCr1D[PID] = amr->patch[0][lv][PID]->PaddedCr1D;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:484:      Mis_Heapsort( amr->num[lv], TempPaddedCr1D, TempPaddedCr1D_IdxTable );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:486:      for (int t=1; t<amr->num[lv]; t++)
LoadBalance/LB_Refine_AllocateNewPatch.cpp:522:   const int NNew_Buf0 = ( amr->NPatchComma[SonLv][3] - amr->NPatchComma[SonLv][1] ) / 8;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:531:   for (SonPID0=amr->NPatchComma[SonLv][1], Count=0; SonPID0<amr->NPatchComma[SonLv][3]; SonPID0+=8, Count++)
LoadBalance/LB_Refine_AllocateNewPatch.cpp:573:   Mis_Matching_int( amr->num[SonLv], amr->LB->PaddedCr1DList[SonLv], NBufBk, PCr1D_BufBk, Match_BufBk );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:580:         MPID = amr->LB->PaddedCr1DList_IdxTable[SonLv][ Match_BufBk[t] ];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:583:         if ( MPID < amr->NPatchComma[SonLv][1] )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:585:                       MPID, t, Match_BufBk[t], amr->NPatchComma[SonLv][1] );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:596:            Aux_SwapPointer( (void**)&amr->patch[FSg_Flu ][SonLv][     MPID]->fluid,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:597:                             (void**)&amr->patch[FSg_Flu2][SonLv][OldBufPID]->fluid );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:600:            Aux_SwapPointer( (void**)&amr->patch[FSg_Pot ][SonLv][     MPID]->pot,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:601:                             (void**)&amr->patch[FSg_Pot2][SonLv][OldBufPID]->pot );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:605:            Aux_SwapPointer( (void**)&amr->patch[FSg_Mag ][SonLv][     MPID]->magnetic,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:606:                             (void**)&amr->patch[FSg_Mag2][SonLv][OldBufPID]->magnetic );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:611:            if ( OldBufPID < amr->NPatchComma[SonLv][1] )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:613:               amr->patch[FSg_Flu2][SonLv][OldBufPID]->hnew();
LoadBalance/LB_Refine_AllocateNewPatch.cpp:615:               amr->patch[FSg_Pot2][SonLv][OldBufPID]->gnew();
LoadBalance/LB_Refine_AllocateNewPatch.cpp:618:               amr->patch[FSg_Mag2][SonLv][OldBufPID]->mnew();
LoadBalance/LB_Refine_AllocateNewPatch.cpp:629:               amr->patch[FSg_Flu][SonLv][MPID]->fluid = flu_ptr;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:636:               amr->patch[FSg_Pot][SonLv][MPID]->pot = pot_ptr;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:642:               amr->patch[FSg_Mag][SonLv][MPID]->magnetic = mag_ptr;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:719:   const int SonPID0 = amr->num[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:725:   if ( FaPID != -1  &&  amr->patch[0][FaLv][FaPID]->son != -1 )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:727:                 FaLv, FaPID, amr->patch[0][FaLv][FaPID]->son, SonPID0 );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:732:   if ( FaPID != -1 )   amr->patch[0][FaLv][FaPID]->son = SonPID0;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:736:   amr->pnew( SonLv, Cr[0],        Cr[1],        Cr[2],        FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:737:   amr->pnew( SonLv, Cr[0]+PScale, Cr[1],        Cr[2],        FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:738:   amr->pnew( SonLv, Cr[0],        Cr[1]+PScale, Cr[2],        FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:739:   amr->pnew( SonLv, Cr[0],        Cr[1],        Cr[2]+PScale, FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:740:   amr->pnew( SonLv, Cr[0]+PScale, Cr[1]+PScale, Cr[2],        FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:741:   amr->pnew( SonLv, Cr[0],        Cr[1]+PScale, Cr[2]+PScale, FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:742:   amr->pnew( SonLv, Cr[0]+PScale, Cr[1],        Cr[2]+PScale, FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:743:   amr->pnew( SonLv, Cr[0]+PScale, Cr[1]+PScale, Cr[2]+PScale, FaPID, true, true, true );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:745:   amr->NPatchComma[SonLv][1] += 8;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:753:   const int CSg_Flu   = amr->FluSg[ FaLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:754:   const int FSg_Flu   = amr->FluSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:760:   const int CSg_Pot   = amr->PotSg[ FaLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:761:   const int FSg_Pot   = amr->PotSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:770:   const int CSg_Mag     = amr->MagSg[ FaLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:771:   const int FSg_Mag     = amr->MagSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:783:      if ( FaPID >= amr->NPatchComma[FaLv][1]  ||  FaPID == -1 )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:785:                    FaLv, FaPID, amr->NPatchComma[FaLv][1] );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1097:         amr->patch[FSg_Flu][SonLv][SonPID]->fluid[v][k][j][i] = FData_Flu[v][k_in][j_in][i_in];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1107:         amr->patch[FSg_Pot][SonLv][SonPID]->pot[k][j][i] = FData_Pot[k_in][j_in][i_in];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1123:         amr->patch[FSg_Mag][SonLv][SonPID]->magnetic[v][ idx_B_out ++ ] = FData_Mag[v][ idx_B_in ++ ];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1137:         Real      = amr->patch[FSg_Flu][SonLv][SonPID]->fluid[REAL][k][j][i];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1138:         Imag      = amr->patch[FSg_Flu][SonLv][SonPID]->fluid[IMAG][k][j][i];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1140:         Rho_Corr  = amr->patch[FSg_Flu][SonLv][SonPID]->fluid[DENS][k][j][i];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1145:            amr->patch[FSg_Flu][SonLv][SonPID]->fluid[DENS][k][j][i] = (real)0.0;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1151:         amr->patch[FSg_Flu][SonLv][SonPID]->fluid[REAL][k][j][i] *= Rescale;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1152:         amr->patch[FSg_Flu][SonLv][SonPID]->fluid[IMAG][k][j][i] *= Rescale;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1162:   if ( FaPID >= 0  &&  FaPID < amr->NPatchComma[FaLv][1] )    Par_PassParticle2Son_SinglePatch( FaLv, FaPID );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1209:   const int SonPID0    = amr->patch[0][FaLv][FaPID]->son;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1211:   const int OldPID0    = amr->num[SonLv] - 8;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1218:   if ( SonPID0 < 0  ||  SonPID0 >= amr->NPatchComma[SonLv][1] )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1220:                 FaLv, FaPID, amr->NPatchComma[SonLv][1], SonPID0 );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1231:   if ( FaPID >= amr->NPatchComma[FaLv][1]  &&  amr->patch[0][FaLv][FaPID]->NPar > 0 )
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1234:      const int FaNBuff = amr->NPatchComma[FaLv][3] - amr->NPatchComma[FaLv][1];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1249:         SibPID = amr->patch[0][SonLv][SonPID]->sibling[s];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1250:         if ( SibPID >= 0 )   amr->patch[0][SonLv][SibPID]->sibling[ MirSib[s] ] = -1;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1253:      amr->pdelete( SonLv, SonPID, OPT__REUSE_MEMORY );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1257:   amr->NPatchComma[SonLv][1] -= 8;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1260:   amr->patch[0][FaLv][FaPID]->son = -1;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1274:            Aux_SwapPointer( (void**)&amr->patch[Sg][SonLv][OldPID], (void**)&amr->patch[Sg][SonLv][NewPID] );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1282:            const int FSg_Flu2 = 1 - amr->FluSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1283:            Aux_SwapPointer( (void**)&amr->patch[FSg_Flu2][SonLv][OldPID]->fluid,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1284:                             (void**)&amr->patch[FSg_Flu2][SonLv][NewPID]->fluid );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1287:            const int FSg_Pot2 = 1 - amr->PotSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1288:            Aux_SwapPointer( (void**)&amr->patch[FSg_Pot2][SonLv][OldPID]->pot,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1289:                             (void**)&amr->patch[FSg_Pot2][SonLv][NewPID]->pot );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1293:            const int FSg_Mag2 = 1 - amr->MagSg[SonLv];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1294:            Aux_SwapPointer( (void**)&amr->patch[FSg_Mag2][SonLv][OldPID]->magnetic,
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1295:                             (void**)&amr->patch[FSg_Mag2][SonLv][NewPID]->magnetic );
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1300:         OldGraPID0 = amr->patch[0][SonLv][NewPID]->son;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1310:               amr->patch[0][GraLv][OldGraPID]->father = NewPID;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1316:            SibPID = amr->patch[0][SonLv][NewPID]->sibling[s];
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1317:            if ( SibPID >= 0 )   amr->patch[0][SonLv][SibPID]->sibling[ MirSib[s] ] = NewPID;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1322:      OldFaPID = amr->patch[0][SonLv][NewPID0]->father;
LoadBalance/LB_Refine_AllocateNewPatch.cpp:1327:      amr->patch[0][FaLv][OldFaPID]->son = NewPID0;
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:62:   const int FaNReal = amr->NPatchComma[FaLv][1];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:104:      TP = amr->patch[0][FaLv][FaPID];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:121:            if ( LBIdx < amr->LB->CutPoint[SonLv][0] )
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:124:               amr->LB->CutPoint[SonLv][0] = LBIdx - LBIdx%8;
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:127:            else if ( LBIdx >= amr->LB->CutPoint[SonLv][MPI_NRank] )
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:130:               amr->LB->CutPoint[SonLv][MPI_NRank] = LBIdx - LBIdx%8 + 8;
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:136:                          SonLv, LBIdx, amr->LB->CutPoint[SonLv][0], amr->LB->CutPoint[SonLv][MPI_NRank] );
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:147:            const int SibPID    = amr->patch[0][FaLv][FaPID]->sibling[s];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:148:            const int SibSonPID = ( SibPID >= 0 ) ? amr->patch[0][FaLv][SibPID]->son : -1;
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:153:               CFB_SibLBIdx[s] = 8*amr->patch[0][FaLv][SibPID]->LB_Idx; // faster
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:155:               CFB_SibLBIdx[s] = LB_Corner2Index( SonLv, amr->patch[0][FaLv][SibPID]->corner, CHECK_ON );
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:273:   CP_Min_local = amr->LB->CutPoint[SonLv][        0];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:274:   CP_Max_local = amr->LB->CutPoint[SonLv][MPI_NRank];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:276:   MPI_Allreduce( &CP_Min_local, &amr->LB->CutPoint[SonLv][        0], 1, MPI_LONG, MPI_MIN, MPI_COMM_WORLD );
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:277:   MPI_Allreduce( &CP_Max_local, &amr->LB->CutPoint[SonLv][MPI_NRank], 1, MPI_LONG, MPI_MAX, MPI_COMM_WORLD );
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:283:   const int FaSg_Flu = amr->FluSg[FaLv];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:293:   const int FaSg_Pot = amr->PotSg[FaLv];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:305:   const int FaSg_Mag = amr->MagSg[FaLv];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:588:      FaData_Flu[idx_out] = amr->patch[FaSg_Flu][FaLv][FaPID]->fluid[v][k][j][i];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:601:      FaData_Pot[idx_out] = amr->patch[FaSg_Pot][FaLv][FaPID]->pot[k][j][i];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:616:      FaData_MagX[ idx_B_out ++ ] = amr->patch[FaSg_Mag][FaLv][FaPID]->magnetic[MAGX][ idx_B_in ++ ];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:624:      FaData_MagY[ idx_B_out ++ ] = amr->patch[FaSg_Mag][FaLv][FaPID]->magnetic[MAGY][ idx_B_in ++ ];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:632:      FaData_MagZ[ idx_B_out ++ ] = amr->patch[FaSg_Mag][FaLv][FaPID]->magnetic[MAGZ][ idx_B_in ++ ];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:647:   for (int d=0; d<3; d++)    xyz_flu[d] = amr->patch[0][FaLv][FaPID]->EdgeL[d] + (0.5-FaGhost_Flu)*amr->dh[FaLv];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:653:      const int SibPID = amr->patch[0][FaLv][FaPID]->sibling[sib];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:673:            FaData_Flu[idx_out] = amr->patch[FaSg_Flu][FaLv][SibPID]->fluid[v][k_in][j_in][i_in];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:723:                                                   FluVarIdxList, Time[FaLv], amr->dh[FaLv], xyz_flu, _TOTAL, FaLv );
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:744:      const int SibPID = amr->patch[0][FaLv][FaPID]->sibling[sib];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:763:            FaData_Pot[idx_out] = amr->patch[FaSg_Pot][FaLv][SibPID]->pot[k_in][j_in][i_in];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:809:      const int SibPID = amr->patch[0][FaLv][FaPID]->sibling[sib];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:831:               FaData_MagX[ idx_B_out ++ ] = amr->patch[FaSg_Mag][FaLv][SibPID]->magnetic[MAGX][ idx_B_in ++ ];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:845:               FaData_MagY[ idx_B_out ++ ] = amr->patch[FaSg_Mag][FaLv][SibPID]->magnetic[MAGY][ idx_B_in ++ ];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:859:               FaData_MagZ[ idx_B_out ++ ] = amr->patch[FaSg_Mag][FaLv][SibPID]->magnetic[MAGZ][ idx_B_in ++ ];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:893:                  xyz_mag        [d] = amr->patch[0][FaLv][FaPID]->EdgeL[d] + 0.5*amr->dh[FaLv];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:901:                  xyz_mag        [d] = amr->patch[0][FaLv][FaPID]->EdgeL[d] + (0.5-FaGhost_Mag)*amr->dh[FaLv];
LoadBalance/LB_Refine_GetNewRealPatchList.cpp:931:                                                    &v, Time[FaLv], amr->dh[FaLv], xyz_mag, FaLv );
MPI/MPI_ExchangeBoundaryFlag.cpp:32:      MPI_Isend( &amr->ParaVar->BounFlag_NList[lv][ v[s  ] ], 1, MPI_INT, SendTarget[0], 0, MPI_COMM_WORLD, &Req[0] );
MPI/MPI_ExchangeBoundaryFlag.cpp:33:      MPI_Isend( &amr->ParaVar->BounFlag_NList[lv][ v[s+1] ], 1, MPI_INT, SendTarget[1], 1, MPI_COMM_WORLD, &Req[1] );
MPI/MPI_ExchangeBoundaryFlag.cpp:35:      MPI_Irecv( &amr->ParaVar->BuffFlag_NList[lv][ v[s  ] ], 1, MPI_INT, RecvTarget[0], 1, MPI_COMM_WORLD, &Req[2] );
MPI/MPI_ExchangeBoundaryFlag.cpp:36:      MPI_Irecv( &amr->ParaVar->BuffFlag_NList[lv][ v[s+1] ], 1, MPI_INT, RecvTarget[1], 0, MPI_COMM_WORLD, &Req[3] );
MPI/MPI_ExchangeBoundaryFlag.cpp:42:         if ( MPI_SibRank[ v[s+t] ] < 0 )    amr->ParaVar->BuffFlag_NList[lv][ v[s+t] ] = 0;
MPI/MPI_ExchangeBoundaryFlag.cpp:50:      if ( amr->ParaVar->BuffFlag_PosList[lv][s] != NULL )
MPI/MPI_ExchangeBoundaryFlag.cpp:52:         delete [] amr->ParaVar->BuffFlag_PosList[lv][s];
MPI/MPI_ExchangeBoundaryFlag.cpp:53:         amr->ParaVar->BuffFlag_PosList[lv][s] = NULL;
MPI/MPI_ExchangeBoundaryFlag.cpp:56:      amr->ParaVar->BuffFlag_PosList[lv][s] = new int [ amr->ParaVar->BuffFlag_NList[lv][s] ];
MPI/MPI_ExchangeBoundaryFlag.cpp:65:         SendTarget[t] = ( amr->ParaVar->BounFlag_NList[lv][ v[s+t] ] == 0 ) ? MPI_PROC_NULL : MPI_SibRank[ v[s+t] ];
MPI/MPI_ExchangeBoundaryFlag.cpp:66:         RecvTarget[t] = ( amr->ParaVar->BuffFlag_NList[lv][ v[s+t] ] == 0 ) ? MPI_PROC_NULL : MPI_SibRank[ v[s+t] ];
MPI/MPI_ExchangeBoundaryFlag.cpp:69:         if (  amr->ParaVar->BounFlag_NList[lv][ v[s+t] ] != 0  &&  ( SendTarget[t] < 0 || SendTarget[t] >= MPI_NRank )  )
MPI/MPI_ExchangeBoundaryFlag.cpp:71:         if (  amr->ParaVar->BuffFlag_NList[lv][ v[s+t] ] != 0  &&  ( RecvTarget[t] < 0 || RecvTarget[t] >= MPI_NRank )  )
MPI/MPI_ExchangeBoundaryFlag.cpp:76:      MPI_Isend( amr->ParaVar->BounFlag_PosList[lv][ v[s  ] ], amr->ParaVar->BounFlag_NList[lv][ v[s  ] ],
MPI/MPI_ExchangeBoundaryFlag.cpp:78:      MPI_Isend( amr->ParaVar->BounFlag_PosList[lv][ v[s+1] ], amr->ParaVar->BounFlag_NList[lv][ v[s+1] ],
MPI/MPI_ExchangeBoundaryFlag.cpp:81:      MPI_Irecv( amr->ParaVar->BuffFlag_PosList[lv][ v[s  ] ], amr->ParaVar->BuffFlag_NList[lv][ v[s  ] ],
MPI/MPI_ExchangeBoundaryFlag.cpp:83:      MPI_Irecv( amr->ParaVar->BuffFlag_PosList[lv][ v[s+1] ], amr->ParaVar->BuffFlag_NList[lv][ v[s+1] ],
MPI/MPI_ExchangeBoundaryFlag.cpp:94:      if ( amr->ParaVar->BounFlag_PosList[lv][s] != NULL )
MPI/MPI_ExchangeBoundaryFlag.cpp:96:         delete [] amr->ParaVar->BounFlag_PosList[lv][s];
MPI/MPI_ExchangeBoundaryFlag.cpp:97:         amr->ParaVar->BounFlag_PosList[lv][s] = NULL;
MPI/MPI_ExchangeBoundaryFlag.cpp:100:      amr->ParaVar->BounFlag_NList[lv][s] = 0;
Main/InvokeSolver.cpp:71:   if ( TSolver == FLUID_SOLVER  &&  SaveSg_Flu == amr->FluSg[lv] )
Main/InvokeSolver.cpp:72:      Aux_Error( ERROR_INFO, "SaveSg_Flu (%d) == amr->FluSg (%d) in the fluid solver at level %d !!\n",
Main/InvokeSolver.cpp:73:                 SaveSg_Flu, amr->FluSg[lv], lv );
Main/InvokeSolver.cpp:79:   if ( TSolver == FLUID_SOLVER  &&  SaveSg_Mag == amr->MagSg[lv] )
Main/InvokeSolver.cpp:80:      Aux_Error( ERROR_INFO, "SaveSg_Mag (%d) == amr->MagSg (%d) in the fluid solver at level %d !!\n",
Main/InvokeSolver.cpp:81:                 SaveSg_Mag, amr->MagSg[lv], lv );
Main/InvokeSolver.cpp:152:            NTotal    = amr->LB->OverlapMPI_FluSyncN   [lv];
Main/InvokeSolver.cpp:153:            PID0_List = amr->LB->OverlapMPI_FluSyncPID0[lv];
Main/InvokeSolver.cpp:157:            NTotal    = amr->LB->OverlapMPI_FluAsyncN   [lv];
Main/InvokeSolver.cpp:158:            PID0_List = amr->LB->OverlapMPI_FluAsyncPID0[lv];
Main/InvokeSolver.cpp:167:            NTotal    = amr->LB->OverlapMPI_PotSyncN   [lv];
Main/InvokeSolver.cpp:168:            PID0_List = amr->LB->OverlapMPI_PotSyncPID0[lv];
Main/InvokeSolver.cpp:172:            NTotal    = amr->LB->OverlapMPI_PotAsyncN   [lv];
Main/InvokeSolver.cpp:173:            PID0_List = amr->LB->OverlapMPI_PotAsyncPID0[lv];
Main/InvokeSolver.cpp:190:      NTotal       = amr->NPatchComma[lv][1] / 8;
Main/InvokeSolver.cpp:447:   const double dh = amr->dh[lv];
Main/InvokeSolver.cpp:525:                                   NEWTON_G*SQR(JEANS_MIN_PRES_NCELL*amr->dh[JEANS_MIN_PRES_LEVEL])/(GAMMA*M_PI) : NULL_REAL;
Main/InterpolateGhostZone.cpp:187:   const double dh                 = amr->dh[lv];
Main/InterpolateGhostZone.cpp:256:      const int Sg0 = amr->FluSg[lv];
Main/InterpolateGhostZone.cpp:257:      SetTempIntPara( lv, Sg0, PrepTime, amr->FluSgTime[lv][Sg0], amr->FluSgTime[lv][1-Sg0],
Main/InterpolateGhostZone.cpp:263:                    lv, PrepTime, amr->FluSgTime[lv][0], amr->FluSgTime[lv][1] );
Main/InterpolateGhostZone.cpp:275:      const int Sg0 = amr->MagSg[lv];
Main/InterpolateGhostZone.cpp:276:      SetTempIntPara( lv, Sg0, PrepTime, amr->MagSgTime[lv][Sg0], amr->MagSgTime[lv][1-Sg0],
Main/InterpolateGhostZone.cpp:282:                    lv, PrepTime, amr->MagSgTime[lv][0], amr->MagSgTime[lv][1] );
Main/InterpolateGhostZone.cpp:294:      const int Sg0 = amr->PotSg[lv];
Main/InterpolateGhostZone.cpp:295:      SetTempIntPara( lv, Sg0, PrepTime, amr->PotSgTime[lv][Sg0], amr->PotSgTime[lv][1-Sg0],
Main/InterpolateGhostZone.cpp:301:                    lv, PrepTime, amr->PotSgTime[lv][0], amr->PotSgTime[lv][1] );
Main/InterpolateGhostZone.cpp:317:      xyz_flu[d] = TABLE_01( FSide, 'x'+d, amr->patch[0][lv][PID]->EdgeL[d] + (0.5+PS1-CGrid_CC_PID)*dh,
Main/InterpolateGhostZone.cpp:318:                                           amr->patch[0][lv][PID]->EdgeL[d] + (0.5-CGhost_CC)*dh,
Main/InterpolateGhostZone.cpp:319:                                           amr->patch[0][lv][PID]->EdgeL[d] + (0.5-CGhost_CC)*dh );
Main/InterpolateGhostZone.cpp:335:         CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][PID]->fluid[TVarCCIdx_Flu][k1][j1][i1];
Main/InterpolateGhostZone.cpp:345:                             + FluWeighting_IntT*amr->patch[FluSg_IntT][lv][PID]->fluid[TVarCCIdx_Flu][k1][j1][i1];
Main/InterpolateGhostZone.cpp:362:         CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][PID]->fluid[MOMX][k1][j1][i1] /
Main/InterpolateGhostZone.cpp:363:                             amr->patch[FluSg][lv][PID]->fluid[DENS][k1][j1][i1];
Main/InterpolateGhostZone.cpp:367:                             + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][PID]->fluid[MOMX][k1][j1][i1] /
Main/InterpolateGhostZone.cpp:368:                                                   amr->patch[FluSg_IntT][lv][PID]->fluid[DENS][k1][j1][i1] );
Main/InterpolateGhostZone.cpp:382:         CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][PID]->fluid[MOMY][k1][j1][i1] /
Main/InterpolateGhostZone.cpp:383:                             amr->patch[FluSg][lv][PID]->fluid[DENS][k1][j1][i1];
Main/InterpolateGhostZone.cpp:387:                             + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][PID]->fluid[MOMY][k1][j1][i1] /
Main/InterpolateGhostZone.cpp:388:                                                   amr->patch[FluSg_IntT][lv][PID]->fluid[DENS][k1][j1][i1] );
Main/InterpolateGhostZone.cpp:402:         CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][PID]->fluid[MOMZ][k1][j1][i1] /
Main/InterpolateGhostZone.cpp:403:                             amr->patch[FluSg][lv][PID]->fluid[DENS][k1][j1][i1];
Main/InterpolateGhostZone.cpp:407:                             + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][PID]->fluid[MOMZ][k1][j1][i1] /
Main/InterpolateGhostZone.cpp:408:                                                   amr->patch[FluSg_IntT][lv][PID]->fluid[DENS][k1][j1][i1] );
Main/InterpolateGhostZone.cpp:422:         for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][PID]->fluid[v][k1][j1][i1];
Main/InterpolateGhostZone.cpp:437:            for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][PID]->fluid[v][k1][j1][i1];
Main/InterpolateGhostZone.cpp:466:         for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][PID]->fluid[v][k1][j1][i1];
Main/InterpolateGhostZone.cpp:481:            for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][PID]->fluid[v][k1][j1][i1];
Main/InterpolateGhostZone.cpp:510:         for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][PID]->fluid[v][k1][j1][i1];
Main/InterpolateGhostZone.cpp:525:            for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][PID]->fluid[v][k1][j1][i1];
Main/InterpolateGhostZone.cpp:624:         CData_CC_Ptr[Idx] = amr->patch[PotSg][lv][PID]->pot[k1][j1][i1];
Main/InterpolateGhostZone.cpp:628:                             + PotWeighting_IntT*amr->patch[PotSg_IntT][lv][PID]->pot[k1][j1][i1];
Main/InterpolateGhostZone.cpp:681:         CData_FC[v][idx_o] = amr->patch[MagSg][lv][PID]->magnetic[TVarFCIdx][idx_i];
Main/InterpolateGhostZone.cpp:685:                              + MagWeighting_IntT*amr->patch[MagSg_IntT][lv][PID]->magnetic[TVarFCIdx][idx_i];
Main/InterpolateGhostZone.cpp:705:      SibPID = amr->patch[0][lv][PID]->sibling[CSide];
Main/InterpolateGhostZone.cpp:730:               CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][SibPID]->fluid[TVarCCIdx_Flu][k2][j2][i2];
Main/InterpolateGhostZone.cpp:740:                                   + FluWeighting_IntT*amr->patch[FluSg_IntT][lv][SibPID]->fluid[TVarCCIdx_Flu][k2][j2][i2];
Main/InterpolateGhostZone.cpp:758:               CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][SibPID]->fluid[MOMX][k2][j2][i2] /
Main/InterpolateGhostZone.cpp:759:                                   amr->patch[FluSg][lv][SibPID]->fluid[DENS][k2][j2][i2];
Main/InterpolateGhostZone.cpp:763:                                   + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][SibPID]->fluid[MOMX][k2][j2][i2] /
Main/InterpolateGhostZone.cpp:764:                                                         amr->patch[FluSg_IntT][lv][SibPID]->fluid[DENS][k2][j2][i2] );
Main/InterpolateGhostZone.cpp:778:               CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][SibPID]->fluid[MOMY][k2][j2][i2] /
Main/InterpolateGhostZone.cpp:779:                                   amr->patch[FluSg][lv][SibPID]->fluid[DENS][k2][j2][i2];
Main/InterpolateGhostZone.cpp:783:                                   + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][SibPID]->fluid[MOMY][k2][j2][i2] /
Main/InterpolateGhostZone.cpp:784:                                                         amr->patch[FluSg_IntT][lv][SibPID]->fluid[DENS][k2][j2][i2] );
Main/InterpolateGhostZone.cpp:798:               CData_CC_Ptr[Idx] = amr->patch[FluSg][lv][SibPID]->fluid[MOMZ][k2][j2][i2] /
Main/InterpolateGhostZone.cpp:799:                                   amr->patch[FluSg][lv][SibPID]->fluid[DENS][k2][j2][i2];
Main/InterpolateGhostZone.cpp:803:                                   + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][SibPID]->fluid[MOMZ][k2][j2][i2] /
Main/InterpolateGhostZone.cpp:804:                                                         amr->patch[FluSg_IntT][lv][SibPID]->fluid[DENS][k2][j2][i2] );
Main/InterpolateGhostZone.cpp:818:               for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][SibPID]->fluid[v][k2][j2][i2];
Main/InterpolateGhostZone.cpp:833:                  for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[v][k2][j2][i2];
Main/InterpolateGhostZone.cpp:862:               for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][SibPID]->fluid[v][k2][j2][i2];
Main/InterpolateGhostZone.cpp:877:                  for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[v][k2][j2][i2];
Main/InterpolateGhostZone.cpp:906:               for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][SibPID]->fluid[v][k2][j2][i2];
Main/InterpolateGhostZone.cpp:921:                  for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[v][k2][j2][i2];
Main/InterpolateGhostZone.cpp:1020:               CData_CC_Ptr[Idx] = amr->patch[PotSg][lv][SibPID]->pot[k2][j2][i2];
Main/InterpolateGhostZone.cpp:1024:                                   + PotWeighting_IntT*amr->patch[PotSg_IntT][lv][SibPID]->pot[k2][j2][i2];
Main/InterpolateGhostZone.cpp:1084:               CData_FC[v][idx_o] = amr->patch[MagSg][lv][SibPID]->magnetic[TVarFCIdx][idx_i];
Main/InterpolateGhostZone.cpp:1088:                                    + MagWeighting_IntT*amr->patch[MagSg_IntT][lv][SibPID]->magnetic[TVarFCIdx][idx_i];
Main/InterpolateGhostZone.cpp:1209:                  xyz_mag        [d] = TABLE_01( FSide, 'x'+d, amr->patch[0][lv][PID]->EdgeL[d] + (0.5+PS1-GhostSize_Padded_2)*dh,
Main/InterpolateGhostZone.cpp:1210:                                                               amr->patch[0][lv][PID]->EdgeL[d] + 0.5*dh,
Main/InterpolateGhostZone.cpp:1211:                                                               amr->patch[0][lv][PID]->EdgeL[d] + 0.5*dh );
Main/InterpolateGhostZone.cpp:1220:                  xyz_mag        [d] = TABLE_01( FSide, 'x'+d, amr->patch[0][lv][PID]->EdgeL[d] + (0.5+PS1-CGrid_FC_PID)*dh,
Main/InterpolateGhostZone.cpp:1221:                                                               amr->patch[0][lv][PID]->EdgeL[d] + (0.5-CGhost_FC)*dh,
Main/InterpolateGhostZone.cpp:1222:                                                               amr->patch[0][lv][PID]->EdgeL[d] + (0.5-CGhost_FC)*dh );
Main/InterpolateGhostZone.cpp:1447:               CData_CC_Ptr[Idx] = amr->patch[FluSg_IntT][lv][PID]->fluid[TVarCCIdx_Flu][k1][j1][i1];
Main/InterpolateGhostZone.cpp:1461:            SibPID = amr->patch[0][lv][PID]->sibling[CSide];
Main/InterpolateGhostZone.cpp:1484:                     CData_CC_Ptr[Idx] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[TVarCCIdx_Flu][k2][j2][i2];
Main/Prepare_PatchData.cpp:74://                   --> amr->patch[0][lv][PID]->rho_ext
Main/Prepare_PatchData.cpp:293:      if ( GhostSize > PS1 - amr->Par->GhostSize )
Main/Prepare_PatchData.cpp:295:                    GhostSize, PS1 - amr->Par->GhostSize );
Main/Prepare_PatchData.cpp:317:      if ( PID0_List[TID] < 0  ||  PID0_List[TID] >= amr->NPatchComma[lv][1] )
Main/Prepare_PatchData.cpp:318:         Aux_Error( ERROR_INFO, "incorrect target PID %d (NReal = %d) !!\n", PID0_List[TID], amr->NPatchComma[lv][1] );
Main/Prepare_PatchData.cpp:331:   const double dh               = amr->dh[lv];
Main/Prepare_PatchData.cpp:481:      const int Sg0 = amr->FluSg[lv];
Main/Prepare_PatchData.cpp:482:      SetTempIntPara( lv, Sg0, PrepTime, amr->FluSgTime[lv][Sg0], amr->FluSgTime[lv][1-Sg0],
Main/Prepare_PatchData.cpp:486://           amr->FluSgTime[lv][0] or amr->FluSgTime[lv][1]
Main/Prepare_PatchData.cpp:490:                      lv, PrepTime, amr->FluSgTime[lv][0], amr->FluSgTime[lv][1] );
Main/Prepare_PatchData.cpp:502:      const int Sg0 = amr->MagSg[lv];
Main/Prepare_PatchData.cpp:503:      SetTempIntPara( lv, Sg0, PrepTime, amr->MagSgTime[lv][Sg0], amr->MagSgTime[lv][1-Sg0],
Main/Prepare_PatchData.cpp:507://           amr->MagSgTime[lv][0] or amr->MagSgTime[lv][1]
Main/Prepare_PatchData.cpp:511:                      lv, PrepTime, amr->MagSgTime[lv][0], amr->MagSgTime[lv][1] );
Main/Prepare_PatchData.cpp:523:      const int Sg0 = amr->PotSg[lv];
Main/Prepare_PatchData.cpp:524:      SetTempIntPara( lv, Sg0, PrepTime, amr->PotSgTime[lv][Sg0], amr->PotSgTime[lv][1-Sg0],
Main/Prepare_PatchData.cpp:528://           amr->PotSgTime[lv][0] or amr->PotSgTime[lv][1]
Main/Prepare_PatchData.cpp:532:      if ( amr->Par->ImproveAcc )
Main/Prepare_PatchData.cpp:537:                      lv, PrepTime, amr->PotSgTime[lv][0], amr->PotSgTime[lv][1] );
Main/Prepare_PatchData.cpp:595:         if ( amr->Par->GhostSize > 0  ||  GhostSize > 0  ||  amr->Par->PredictPos )
Main/Prepare_PatchData.cpp:622:            if ( amr->patch[0][lv][PID]->son == -1  &&  PID < amr->NPatchComma[lv][1] )
Main/Prepare_PatchData.cpp:623:               NPar = amr->patch[0][lv][PID]->NPar;
Main/Prepare_PatchData.cpp:625:               NPar = amr->patch[0][lv][PID]->NPar_Copy;
Main/Prepare_PatchData.cpp:633:            if (  ( amr->patch[0][lv][PID]->rho_ext == NULL ||
Main/Prepare_PatchData.cpp:634:                    amr->patch[0][lv][PID]->rho_ext[0][0][0] == RHO_EXT_NEED_INIT )  &&  NPar > 0  )
Main/Prepare_PatchData.cpp:665:         if ( amr->patch[0][lv][TPID]->rho_ext == NULL )    amr->patch[0][lv][TPID]->dnew();
Main/Prepare_PatchData.cpp:716:                                   !Mis_CompareRealValue( PrepTime, amr->FluSgTime[lv-1][  amr->FluSg[lv-1]], NULL, false )  &&
Main/Prepare_PatchData.cpp:717:                                   !Mis_CompareRealValue( PrepTime, amr->FluSgTime[lv-1][1-amr->FluSg[lv-1]], NULL, false )  )
Main/Prepare_PatchData.cpp:741:            if ( amr->patch[0][lv][PID]->rho_ext == NULL  ||
Main/Prepare_PatchData.cpp:742:                 amr->patch[0][lv][PID]->rho_ext[0][0][0] != RHO_EXT_NEED_INIT )
Main/Prepare_PatchData.cpp:747:            if ( amr->patch[0][lv][PID]->son == -1  &&  PID < amr->NPatchComma[lv][1] )
Main/Prepare_PatchData.cpp:749:               NPar            = amr->patch[0][lv][PID]->NPar;
Main/Prepare_PatchData.cpp:750:               ParList         = amr->patch[0][lv][PID]->ParList;
Main/Prepare_PatchData.cpp:755:               if ( amr->patch[0][lv][PID]->NPar_Copy != -1 )
Main/Prepare_PatchData.cpp:757:                             lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Main/Prepare_PatchData.cpp:763://             note that amr->patch[0][lv][PID]->NPar>0 is still possible
Main/Prepare_PatchData.cpp:764:               NPar            = amr->patch[0][lv][PID]->NPar_Copy;
Main/Prepare_PatchData.cpp:768:               InputMassPos    = amr->patch[0][lv][PID]->ParAtt_Copy;
Main/Prepare_PatchData.cpp:770:               ParList         = amr->patch[0][lv][PID]->ParList_Copy;
Main/Prepare_PatchData.cpp:799:            for (int d=0; d<3; d++)    EdgeL[d] = amr->patch[0][lv][PID]->EdgeL[d] - RhoExtGhostPhySize;
Main/Prepare_PatchData.cpp:805://              (2) amr->patch[0][lv][PID]->EdgeL/R already assumes periodicity for external buffer patches
Main/Prepare_PatchData.cpp:808:            Par_MassAssignment( ParList, NPar, amr->Par->Interp, amr->patch[0][lv][PID]->rho_ext[0][0], RHOEXT_NXT,
Main/Prepare_PatchData.cpp:809:                                EdgeL, dh, (amr->Par->PredictPos && !UseInputMassPos), PrepTime, InitZero_Yes,
Main/Prepare_PatchData.cpp:828:         if ( PID0 < 0  ||  PID0 >= amr->num[lv] )
Main/Prepare_PatchData.cpp:829:            Aux_Error( ERROR_INFO, "PID0 (%d) is not within the correct range [%d ... %d] !!\n", PID0, 0, amr->num[lv]-1 );
Main/Prepare_PatchData.cpp:835:         for (int d=0; d<3; d++)    xyz0[d] = amr->patch[0][lv][PID0]->EdgeL[d] + (0.5-GhostSize)*dh;
Main/Prepare_PatchData.cpp:867:                  Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][PID]->fluid[TVarCCIdx_Flu][k][j][i];
Main/Prepare_PatchData.cpp:871:                                         + FluWeighting_IntT*amr->patch[FluSg_IntT][lv][PID]->fluid[TVarCCIdx_Flu][k][j][i];
Main/Prepare_PatchData.cpp:888:                  Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][PID]->fluid[MOMX][k][j][i] /
Main/Prepare_PatchData.cpp:889:                                         amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i];
Main/Prepare_PatchData.cpp:893:                                         + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][PID]->fluid[MOMX][k][j][i] /
Main/Prepare_PatchData.cpp:894:                                                               amr->patch[FluSg_IntT][lv][PID]->fluid[DENS][k][j][i] );
Main/Prepare_PatchData.cpp:908:                  Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][PID]->fluid[MOMY][k][j][i] /
Main/Prepare_PatchData.cpp:909:                                         amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i];
Main/Prepare_PatchData.cpp:913:                                         + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][PID]->fluid[MOMY][k][j][i] /
Main/Prepare_PatchData.cpp:914:                                                               amr->patch[FluSg_IntT][lv][PID]->fluid[DENS][k][j][i] );
Main/Prepare_PatchData.cpp:928:                  Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][PID]->fluid[MOMZ][k][j][i] /
Main/Prepare_PatchData.cpp:929:                                         amr->patch[FluSg][lv][PID]->fluid[DENS][k][j][i];
Main/Prepare_PatchData.cpp:933:                                         + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][PID]->fluid[MOMZ][k][j][i] /
Main/Prepare_PatchData.cpp:934:                                                               amr->patch[FluSg_IntT][lv][PID]->fluid[DENS][k][j][i] );
Main/Prepare_PatchData.cpp:948:                  for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][PID]->fluid[v][k][j][i];
Main/Prepare_PatchData.cpp:963:                     for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][PID]->fluid[v][k][j][i];
Main/Prepare_PatchData.cpp:992:                  for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][PID]->fluid[v][k][j][i];
Main/Prepare_PatchData.cpp:1007:                     for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][PID]->fluid[v][k][j][i];
Main/Prepare_PatchData.cpp:1036:                  for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][PID]->fluid[v][k][j][i];
Main/Prepare_PatchData.cpp:1051:                     for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][PID]->fluid[v][k][j][i];
Main/Prepare_PatchData.cpp:1150:                  Data1PG_CC_Ptr[Idx1] = amr->patch[PotSg][lv][PID]->pot[k][j][i];
Main/Prepare_PatchData.cpp:1154:                                         + PotWeighting_IntT*amr->patch[PotSg_IntT][lv][PID]->pot[k][j][i];
Main/Prepare_PatchData.cpp:1203:                  Data1PG_FC_Ptr[idx_o] = amr->patch[MagSg][lv][PID]->magnetic[TVarFCIdx][idx_i];
Main/Prepare_PatchData.cpp:1207:                                          + MagWeighting_IntT*amr->patch[MagSg_IntT][lv][PID]->magnetic[TVarFCIdx][idx_i];
Main/Prepare_PatchData.cpp:1265:                        Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][SibPID]->fluid[TVarCCIdx_Flu][K2][J2][I2];
Main/Prepare_PatchData.cpp:1270:                         + FluWeighting_IntT*amr->patch[FluSg_IntT][lv][SibPID]->fluid[TVarCCIdx_Flu][K2][J2][I2];
Main/Prepare_PatchData.cpp:1288:                        Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][SibPID]->fluid[MOMX][K2][J2][I2] /
Main/Prepare_PatchData.cpp:1289:                                               amr->patch[FluSg][lv][SibPID]->fluid[DENS][K2][J2][I2];
Main/Prepare_PatchData.cpp:1293:                                               + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][SibPID]->fluid[MOMX][K2][J2][I2] /
Main/Prepare_PatchData.cpp:1294:                                                                     amr->patch[FluSg_IntT][lv][SibPID]->fluid[DENS][K2][J2][I2] );
Main/Prepare_PatchData.cpp:1308:                        Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][SibPID]->fluid[MOMY][K2][J2][I2] /
Main/Prepare_PatchData.cpp:1309:                                               amr->patch[FluSg][lv][SibPID]->fluid[DENS][K2][J2][I2];
Main/Prepare_PatchData.cpp:1313:                                               + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][SibPID]->fluid[MOMY][K2][J2][I2] /
Main/Prepare_PatchData.cpp:1314:                                                                     amr->patch[FluSg_IntT][lv][SibPID]->fluid[DENS][K2][J2][I2] );
Main/Prepare_PatchData.cpp:1328:                        Data1PG_CC_Ptr[Idx1] = amr->patch[FluSg][lv][SibPID]->fluid[MOMZ][K2][J2][I2] /
Main/Prepare_PatchData.cpp:1329:                                               amr->patch[FluSg][lv][SibPID]->fluid[DENS][K2][J2][I2];
Main/Prepare_PatchData.cpp:1333:                                               + FluWeighting_IntT*( amr->patch[FluSg_IntT][lv][SibPID]->fluid[MOMZ][K2][J2][I2] /
Main/Prepare_PatchData.cpp:1334:                                                                     amr->patch[FluSg_IntT][lv][SibPID]->fluid[DENS][K2][J2][I2] );
Main/Prepare_PatchData.cpp:1348:                        for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][SibPID]->fluid[v][K2][J2][I2];
Main/Prepare_PatchData.cpp:1363:                           for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[v][K2][J2][I2];
Main/Prepare_PatchData.cpp:1392:                        for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][SibPID]->fluid[v][K2][J2][I2];
Main/Prepare_PatchData.cpp:1407:                           for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[v][K2][J2][I2];
Main/Prepare_PatchData.cpp:1436:                        for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg][lv][SibPID]->fluid[v][K2][J2][I2];
Main/Prepare_PatchData.cpp:1451:                           for (int v=0; v<NFluForEoS; v++)    FluidForEoS[v] = amr->patch[FluSg_IntT][lv][SibPID]->fluid[v][K2][J2][I2];
Main/Prepare_PatchData.cpp:1549:                        Data1PG_CC_Ptr[Idx1] = amr->patch[PotSg][lv][SibPID]->pot[K2][J2][I2];
Main/Prepare_PatchData.cpp:1553:                                               + PotWeighting_IntT*amr->patch[PotSg_IntT][lv][SibPID]->pot[K2][J2][I2];
Main/Prepare_PatchData.cpp:1608:                        Data1PG_FC_Ptr[idx_o] = amr->patch[MagSg][lv][SibPID]->magnetic[TVarFCIdx][idx_i];
Main/Prepare_PatchData.cpp:1613:                         + MagWeighting_IntT*amr->patch[MagSg_IntT][lv][SibPID]->magnetic[TVarFCIdx][idx_i];
Main/Prepare_PatchData.cpp:1660:               const int FaPID    = amr->patch[0][lv][PID0]->father;
Main/Prepare_PatchData.cpp:1661:               const int FaSibPID = amr->patch[0][lv-1][FaPID]->sibling[Side];
Main/Prepare_PatchData.cpp:1947:               if ( amr->patch[0][lv][PID]->rho_ext == NULL  ||
Main/Prepare_PatchData.cpp:1948:                    amr->patch[0][lv][PID]->rho_ext[0][0][0] == RHO_EXT_NEED_INIT )    continue;
Main/Prepare_PatchData.cpp:1968:                  ArrayDens[ Idx1 ++ ] += amr->patch[0][lv][PID]->rho_ext[k][j][i];
Main/Prepare_PatchData.cpp:1975:            if ( amr->Par->GhostSize > 0  ||  GhostSize > 0  ||  amr->Par->PredictPos )
Main/Prepare_PatchData.cpp:1997:                     if ( amr->patch[0][lv][SibPID]->rho_ext == NULL  ||
Main/Prepare_PatchData.cpp:1998:                          amr->patch[0][lv][SibPID]->rho_ext[0][0][0] == RHO_EXT_NEED_INIT )    continue;
Main/Prepare_PatchData.cpp:2018:                        ArrayDens[ Idx1 ++ ] += amr->patch[0][lv][SibPID]->rho_ext[k][j][i];
Main/Prepare_PatchData.cpp:2033:                  const int    FaPID    = amr->patch[0][lv][PID0]->father;
Main/Prepare_PatchData.cpp:2034:                  const int    FaSibPID = amr->patch[0][lv-1][FaPID]->sibling[Side];
Main/Prepare_PatchData.cpp:2035:                  const double EdgeL[3] = { amr->patch[0][lv][PID0]->EdgeL[0] - GhostSize*dh,
Main/Prepare_PatchData.cpp:2036:                                            amr->patch[0][lv][PID0]->EdgeL[1] - GhostSize*dh,
Main/Prepare_PatchData.cpp:2037:                                            amr->patch[0][lv][PID0]->EdgeL[2] - GhostSize*dh };
Main/Prepare_PatchData.cpp:2047:                  if ( amr->patch[0][lv-1][FaSibPID]->son != -1 )
Main/Prepare_PatchData.cpp:2049:                                amr->patch[0][lv-1][FaSibPID]->son, lv, PID0, FaPID, FaSibPID, Side );
Main/Prepare_PatchData.cpp:2053:                  if ( FaSibPID < amr->NPatchComma[lv-1][1] )
Main/Prepare_PatchData.cpp:2055:                     NPar            = amr->patch[0][lv-1][FaSibPID]->NPar;
Main/Prepare_PatchData.cpp:2056:                     ParList         = amr->patch[0][lv-1][FaSibPID]->ParList;
Main/Prepare_PatchData.cpp:2064:                     NPar            = amr->patch[0][lv-1][FaSibPID]->NPar_Copy;
Main/Prepare_PatchData.cpp:2067:                     InputMassPos    = amr->patch[0][lv-1][FaSibPID]->ParAtt_Copy;
Main/Prepare_PatchData.cpp:2070:                                FaSibPID, amr->NPatchComma[lv-1][1] );
Main/Prepare_PatchData.cpp:2101:                  Par_MassAssignment( ParList, NPar, amr->Par->Interp, ArrayDens, PGSize1D_CC, EdgeL, dh,
Main/Prepare_PatchData.cpp:2102:                                      (amr->Par->PredictPos && !UseInputMassPos), PrepTime, InitZero_No,
Main/Prepare_PatchData.cpp:2106:            } // for (int Side=0; Side<26; Side++) if ( amr->Par->GhostSize > 0  ||  GhostSize > 0 )
Main/Prepare_PatchData.cpp:2550:         Sib = amr->patch[0][lv][PID  ]->sibling[0];
Main/Prepare_PatchData.cpp:2555:         Sib = amr->patch[0][lv][PID+1]->sibling[1];
Main/Prepare_PatchData.cpp:2560:         Sib = amr->patch[0][lv][PID  ]->sibling[2];
Main/Prepare_PatchData.cpp:2565:         Sib = amr->patch[0][lv][PID+2]->sibling[3];
Main/Prepare_PatchData.cpp:2570:         Sib = amr->patch[0][lv][PID  ]->sibling[4];
Main/Prepare_PatchData.cpp:2575:         Sib = amr->patch[0][lv][PID+3]->sibling[5];
Main/Prepare_PatchData.cpp:2580:         Sib = amr->patch[0][lv][PID  ]->sibling[6];
Main/Prepare_PatchData.cpp:2585:         Sib = amr->patch[0][lv][PID+1]->sibling[7];
Main/Prepare_PatchData.cpp:2590:         Sib = amr->patch[0][lv][PID+2]->sibling[8];
Main/Prepare_PatchData.cpp:2595:         Sib = amr->patch[0][lv][PID+4]->sibling[9];
Main/Prepare_PatchData.cpp:2600:         Sib = amr->patch[0][lv][PID  ]->sibling[10];
Main/Prepare_PatchData.cpp:2605:         Sib = amr->patch[0][lv][PID+2]->sibling[11];
Main/Prepare_PatchData.cpp:2610:         Sib = amr->patch[0][lv][PID+3]->sibling[12];
Main/Prepare_PatchData.cpp:2615:         Sib = amr->patch[0][lv][PID+5]->sibling[13];
Main/Prepare_PatchData.cpp:2620:         Sib = amr->patch[0][lv][PID  ]->sibling[14];
Main/Prepare_PatchData.cpp:2625:         Sib = amr->patch[0][lv][PID+3]->sibling[15];
Main/Prepare_PatchData.cpp:2630:         Sib = amr->patch[0][lv][PID+1]->sibling[16];
Main/Prepare_PatchData.cpp:2635:         Sib = amr->patch[0][lv][PID+6]->sibling[17];
Main/Prepare_PatchData.cpp:2640:         Sib = amr->patch[0][lv][PID  ]->sibling[18];
Main/Prepare_PatchData.cpp:2645:         Sib = amr->patch[0][lv][PID+1]->sibling[19];
Main/Prepare_PatchData.cpp:2650:         Sib = amr->patch[0][lv][PID+2]->sibling[20];
Main/Prepare_PatchData.cpp:2655:         Sib = amr->patch[0][lv][PID+4]->sibling[21];
Main/Prepare_PatchData.cpp:2660:         Sib = amr->patch[0][lv][PID+3]->sibling[22];
Main/Prepare_PatchData.cpp:2665:         Sib = amr->patch[0][lv][PID+6]->sibling[23];
Main/Prepare_PatchData.cpp:2670:         Sib = amr->patch[0][lv][PID+5]->sibling[24];
Main/Prepare_PatchData.cpp:2675:         Sib = amr->patch[0][lv][PID+7]->sibling[25];
Main/Prepare_PatchData.cpp:3050:   for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Main/Prepare_PatchData.cpp:3052:      if ( amr->patch[0][lv][PID]->rho_ext != NULL )
Main/Prepare_PatchData.cpp:3053:         amr->patch[0][lv][PID]->rho_ext[0][0][0] = RHO_EXT_NEED_INIT;
Main/Prepare_PatchData.cpp:3078:   for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Main/Prepare_PatchData.cpp:3080:      if ( amr->patch[0][lv][PID]->rho_ext != NULL )
Main/Prepare_PatchData.cpp:3082:         delete [] amr->patch[0][lv][PID]->rho_ext;
Main/Prepare_PatchData.cpp:3084:         amr->patch[0][lv][PID]->rho_ext = NULL;
Main/Prepare_PatchData.cpp:3142:   const int FaPID            = amr->patch[0][lv][PID0]->father;
Main/Prepare_PatchData.cpp:3143:   const int FaSibPID         = amr->patch[0][lv-1][FaPID]->sibling[Side];
Main/Prepare_PatchData.cpp:3159:   if ( amr->patch[0][lv-1][FaSibPID]->son != -1 )
Main/Prepare_PatchData.cpp:3161:                 amr->patch[0][lv-1][FaSibPID]->son, lv, FaSibPID );
Main/Prepare_PatchData.cpp:3176:      FaSibSibPID = amr->patch[0][lv-1][FaSibPID]->sibling[f];
Main/Prepare_PatchData.cpp:3186:      if ( FaSibSibPID >= 0  &&  amr->patch[0][lv-1][FaSibSibPID]->son != -1 )
Main/Prepare_PatchData.cpp:3200:               if ( amr->patch[0][lv-1][FaPID]->sibling[s] == FaSibSibPID )
Main/Prepare_PatchData.cpp:3319://             note that we should not get SibPID0 by amr->patch[0][lv-1][FaSibSibPID]->son
Main/Prepare_PatchData.cpp:3345:                  FInt_Ptr[f][idx_o] = amr->patch[MagSg][lv][SibPID]->magnetic[norm_dir][idx_i];
Main/Prepare_PatchData.cpp:3350:                   + MagWeighting_IntT*amr->patch[MagSg_IntT][lv][SibPID]->magnetic[norm_dir][idx_i];
Main/EvolveLevel.cpp:71:      for (int TLv=0; TLv<NLEVEL; TLv++)  amr->NUpdateLv[TLv] = 0; }
Main/EvolveLevel.cpp:81:   while (  ( lv == 0 && amr->NUpdateLv[lv] == 0 )  ||
Main/EvolveLevel.cpp:150:      const int SaveSg_Flu = 1 - amr->FluSg[lv];
Main/EvolveLevel.cpp:152:      const int SaveSg_Mag = 1 - amr->MagSg[lv];
Main/EvolveLevel.cpp:309:      amr->FluSg    [lv]             = SaveSg_Flu;
Main/EvolveLevel.cpp:310:      amr->FluSgTime[lv][SaveSg_Flu] = TimeNew;
Main/EvolveLevel.cpp:312:      amr->MagSg    [lv]             = SaveSg_Mag;
Main/EvolveLevel.cpp:313:      amr->MagSgTime[lv][SaveSg_Mag] = TimeNew;
Main/EvolveLevel.cpp:328:                                         (amr->Par->Integ == PAR_INTEG_EULER) ? StoreAcc_Yes    : StoreAcc_No,
Main/EvolveLevel.cpp:329:                                         (amr->Par->Integ == PAR_INTEG_EULER) ? UseStoredAcc_No : UseStoredAcc_Yes ),
Main/EvolveLevel.cpp:353:      const int SaveSg_Pot = 1 - amr->PotSg[lv];
Main/EvolveLevel.cpp:432:            amr->PotSg    [lv]             = SaveSg_Pot;
Main/EvolveLevel.cpp:433:            amr->PotSgTime[lv][SaveSg_Pot] = TimeNew;
Main/EvolveLevel.cpp:446:      if ( amr->Par->Integ == PAR_INTEG_KDK )
Main/EvolveLevel.cpp:638:      if ( amr->Par->GhostSizeTracer > Flu_ParaBuf )
Main/EvolveLevel.cpp:640:                                        _DENS|_MOMX|_MOMY|_MOMZ, _NONE, amr->Par->GhostSizeTracer, USELB_YES ),
Main/EvolveLevel.cpp:689:      amr->NUpdateLv[lv] ++;
Main/EvolveLevel.cpp:720:            TIMING_FUNC(   Flu_FixUp_Restrict( lv, amr->FluSg[lv+1], amr->FluSg[lv], amr->MagSg[lv+1], amr->MagSg[lv],
Main/EvolveLevel.cpp:725:            TIMING_FUNC(   LB_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_RESTRICT,
Main/EvolveLevel.cpp:767:         TIMING_FUNC(   Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_AFTER_FIXUP,
Main/EvolveLevel.cpp:804:         amr->FluSgTime[lv+1][ amr->FluSg[lv+1] ] = Time[lv];
Main/EvolveLevel.cpp:806:         amr->MagSgTime[lv+1][ amr->MagSg[lv+1] ] = Time[lv];
Main/EvolveLevel.cpp:810:         amr->PotSgTime[lv+1][ amr->PotSg[lv+1] ] = Time[lv];
Main/EvolveLevel.cpp:814:         TIMING_FUNC(   Buf_GetBufferData( lv, amr->FluSg[lv], amr->MagSg[lv], NULL_INT, DATA_AFTER_REFINE,
Main/EvolveLevel.cpp:819:         TIMING_FUNC(   Buf_GetBufferData( lv, NULL_INT, NULL_INT, amr->PotSg[lv], POT_AFTER_REFINE,
Main/EvolveLevel.cpp:825:         TIMING_FUNC(   Buf_GetBufferData( lv+1, amr->FluSg[lv+1], amr->MagSg[lv+1], NULL_INT, DATA_AFTER_REFINE,
Main/EvolveLevel.cpp:830:         TIMING_FUNC(   Buf_GetBufferData( lv+1, NULL_INT, NULL_INT, amr->PotSg[lv+1], POT_AFTER_REFINE,
Main/EvolveLevel.cpp:838:         TIMING_FUNC(   Poi_StorePotWithGhostZone( lv+1, amr->PotSg[lv+1], false ),
Main/Main.cpp:656:      if ( LB_EstimateLoadImbalance() > amr->LB->WLI_Max )
Main/Main.cpp:661:                         amr->LB->WLI, amr->LB->WLI_Max );
Main/Main.cpp:669:         const double ParWeight        = amr->LB->Par_Weight;
Main/Main.cpp:682:      } // if ( LB_EstimateLoadImbalance() > amr->LB->WLI_Max )
Miscellaneous/Mis_CoordinateTransform.cpp:17:   return Scale*amr->dh[TOP_LEVEL];
Miscellaneous/Mis_CoordinateTransform.cpp:35:   return NCell*amr->dh[lv];
Miscellaneous/Mis_CoordinateTransform.cpp:54:   if ( Scale % amr->scale[lv] != 0 )
Miscellaneous/Mis_CoordinateTransform.cpp:56:                   Scale, lv, amr->scale[lv] );
Miscellaneous/Mis_CoordinateTransform.cpp:77:   return NCell*amr->scale[lv];
Miscellaneous/Mis_GetTotalPatchNumber.cpp:20:   MPI_Allreduce( &amr->NPatchComma[lv][1], &NPatchTotal[lv], 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD );
Miscellaneous/dt_Prepare_Flu.cpp:38:         memcpy( h_Flu_Array_T[N][0], amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[0][0][0],
Miscellaneous/dt_Prepare_Flu.cpp:43:         memcpy( h_Mag_Array_T[N][0], amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic[0],
Model_Hydro/MHD_AllocateElectricArray.cpp:22:   if ( !amr->WithElectric )
Model_Hydro/MHD_AllocateElectricArray.cpp:23:      Aux_Error( ERROR_INFO, "amr->WithElectric is off !!\n" );
Model_Hydro/MHD_AllocateElectricArray.cpp:35:   for (int PID=0; PID<amr->NPatchComma[lv][19]; PID++)  amr->patch[0][lv][PID]->edelete();
Model_Hydro/MHD_AllocateElectricArray.cpp:39:   if ( amr->NPatchComma[lv+1][19] == 0 )    return;
Model_Hydro/MHD_AllocateElectricArray.cpp:44:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_AllocateElectricArray.cpp:46:      if ( amr->patch[0][lv][PID]->son == -1 )
Model_Hydro/MHD_AllocateElectricArray.cpp:50:            const int SibPID = amr->patch[0][lv][PID]->sibling[FaceID];
Model_Hydro/MHD_AllocateElectricArray.cpp:51:            if ( SibPID >= 0  &&  amr->patch[0][lv][SibPID]->son != -1 )
Model_Hydro/MHD_AllocateElectricArray.cpp:52:               amr->patch[0][lv][PID]->enew( FaceID, AUTO_REDUCE_DT );
Model_Hydro/MHD_AllocateElectricArray.cpp:62:               const int SibPID = amr->patch[0][lv][PID]->sibling[ SibID[s] ];
Model_Hydro/MHD_AllocateElectricArray.cpp:63:               if ( SibPID >= 0  &&  amr->patch[0][lv][SibPID]->son != -1 )
Model_Hydro/MHD_AllocateElectricArray.cpp:65:                  amr->patch[0][lv][PID]->enew( EdgeID, AUTO_REDUCE_DT );
Model_Hydro/MHD_AllocateElectricArray.cpp:71:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_Aux_Check_DivergenceB.cpp:46:            const int MagSg = amr->MagSg[lv];
Model_Hydro/MHD_Aux_Check_DivergenceB.cpp:49:            for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_Aux_Check_DivergenceB.cpp:78:                        const real (*B)[PS1P1*PS1*PS1] = amr->patch[MagSg][lv][PID]->magnetic;
Model_Hydro/MHD_Aux_Check_DivergenceB.cpp:102:            } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:43:      const int MagSg = amr->MagSg[lv];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:49:            for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:52:               const int SibPID = amr->patch[0][lv][PID]->sibling[s];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:65:                           B     = amr->patch[MagSg][lv][   PID]->magnetic[MAGX][ IDX321_BX(Offset,    j, k, PS1, PS1) ];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:66:                           BSib  = amr->patch[MagSg][lv][SibPID]->magnetic[MAGX][ IDX321_BX(OffsetSib, j, k, PS1, PS1) ];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:76:                           B     = amr->patch[MagSg][lv][   PID]->magnetic[MAGY][ IDX321_BY(i, Offset,    k, PS1, PS1) ];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:77:                           BSib  = amr->patch[MagSg][lv][SibPID]->magnetic[MAGY][ IDX321_BY(i, OffsetSib, k, PS1, PS1) ];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:87:                           B     = amr->patch[MagSg][lv][   PID]->magnetic[MAGZ][ IDX321_BZ(i, j, Offset,    PS1, PS1) ];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:88:                           BSib  = amr->patch[MagSg][lv][SibPID]->magnetic[MAGZ][ IDX321_BZ(i, j, OffsetSib, PS1, PS1) ];
Model_Hydro/MHD_Aux_Check_InterfaceB.cpp:99:            } // for (int s=0; s<6; s++) for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_FixUp_Electric.cpp:24:   const real _dh             = (real)1.0 / amr->dh[lv];
Model_Hydro/MHD_FixUp_Electric.cpp:25:   const int  MagSg           = amr->MagSg[lv];
Model_Hydro/MHD_FixUp_Electric.cpp:37:   if ( !amr->WithElectric )
Model_Hydro/MHD_FixUp_Electric.cpp:38:      Aux_Error( ERROR_INFO, "amr->WithElectric is off -> no electric field array is allocated for OPT__FIXUP_ELECTRIC !!\n" );
Model_Hydro/MHD_FixUp_Electric.cpp:43:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_FixUp_Electric.cpp:49:         real *ElePtr = amr->patch[0][lv][PID]->electric[s];
Model_Hydro/MHD_FixUp_Electric.cpp:55:               ElePtr[t] += amr->patch[0][lv][PID]->electric_bitrep[s][t];
Model_Hydro/MHD_FixUp_Electric.cpp:64:         const real (*EPtr)[PS1M1_PS1] = ( real (*)[PS1M1_PS1] )amr->patch[0][lv][PID]->electric[s];
Model_Hydro/MHD_FixUp_Electric.cpp:130:            amr->patch[MagSg][lv][PID]->magnetic[B1][idx_B] += Coeff*EPtr[0][idx_E];
Model_Hydro/MHD_FixUp_Electric.cpp:141:            amr->patch[MagSg][lv][PID]->magnetic[B2][idx_B] -= Coeff*EPtr[1][idx_E];
Model_Hydro/MHD_FixUp_Electric.cpp:152:         const real *EPtr = amr->patch[0][lv][PID]->electric[s];
Model_Hydro/MHD_FixUp_Electric.cpp:205:         const int  SibPID1 = amr->patch[0][lv][PID]->sibling[ 2*B1 + LR1 ];  // sibling direction along B1/B2
Model_Hydro/MHD_FixUp_Electric.cpp:206:         const int  SibPID2 = amr->patch[0][lv][PID]->sibling[ 2*B2 + LR2 ];
Model_Hydro/MHD_FixUp_Electric.cpp:221:         if (  ( SibPID1 >= 0 && amr->patch[0][lv][SibPID1]->son == -1 )  ||  SibPID1 <= SIB_OFFSET_NONPERIODIC  )
Model_Hydro/MHD_FixUp_Electric.cpp:223:               amr->patch[MagSg][lv][PID]->magnetic[B1][ offset1 + t*stride1 ] += Coeff1*EPtr[t];
Model_Hydro/MHD_FixUp_Electric.cpp:226:         if (  ( SibPID2 >= 0 && amr->patch[0][lv][SibPID2]->son == -1 )  ||  SibPID2 <= SIB_OFFSET_NONPERIODIC  )
Model_Hydro/MHD_FixUp_Electric.cpp:228:               amr->patch[MagSg][lv][PID]->magnetic[B2][ offset2 + t*stride2 ] += Coeff2*EPtr[t];
Model_Hydro/MHD_FixUp_Electric.cpp:230:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_FixUp_Electric.cpp:236:   for (int PID=0; PID<amr->NPatchComma[lv][27]; PID++)
Model_Hydro/MHD_FixUp_Electric.cpp:243:         ElePtr = amr->patch[0][lv][PID]->electric[s];
Model_Hydro/MHD_FixUp_Electric.cpp:247:         ElePtr = amr->patch[0][lv][PID]->electric_bitrep[s];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:32:   if ( PID < 0  ||  PID >= amr->num[lv] )
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:33:      Aux_Error( ERROR_INFO, "incorrect PID = %d (total number of patches = %d) !!\n", PID, amr->num[lv] );
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:41:   if ( amr->patch[MagSg][lv][PID]->magnetic == NULL )
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:47:   const real *Bx_FC = amr->patch[MagSg][lv][PID]->magnetic[MAGX];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:48:   const real *By_FC = amr->patch[MagSg][lv][PID]->magnetic[MAGY];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:49:   const real *Bz_FC = amr->patch[MagSg][lv][PID]->magnetic[MAGZ];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:79:   if ( PID < 0  ||  PID >= amr->num[lv] )
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:80:      Aux_Error( ERROR_INFO, "incorrect PID = %d (total number of patches = %d) !!\n", PID, amr->num[lv] );
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:88:   if ( amr->patch[MagSg][lv][PID]->magnetic == NULL )
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:94:   const real *Bx_FC = amr->patch[MagSg][lv][PID]->magnetic[MAGX];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:95:   const real *By_FC = amr->patch[MagSg][lv][PID]->magnetic[MAGY];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:96:   const real *Bz_FC = amr->patch[MagSg][lv][PID]->magnetic[MAGZ];
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:130:   if ( PID < 0  ||  PID >= amr->num[lv] )
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:131:      Aux_Error( ERROR_INFO, "incorrect PID = %d (total number of patches = %d) !!\n", PID, amr->num[lv] );
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:139:   if ( amr->patch[MagSg][lv][PID]->magnetic == NULL )
Model_Hydro/MHD_GetCellCenteredBInPatch.cpp:144:   const real (*B)[PS1P1*PS1*PS1] = amr->patch[MagSg][lv][PID]->magnetic;
Model_Hydro/MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp:52:   const int MagSg        = amr->MagSg[lv];
Model_Hydro/MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp:55:   for (int DesBufPID=amr->NPatchComma[lv][1]; DesBufPID<amr->NPatchComma[lv][3]; DesBufPID++)
Model_Hydro/MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp:58:      if ( amr->patch[MagSg][lv][DesBufPID]->magnetic != NULL  &&  amr->patch[0][lv][DesBufPID]->son == -1 )
Model_Hydro/MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp:62:            const int SrcBufPID = amr->patch[0][lv][DesBufPID]->sibling[s];
Model_Hydro/MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp:66:            if ( SrcBufPID >= 0  &&  amr->patch[MagSg][lv][SrcBufPID]->magnetic != NULL  &&
Model_Hydro/MHD_LB_EnsureBFieldConsistencyAfterRestrict.cpp:67:                 amr->patch[0][lv][SrcBufPID]->son != -1 )
Model_Hydro/MHD_LB_ResetBufferElectric.cpp:20:   if ( !amr->WithElectric )
Model_Hydro/MHD_LB_ResetBufferElectric.cpp:28:   for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][27]; PID++)
Model_Hydro/MHD_LB_ResetBufferElectric.cpp:33:         real *ElePtr = amr->patch[0][lv][PID]->electric[s];
Model_Hydro/MHD_Init_BField_ByFile.cpp:31:// Return      :  amr->patch->magnetic
Model_Hydro/MHD_Init_BField_ByFile.cpp:48:   const double dh       = amr->dh[B_lv];
Model_Hydro/MHD_Init_BField_ByFile.cpp:133:   if ( amr->BoxEdgeL[0] < Axmin+2*Adx || amr->BoxEdgeR[0] >= Axmax-2*Adx ||
Model_Hydro/MHD_Init_BField_ByFile.cpp:134:        amr->BoxEdgeL[1] < Aymin+2*Ady || amr->BoxEdgeR[1] >= Aymax-2*Ady ||
Model_Hydro/MHD_Init_BField_ByFile.cpp:135:        amr->BoxEdgeL[2] < Azmin+2*Adz || amr->BoxEdgeR[2] >= Azmax-2*Adz )
Model_Hydro/MHD_Init_BField_ByFile.cpp:145:   for (int PID=0; PID<amr->NPatchComma[B_lv][1]; PID++) {
Model_Hydro/MHD_Init_BField_ByFile.cpp:151:         EdgeL[i] = amr->patch[0][B_lv][PID]->EdgeL[i];
Model_Hydro/MHD_Init_BField_ByFile.cpp:152:         EdgeR[i] = amr->patch[0][B_lv][PID]->EdgeR[i];
Model_Hydro/MHD_Init_BField_ByFile.cpp:241:         amr->patch[ amr->MagSg[B_lv] ][B_lv][PID]->magnetic[0][idxB] = Bx;
Model_Hydro/MHD_Init_BField_ByFile.cpp:253:         amr->patch[ amr->MagSg[B_lv] ][B_lv][PID]->magnetic[1][idxB] = By;
Model_Hydro/MHD_Init_BField_ByFile.cpp:265:         amr->patch[ amr->MagSg[B_lv] ][B_lv][PID]->magnetic[2][idxB] = Bz;
Model_Hydro/MHD_Init_BField_ByFile.cpp:272:   } // for (int PID=0; PID<amr->NPatchComma[B_lv][1]; PID++)
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:156:      Mis_Matching_int( amr->NPatchComma[SonLv][1], amr->LB->IdxList_Real[SonLv], SendEachRank_N[r], RecvPtr_LBIdx, Match );
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:177:         SendEachRank_PID[r][sorted_idx]  = amr->LB->IdxList_Real_IdxTable[SonLv][ Match[t] ];
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:225:   const int SonMagSg       = amr->MagSg[SonLv];
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:242:         if ( PID0 < 0  ||  PID0 >= amr->NPatchComma[SonLv][1] )
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:244:                       PID0, SonLv, amr->NPatchComma[SonLv][1] );
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:249:         const int SibPID     = amr->patch[0][SonLv][PID]->sibling[sib_mirror];
Model_Hydro/MHD_LB_Refine_GetCoarseFineInterfaceBField.cpp:267:               SendPtr[idx_B_out] = amr->patch[SonMagSg][SonLv][PID]->magnetic[dir][idx_B_in];
Model_Hydro/Hydro_Aux_Check_Negative.cpp:61:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/Hydro_Aux_Check_Negative.cpp:66:            for (int v=0; v<NCOMP_TOTAL; v++)   Fluid[v] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Model_Hydro/Hydro_Aux_Check_Negative.cpp:72:            const real Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Model_Hydro/Hydro_Aux_Check_Negative.cpp:97:                               MPI_Rank, PID, amr->patch[0][lv][PID]->corner[0],
Model_Hydro/Hydro_Aux_Check_Negative.cpp:98:                                              amr->patch[0][lv][PID]->corner[1],
Model_Hydro/Hydro_Aux_Check_Negative.cpp:99:                                              amr->patch[0][lv][PID]->corner[2], i, j, k );
Model_Hydro/Hydro_Aux_Check_Negative.cpp:126:                               MPI_Rank, PID, amr->patch[0][lv][PID]->corner[0],
Model_Hydro/Hydro_Aux_Check_Negative.cpp:127:                                              amr->patch[0][lv][PID]->corner[1],
Model_Hydro/Hydro_Aux_Check_Negative.cpp:128:                                              amr->patch[0][lv][PID]->corner[2], i, j, k );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:71:   Dens = Dens0 + 0.2*exp(  -(  SQR(1.1*x-0.5*amr->BoxSize[0])
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:72:                               +SQR(2.2*y-0.5*amr->BoxSize[1])
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:73:                               +SQR(3.3*z-0.5*amr->BoxSize[2]) ) / SQR( 1.8*amr->BoxSize[2] )  );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:74:   Vx   = Vx0*sin( 2.0*M_PI/amr->BoxSize[0] );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:75:   Vy   = Vy0*cos( 2.0*M_PI/amr->BoxSize[1] );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:76:   Vz   = Vz0*sin( 2.0*M_PI/amr->BoxSize[2] );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:77:   Pres = Pres0*(  2.0 + sin( 2.0*M_PI*(4.5*x+5.5*y*6.5*z)/amr->BoxSize[2] )  );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:173:   const double dh       = amr->dh[lv];
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:187:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:210:            for (int k=0; k<ijk_end[2]; k++)    {  const double z0 = amr->patch[0][lv][PID]->EdgeL[2] + k*dh + dxyz0[2];
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:211:            for (int j=0; j<ijk_end[1]; j++)    {  const double y0 = amr->patch[0][lv][PID]->EdgeL[1] + j*dh + dxyz0[1];
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:212:            for (int i=0; i<ijk_end[0]; i++)    {  const double x0 = amr->patch[0][lv][PID]->EdgeL[0] + i*dh + dxyz0[0];
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:226:               amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic[v][ idx ++ ] = magnetic_1v*_NSub2;
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:238:      for (int k=0; k<PS1; k++)  {  const double z0 = amr->patch[0][lv][PID]->EdgeL[2] + k*dh + 0.5*dh_sub;
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:239:      for (int j=0; j<PS1; j++)  {  const double y0 = amr->patch[0][lv][PID]->EdgeL[1] + j*dh + 0.5*dh_sub;
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:240:      for (int i=0; i<PS1; i++)  {  const double x0 = amr->patch[0][lv][PID]->EdgeL[0] + i*dh + 0.5*dh_sub;
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:263:         const real Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:289:         for (int v=0; v<NCOMP_TOTAL; v++)   amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i] = fluid[v];
Model_Hydro/Hydro_Init_ByFunction_AssignData.cpp:292:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:31:   if ( PID < 0  ||  PID >= amr->num[lv] )
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:32:      Aux_Error( ERROR_INFO, "incorrect PID = %d (amr->num[%d] = %d) !!\n", PID, lv, amr->num[lv] );
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:48:   const int SibPID            = amr->patch[0][lv][PID]->sibling[SibID];
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:64:   if ( amr->patch[MagSg][lv][   PID]->magnetic == NULL )
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:65:      Aux_Error( ERROR_INFO, "amr->patch[%d][%d][%d]->magnetic == NULL !!\n", MagSg, lv,    PID );
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:67:   if ( amr->patch[MagSg][lv][SibPID]->magnetic == NULL )
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:68:      Aux_Error( ERROR_INFO, "amr->patch[%d][%d][%d]->magnetic == NULL !!\n", MagSg, lv, SibPID );
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:71:   const real    *MagPtr0 = amr->patch[MagSg][lv][   PID]->magnetic[Bdir] + Bidx_offset[           SibID  ];
Model_Hydro/MHD_CopyPatchInterfaceBField.cpp:72:         real *SibMagPtr0 = amr->patch[MagSg][lv][SibPID]->magnetic[Bdir] + Bidx_offset[ MirrorSib[SibID] ];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:24:   if ( !amr->WithElectric )
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:25:      Aux_Message( stderr, "WARNING : why invoking %s when amr->WithElectric is off ??\n", __FUNCTION__ );
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:29:   const int FaNReal    = amr->NPatchComma[FaLv][1];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:40:   int  *LB_SendE_NList           = amr->LB->SendE_NList          [FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:41:   int **LB_SendE_IDList          = amr->LB->SendE_IDList         [FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:42:   int **LB_SendE_SibList         = amr->LB->SendE_SibList        [FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:43:   int  *LB_RecvE_NList           = amr->LB->RecvE_NList          [FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:44:   int **LB_RecvE_IDList          = amr->LB->RecvE_IDList         [FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:45:   int **LB_RecvE_IDList_IdxTable = amr->LB->RecvE_IDList_IdxTable[FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:46:   int **LB_RecvE_SibList         = amr->LB->RecvE_SibList        [FaLv];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:67:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][3]; FaPID++)  amr->patch[0][FaLv][FaPID]->edelete();
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:77:         const int SonPID = amr->patch[0][FaLv][FaPID]->son;
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:84:               const int SibPID = amr->patch[0][FaLv][FaPID]->sibling[FaceID];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:88:                  const int SibSonPID = amr->patch[0][FaLv][SibPID]->son;
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:93:                     amr->patch[0][FaLv][FaPID]->enew( FaceID, AUTO_REDUCE_DT );
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:100:                        const long SibSonLBIdx = 8*amr->patch[0][FaLv][SibPID]->LB_Idx;   // faster
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:102:                        const long SibSonLBIdx = LB_Corner2Index( SonLv, amr->patch[0][FaLv][SibPID]->corner, CHECK_OFF );
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:144:                  const int SibPID    = amr->patch[0][FaLv][FaPID]->sibling[ SibC2F[s] ];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:145:                  const int SibSonPID = ( SibPID >= 0 ) ? amr->patch[0][FaLv][SibPID]->son : -1;
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:152:                        amr->patch[0][FaLv][FaPID]->enew( EdgeID, AUTO_REDUCE_DT );
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:178:                  const long SibSonLBIdx = 8*amr->patch[0][FaLv][ MPISibPID ]->LB_Idx;
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:180:                  const long SibSonLBIdx = LB_Corner2Index( SonLv, amr->patch[0][FaLv][ MPISibPID ]->corner, CHECK_OFF );
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:331:      Mis_Matching_int( amr->NPatchComma[SonLv][1], amr->LB->IdxList_Real[SonLv], LB_SendE_NList[r],
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:348:         const int SibSonPID = amr->LB->IdxList_Real_IdxTable[SonLv][ Match_E[t] ];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:349:         const int SibPID    = amr->patch[0][SonLv][SibSonPID]->father;
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:356:         const int TPID = amr->patch[0][FaLv][SibPID]->sibling[SibF2C];
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:366:         if ( amr->patch[0][FaLv][TPID]->son != -1 )
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:368:                       r, FaLv, TPID, amr->patch[0][FaLv][TPID]->son );
Model_Hydro/MHD_LB_AllocateElectricArray.cpp:375:         amr->patch[0][FaLv][TPID]->enew( SibE, AUTO_REDUCE_DT );
Model_Hydro/MHD_SameInterfaceB.cpp:35:   const int MagSg = amr->MagSg[lv];
Model_Hydro/MHD_SameInterfaceB.cpp:39:   for (int PID=0; PID<amr->num[lv]; PID++)
Model_Hydro/MHD_SameInterfaceB.cpp:45:         const int SibPID = amr->patch[0][lv][PID]->sibling[s];
Model_Hydro/MHD_SameInterfaceB.cpp:49:              amr->patch[MagSg][lv][   PID]->magnetic != NULL  &&
Model_Hydro/MHD_SameInterfaceB.cpp:50:              amr->patch[MagSg][lv][SibPID]->magnetic != NULL     )
Model_Hydro/MHD_SameInterfaceB.cpp:53:   } // for (int PID=0; PID<amr->num[lv]; PID++)
Binary file Object/__cpu__InvokeSolver.o matches
Binary file Object/__cpu__Aux_Check_Parameter.o matches
Binary file Object/__cpu__Flu_AllocateFluxArray.o matches
Binary file Object/__cpu__Flu_Close.o matches
Binary file Object/__cpu__Init_ResetParameter.o matches
Binary file Object/__cpu__Par_Aux_GetConservedQuantity.o matches
Binary file Object/__cpu__Flu_AllocateFluxArray_Buffer.o matches
Binary file Object/__cpu__Buf_AllocateBufferPatch.o matches
Binary file Object/__cpu__Refine_Buffer.o matches
Binary file Object/__cpu__Buf_AllocateBufferPatch_Base.o matches
Binary file Object/__cpu__LB_AllocateBufferPatch_Sibling.o matches
Binary file Object/__cpu__LB_Init_LoadBalance.o matches
Binary file Object/__cpu__LB_AllocateFluxArray.o matches
Binary file Object/__cpu__LB_AllocateBufferPatch_Father.o matches
Binary file Object/__cpu__LB_Refine_AllocateNewPatch.o matches
Binary file Object/__cpu__LB_AllocateBufferPatch_Sibling_Base.o matches
Binary file Object/__cpu__LB_Refine_AllocateBufferPatch_Sibling.o matches
Binary file Object/__cpu__LB_RecordExchangeFixUpDataPatchID.o matches
Output/Output_BoundaryFlagList.cpp:44:      const int NP    = ( option ) ? amr->ParaVar->BounFlag_NList  [lv][s] :
Output/Output_BoundaryFlagList.cpp:45:                                     amr->ParaVar->BuffFlag_NList  [lv][s];
Output/Output_BoundaryFlagList.cpp:46:      const int *List = ( option ) ? amr->ParaVar->BounFlag_PosList[lv][s] :
Output/Output_BoundaryFlagList.cpp:47:                                     amr->ParaVar->BuffFlag_PosList[lv][s];
Output/Output_ExchangeDataPatchList.cpp:44:      const int NP    = ( option ) ? amr->ParaVar->SendP_NList [lv][s] : amr->ParaVar->RecvP_NList [lv][s];
Output/Output_ExchangeDataPatchList.cpp:45:      const int *List = ( option ) ? amr->ParaVar->SendP_IDList[lv][s] : amr->ParaVar->RecvP_IDList[lv][s];
Output/Output_ExchangeFluxPatchList.cpp:56:         case 1:  NP    = amr->ParaVar->SendF_NList [lv][s];
Output/Output_ExchangeFluxPatchList.cpp:57:                  List  = amr->ParaVar->SendF_IDList[lv][s];
Output/Output_ExchangeFluxPatchList.cpp:60:         case 2:  NP    = amr->ParaVar->RecvF_NList [lv][s];
Output/Output_ExchangeFluxPatchList.cpp:61:                  List  = amr->ParaVar->RecvF_IDList[lv][s];
Output/Output_ExchangePatchMap.cpp:82:   const int scale0 = amr->scale[ 0];
Output/Output_ExchangePatchMap.cpp:83:   const int scale  = amr->scale[lv];
Output/Output_ExchangePatchMap.cpp:87:   for (int P=0; P<amr->ParaVar->SendP_NList[lv][s]; P++)
Output/Output_ExchangePatchMap.cpp:89:      PID = amr->ParaVar->SendP_IDList[lv][s][P];
Output/Output_ExchangePatchMap.cpp:91:      ip = ( amr->patch[0][lv][PID]->corner[0]-MPI_Rank_X[0]*NX0[0]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_ExchangePatchMap.cpp:92:      jp = ( amr->patch[0][lv][PID]->corner[1]-MPI_Rank_X[1]*NX0[1]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_ExchangePatchMap.cpp:93:      kp = ( amr->patch[0][lv][PID]->corner[2]-MPI_Rank_X[2]*NX0[2]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_ExchangePatchMap.cpp:103:   for (int P=0; P<amr->ParaVar->RecvP_NList[lv][s]; P++)
Output/Output_ExchangePatchMap.cpp:105:      PID = amr->ParaVar->RecvP_IDList[lv][s][P];
Output/Output_ExchangePatchMap.cpp:107:      ip = ( amr->patch[0][lv][PID]->corner[0]-MPI_Rank_X[0]*NX0[0]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_ExchangePatchMap.cpp:108:      jp = ( amr->patch[0][lv][PID]->corner[1]-MPI_Rank_X[1]*NX0[1]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_ExchangePatchMap.cpp:109:      kp = ( amr->patch[0][lv][PID]->corner[2]-MPI_Rank_X[2]*NX0[2]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_FlagMap.cpp:78:   const int scale0 = amr->scale[ 0];
Output/Output_FlagMap.cpp:79:   const int scale  = amr->scale[lv];
Output/Output_FlagMap.cpp:82:   for (int P=0; P<amr->num[lv]; P++)
Output/Output_FlagMap.cpp:84:      ip = ( amr->patch[0][lv][P]->corner[0]-MPI_Rank_X[0]*NX0[0]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_FlagMap.cpp:85:      jp = ( amr->patch[0][lv][P]->corner[1]-MPI_Rank_X[1]*NX0[1]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_FlagMap.cpp:86:      kp = ( amr->patch[0][lv][P]->corner[2]-MPI_Rank_X[2]*NX0[2]*scale0 ) / ( PATCH_SIZE*scale ) + 2;
Output/Output_FlagMap.cpp:95:      if ( amr->patch[0][lv][P]->son != -1 )    FlagMap[ID] = 'O';
Output/Output_Flux.cpp:25:   if ( !amr->WithFlux )
Output/Output_Flux.cpp:28:   if ( amr->patch[0][lv][PID] == NULL )
Output/Output_Flux.cpp:35:   patch_t *Relation  = amr->patch[0][lv][PID];
Output/Output_Flux.cpp:71:   real (*FluxPtr)[PATCH_SIZE][PATCH_SIZE] = amr->patch[0][lv][PID]->flux[Sib];
Output/Output_Patch.cpp:14://                Output_Patch( lv, PID, amr->FluSg[lv], amr->MagSg[lv], amr->PotSg[lv], comment );
Output/Output_Patch.cpp:46:   if ( amr->patch[0][lv][PID] == NULL )
Output/Output_Patch.cpp:53:   patch_t *Relation                  = amr->patch[    0][lv][PID];
Output/Output_Patch.cpp:54:   real    (*fluid)[PS1][PS1][PS1]    = amr->patch[FluSg][lv][PID]->fluid;
Output/Output_Patch.cpp:56:   real    (*magnetic)[PS1P1*PS1*PS1] = amr->patch[MagSg][lv][PID]->magnetic;
Output/Output_Patch.cpp:59:   real    (*pot)[PS1][PS1]           = amr->patch[PotSg][lv][PID]->pot;
Output/Output_Patch.cpp:81:            Relation->corner[0], Relation->corner[1], Relation->corner[2], PS1*amr->dh[lv] );
Output/Output_Patch.cpp:101:      FaSib  = ( Fa == -1 ) ? -1 : ( amr->patch[0][lv-1][Fa] != NULL ) ?
Output/Output_Patch.cpp:102:                                     amr->patch[0][lv-1][Fa]->sibling[S] : -999;
Output/Output_Patch.cpp:103:      SibSon = ( Sib < 0 )  ? Sib : amr->patch[0][lv][Sib]->son;
Output/Output_Patch.cpp:301:      for (int v=0; v<PAR_NATT_TOTAL; v++)   fprintf( File, "  %13.6e", amr->Par->Attribute[v][ParID] );
Output/Output_PatchCorner.cpp:33:   const int NReal = amr->NPatchComma[lv][1];
Output/Output_PatchCorner.cpp:34:   const int NBuff = amr->NPatchComma[lv][27] - amr->NPatchComma[lv][1];
Output/Output_PatchCorner.cpp:44:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_PatchCorner.cpp:45:      fprintf( File, "%8d   %10d   %10d   %10d\n", PID, amr->patch[0][lv][PID]->corner[0],
Output/Output_PatchCorner.cpp:46:                                                        amr->patch[0][lv][PID]->corner[1],
Output/Output_PatchCorner.cpp:47:                                                        amr->patch[0][lv][PID]->corner[2] );
Output/Output_PatchCorner.cpp:51:   for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][27]; PID++)
Output/Output_PatchCorner.cpp:52:      fprintf( File, "%8d   %10d   %10d   %10d\n", PID, amr->patch[0][lv][PID]->corner[0],
Output/Output_PatchCorner.cpp:53:                                                        amr->patch[0][lv][PID]->corner[1],
Output/Output_PatchCorner.cpp:54:                                                        amr->patch[0][lv][PID]->corner[2] );
Output/Output_PatchMap.cpp:28:   if ( amr->patch[0][lv][PID] == NULL )
Output/Output_PatchMap.cpp:34:   if ( Comp < NCOMP_TOTAL  &&  amr->patch[TSg][lv][PID]->fluid == NULL )
Output/Output_PatchMap.cpp:41:   if ( Comp == NCOMP_TOTAL  &&  amr->patch[TSg][lv][PID]->pot == NULL )
Output/Output_PatchMap.cpp:49:   patch_t *Relation = amr->patch[ 0][lv][PID];
Output/Output_PatchMap.cpp:50:   patch_t *Data     = amr->patch[TSg][lv][PID];
Output/Output_PatchMap.cpp:80:      FaSib  = ( Fa == -1 ) ? -1 : ( amr->patch[0][lv-1][Fa] != NULL ) ?
Output/Output_PatchMap.cpp:81:                                     amr->patch[0][lv-1][Fa]->sibling[S] : -999;
Output/Output_PatchMap.cpp:82:      SibSon = ( Sib < 0 )  ? Sib : amr->patch[0][lv][Sib]->son;
Output/Output_PreparedPatch_Fluid.cpp:51:      patch_t *Relation = amr->patch[0][TLv][TPID];
Output/Output_PreparedPatch_Fluid.cpp:80:         FaSib  = ( TLv ==  0 ) ? -1 : amr->patch[0][TLv-1][Relation->father]->sibling[S];
Output/Output_PreparedPatch_Fluid.cpp:81:         SibSon = ( Sib < 0 )   ? Sib : amr->patch[0][TLv][Sib]->son;
Output/Output_BasePowerSpectrum.cpp:69:   real   *SendBuf      = new real [ amr->NPatchComma[0][1]*CUBE(PS1) ];         // MPI send buffer for density and potential
Output/Output_BasePowerSpectrum.cpp:71:   long   *SendBuf_SIdx = new long [ amr->NPatchComma[0][1]*PS1 ];               // MPI send buffer for 1D coordinate in slab
Output/Output_BasePowerSpectrum.cpp:87:   const bool PredictPos       = amr->Par->PredictPos;
Output/Output_BasePowerSpectrum.cpp:120:      const double WaveK0 = 2.0*M_PI/amr->BoxSize[0];
Output/Output_BasePowerSpectrum.cpp:259:   const double Coeff = amr->BoxSize[0]*amr->BoxSize[1]*amr->BoxSize[2] / SQR( (double)Nx*(double)Ny*(double)Nz*AveDensity_Init );
Output/Output_BasePowerSpectrum.cpp:263:   const double k0 = 2.0*M_PI/amr->BoxSize[0];     // assuming cubic box
Output/Output_DumpData.cpp:184:   for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Output/Output_DumpData.cpp:186:      if ( amr->Par->Type[p] == PTYPE_TRACER )
Output/Output_DumpData.cpp:188:         amr->Par->AccX[p] = (real)0.0;
Output/Output_DumpData.cpp:189:         amr->Par->AccY[p] = (real)0.0;
Output/Output_DumpData.cpp:190:         amr->Par->AccZ[p] = (real)0.0;
Output/Output_DumpData_Part.cpp:50:         ( x < 0.0  ||  x >= amr->BoxSize[0] )  )
Output/Output_DumpData_Part.cpp:51:      Aux_Error( ERROR_INFO, "incorrect x (out of range [0<=X<%lf]) !!\n", amr->BoxSize[0] );
Output/Output_DumpData_Part.cpp:54:         ( y < 0.0  ||  y >= amr->BoxSize[1] )  )
Output/Output_DumpData_Part.cpp:55:      Aux_Error( ERROR_INFO, "incorrect y (out of range [0<=Y<%lf]) !!\n", amr->BoxSize[1] );
Output/Output_DumpData_Part.cpp:58:         ( z < 0.0  ||  z >= amr->BoxSize[2] )  )
Output/Output_DumpData_Part.cpp:59:      Aux_Error( ERROR_INFO, "incorrect z (out of range [0<=Z<%lf]) !!\n", amr->BoxSize[2] );
Output/Output_DumpData_Part.cpp:61:   if ( Part == OUTPUT_DIAG  &&  ( amr->BoxSize[0] != amr->BoxSize[1] || amr->BoxSize[0] != amr->BoxSize[2] )  )
Output/Output_DumpData_Part.cpp:83:   const double dh_min = amr->dh[NLEVEL-1];
Output/Output_DumpData_Part.cpp:172:            dh    = amr->dh   [lv];
Output/Output_DumpData_Part.cpp:173:            scale = amr->scale[lv];
Output/Output_DumpData_Part.cpp:175:            for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Part.cpp:180:               if ( amr->patch[0][lv][PID]->son == -1  ||  BaseOnly )
Output/Output_DumpData_Part.cpp:182:                  Corner = amr->patch[0][lv][PID]->corner;
Output/Output_DumpData_Part.cpp:183:                  EdgeL  = amr->patch[0][lv][PID]->EdgeL;
Output/Output_DumpData_Part.cpp:184:                  EdgeR  = amr->patch[0][lv][PID]->EdgeR;
Output/Output_DumpData_Part.cpp:234:               } // if ( amr->patch[0][lv][PID]->son == -1 )
Output/Output_DumpData_Part.cpp:235:            } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Part.cpp:275:   const double dh_min  = amr->dh[TOP_LEVEL];
Output/Output_DumpData_Part.cpp:276:   const double scale_2 = 0.5*amr->scale[lv];
Output/Output_DumpData_Part.cpp:279:   for (int v=0; v<NCOMP_TOTAL; v++)   u[v] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Output/Output_DumpData_Part.cpp:291:   const real Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Part.cpp:293:   MHD_GetCellCenteredBFieldInPatch( B, lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Part.cpp:303:      fprintf( File, " %13.6e", amr->patch[ amr->PotSg[lv] ][lv][PID]->pot[k][j][i] );
Output/Output_DumpData_Part.cpp:358:      const real DivB = MHD_GetCellCenteredDivBInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Part.cpp:399:   const double dh      = amr->dh[lv];
Output/Output_DumpData_Total.cpp:73:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total.cpp:75:      if ( amr->patch[0][lv][PID]->son == -1 )  NDataPatch_Local[lv] ++;
Output/Output_DumpData_Total.cpp:86:   MPI_Allgather( &amr->Par->NPar_Active, 1, MPI_LONG, NPar_EachRank, 1, MPI_LONG, MPI_COMM_WORLD );
Output/Output_DumpData_Total.cpp:179:      ExpectFileSize += (long)PAR_NATT_STORED*amr->Par->NPar_Active_AllRank*sizeof(real);
Output/Output_DumpData_Total.cpp:577:      const double lb_wli_max                = amr->LB->WLI_Max;
Output/Output_DumpData_Total.cpp:717:      const long   NParAllRank         = amr->Par->NPar_Active_AllRank;
Output/Output_DumpData_Total.cpp:798:            for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total.cpp:806:                     if ( amr->patch[0][lv][PID_CheckSon]->son == -1 )
Output/Output_DumpData_Total.cpp:822:               if ( OPT__OUTPUT_CC_MAG  &&  amr->patch[0][lv][PID]->son == -1 )
Output/Output_DumpData_Total.cpp:831:                     MHD_GetCellCenteredBFieldInPatch( CCMag_1Cell, lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Total.cpp:843:               Cr_and_Son[0] = amr->patch[0][lv][PID]->corner[0];
Output/Output_DumpData_Total.cpp:844:               Cr_and_Son[1] = amr->patch[0][lv][PID]->corner[1];
Output/Output_DumpData_Total.cpp:845:               Cr_and_Son[2] = amr->patch[0][lv][PID]->corner[2];
Output/Output_DumpData_Total.cpp:846:               Cr_and_Son[3] = amr->patch[0][lv][PID]->son;
Output/Output_DumpData_Total.cpp:852:               if ( amr->patch[0][lv][PID]->son == -1 )
Output/Output_DumpData_Total.cpp:854:                  NPar_and_GParID[0] = amr->patch[0][lv][PID]->NPar;
Output/Output_DumpData_Total.cpp:859:                  GParID += amr->patch[0][lv][PID]->NPar;
Output/Output_DumpData_Total.cpp:865:               if ( amr->patch[0][lv][PID]->son == -1 )
Output/Output_DumpData_Total.cpp:868:                  fwrite( amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid,    sizeof(real), CUBE(PS1)*NCOMP_TOTAL,    File );
Output/Output_DumpData_Total.cpp:873:                  fwrite( amr->patch[ amr->PotSg[lv] ][lv][PID]->pot,      sizeof(real), CUBE(PS1),                File );
Output/Output_DumpData_Total.cpp:889:                  fwrite( amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic, sizeof(real), PS1P1*SQR(PS1)*NCOMP_MAG, File );
Output/Output_DumpData_Total.cpp:891:               } // if ( amr->patch[0][lv][PID]->son == -1 )
Output/Output_DumpData_Total.cpp:892:            } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total.cpp:927:   if ( GParID != GParID_Offset + amr->Par->NPar_Active )
Output/Output_DumpData_Total.cpp:929:                 GParID, GParID_Offset + amr->Par->NPar_Active );
Output/Output_DumpData_Total.cpp:943:   const long ParDataSize1v = amr->Par->NPar_Active_AllRank*sizeof(real);
Output/Output_DumpData_Total.cpp:966:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total.cpp:968:            NParThisPatch = amr->patch[0][lv][PID]->NPar;
Output/Output_DumpData_Total.cpp:982:               ParID = amr->patch[0][lv][PID]->ParList[p];
Output/Output_DumpData_Total.cpp:984:               ParBuf[ NParInBuf ++ ] = amr->Par->Attribute[v][ParID];
Output/Output_DumpData_Total.cpp:988:            if ( PID+1 == amr->NPatchComma[lv][1]  ||  NParInBuf + amr->patch[0][lv][PID+1]->NPar > ParBufSize )
Output/Output_DumpData_Total_HDF5.cpp:345:   for (int lv=0; lv<NLEVEL; lv++)  NPatchLocal[lv] = amr->NPatchComma[lv][1];
Output/Output_DumpData_Total_HDF5.cpp:501:      LBIdxList_Local        [lv] = new long [ amr->NPatchComma[lv][1] ];
Output/Output_DumpData_Total_HDF5.cpp:502:      CrList_Local           [lv] = new int  [ amr->NPatchComma[lv][1] ][3];
Output/Output_DumpData_Total_HDF5.cpp:503:      FaList_Local           [lv] = new int  [ amr->NPatchComma[lv][1] ];
Output/Output_DumpData_Total_HDF5.cpp:504:      SonList_Local          [lv] = new int  [ amr->NPatchComma[lv][1] ];
Output/Output_DumpData_Total_HDF5.cpp:505:      SibList_Local          [lv] = new int  [ amr->NPatchComma[lv][1] ][26];
Output/Output_DumpData_Total_HDF5.cpp:507:      NParList_Local         [lv] = new int  [ amr->NPatchComma[lv][1] ];
Output/Output_DumpData_Total_HDF5.cpp:524:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:525:         LBIdxList_Local[lv][PID] = amr->patch[0][lv][PID]->LB_Idx;
Output/Output_DumpData_Total_HDF5.cpp:528:      MPI_Allgatherv( LBIdxList_Local[lv], amr->NPatchComma[lv][1], MPI_LONG,
Output/Output_DumpData_Total_HDF5.cpp:551:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:554://       LBIdxList_Local[lv][PID] = amr->patch[0][lv][PID]->LB_Idx;
Output/Output_DumpData_Total_HDF5.cpp:559:         CrList_Local[lv][PID][d] = amr->patch[0][lv][PID]->corner[d];
Output/Output_DumpData_Total_HDF5.cpp:563:         FaPID = amr->patch[0][lv][PID]->father;
Output/Output_DumpData_Total_HDF5.cpp:578:         else if ( FaPID < amr->NPatchComma[FaLv][1] )
Output/Output_DumpData_Total_HDF5.cpp:582:         else // (FaPID >= amr->NPatchComma[FaLv][1] )
Output/Output_DumpData_Total_HDF5.cpp:587:                       lv, PID, FaPID, amr->NPatchComma[FaLv][1] );
Output/Output_DumpData_Total_HDF5.cpp:590:            if ( FaPID >= amr->num[FaLv] )
Output/Output_DumpData_Total_HDF5.cpp:592:                       lv, PID, FaPID, amr->num[FaLv] );
Output/Output_DumpData_Total_HDF5.cpp:595:            FaLBIdx = amr->patch[0][FaLv][FaPID]->LB_Idx;
Output/Output_DumpData_Total_HDF5.cpp:606:         } // if ( FaPID >= amr->NPatchComma[FaLv][1] )
Output/Output_DumpData_Total_HDF5.cpp:612:         SonPID = amr->patch[0][lv][PID]->son;
Output/Output_DumpData_Total_HDF5.cpp:620:         else if ( SonPID >= 0  &&  SonPID < amr->NPatchComma[SonLv][1] )
Output/Output_DumpData_Total_HDF5.cpp:641:            SonCr    = amr->patch[0][lv][PID]->corner;
Output/Output_DumpData_Total_HDF5.cpp:645:            if ( SonLBIdx - SonLBIdx%8 != 8*amr->patch[0][lv][PID]->LB_Idx )
Output/Output_DumpData_Total_HDF5.cpp:647:                       lv, PID, SonPID, SonCr[0], SonCr[1], SonCr[2], SonLBIdx, amr->patch[0][lv][PID]->LB_Idx );
Output/Output_DumpData_Total_HDF5.cpp:661://       son patch is a buffer patch (SonPID >= amr->NPatchComma[SonLv][1]) --> impossible
Output/Output_DumpData_Total_HDF5.cpp:662:         else // ( SonPID >= amr->NPatchComma[SonLv][1] )
Output/Output_DumpData_Total_HDF5.cpp:664:                       lv, PID, SonPID, amr->NPatchComma[SonLv][1] );
Output/Output_DumpData_Total_HDF5.cpp:672:            SibPID = amr->patch[0][lv][PID]->sibling[s];
Output/Output_DumpData_Total_HDF5.cpp:679:            else if ( SibPID < amr->NPatchComma[lv][1] )
Output/Output_DumpData_Total_HDF5.cpp:686:               if ( SibPID >= amr->num[lv] )
Output/Output_DumpData_Total_HDF5.cpp:688:                          lv, PID, SibPID, amr->num[lv] );
Output/Output_DumpData_Total_HDF5.cpp:692:               SibCr    = amr->patch[0][lv][SibPID]->corner;
Output/Output_DumpData_Total_HDF5.cpp:704:            } // if ( SibPID >= amr->NPatchComma[lv][1] )
Output/Output_DumpData_Total_HDF5.cpp:713:         NParList_Local[lv][PID] = amr->patch[0][lv][PID]->NPar;
Output/Output_DumpData_Total_HDF5.cpp:715:      } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:742:      MPI_Gatherv( FaList_Local[lv],     amr->NPatchComma[lv][1],    MPI_INT,
Output/Output_DumpData_Total_HDF5.cpp:745:      MPI_Gatherv( SonList_Local[lv],    amr->NPatchComma[lv][1],    MPI_INT,
Output/Output_DumpData_Total_HDF5.cpp:748:      MPI_Gatherv( SibList_Local[lv][0], amr->NPatchComma[lv][1]*26, MPI_INT,
Output/Output_DumpData_Total_HDF5.cpp:751:      MPI_Gatherv( CrList_Local[lv][0],  amr->NPatchComma[lv][1]*3,  MPI_INT,
Output/Output_DumpData_Total_HDF5.cpp:755:      MPI_Gatherv( NParList_Local[lv],    amr->NPatchComma[lv][1],    MPI_INT,
Output/Output_DumpData_Total_HDF5.cpp:798:      H5_Status = H5Awrite( H5_AttID_Cvt2Phy, H5T_NATIVE_DOUBLE, &amr->dh[TOP_LEVEL] );
Output/Output_DumpData_Total_HDF5.cpp:975:      int *PID0List = new int [ amr->NPatchComma[lv][1]/8 ];
Output/Output_DumpData_Total_HDF5.cpp:976:      for (int PID0=0, t=0; PID0<amr->NPatchComma[lv][1]; PID0+=8, t++)    PID0List[t] = PID0;
Output/Output_DumpData_Total_HDF5.cpp:1006:            H5_MemDims_Field[0] = amr->NPatchComma[lv][1];
Output/Output_DumpData_Total_HDF5.cpp:1021:            H5_Count_Field [0] = amr->NPatchComma[lv][1];
Output/Output_DumpData_Total_HDF5.cpp:1031:            FieldData = new real [ amr->NPatchComma[lv][1] ][PS1][PS1][PS1];
Output/Output_DumpData_Total_HDF5.cpp:1040:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1041:                     memcpy( FieldData[PID], amr->patch[ amr->PotSg[lv] ][lv][PID]->pot, FieldSizeOnePatch );
Output/Output_DumpData_Total_HDF5.cpp:1051:                  Prepare_PatchData( lv, Time[lv], FieldData[0][0][0], NULL, 0, amr->NPatchComma[lv][1]/8, PID0List,
Output/Output_DumpData_Total_HDF5.cpp:1066:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1073:                     MHD_GetCellCenteredBFieldInPatch( CCMag_1Cell, lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1086:                  Prepare_PatchData( lv, Time[lv], FieldData[0][0][0], NULL, 0, amr->NPatchComma[lv][1]/8, PID0List,
Output/Output_DumpData_Total_HDF5.cpp:1098:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1105:                     for (int v=0; v<NCOMP_TOTAL; v++)   u[v] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Output/Output_DumpData_Total_HDF5.cpp:1108:                     Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1123:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1130:                     for (int v=0; v<NCOMP_TOTAL; v++)   u[v] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Output/Output_DumpData_Total_HDF5.cpp:1133:                     Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1148:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1155:                     for (int v=0; v<NCOMP_TOTAL; v++)   u[v] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Output/Output_DumpData_Total_HDF5.cpp:1158:                     Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1173:                  for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Output/Output_DumpData_Total_HDF5.cpp:1200:                                                 NDer, DER_NXT, DER_NXT, DER_NXT, DER_GHOST_SIZE, amr->dh[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1202:                  } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Output/Output_DumpData_Total_HDF5.cpp:1209:                  for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Output/Output_DumpData_Total_HDF5.cpp:1242:                                               NDer, DER_NXT, DER_NXT, DER_NXT, DER_GHOST_SIZE, amr->dh[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1244:                  } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Output/Output_DumpData_Total_HDF5.cpp:1253:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1258:                     const real DivB = MHD_GetCellCenteredDivBInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1269:                  for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Output/Output_DumpData_Total_HDF5.cpp:1306:                                                   NDer, DER_NXT, DER_NXT, DER_NXT, DER_GHOST_SIZE, amr->dh[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1312:                  } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Output/Output_DumpData_Total_HDF5.cpp:1319:                  for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1320:                     memcpy( FieldData[PID], amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v], FieldSizeOnePatch );
Output/Output_DumpData_Total_HDF5.cpp:1357:            FCMagData = new real [ amr->NPatchComma[lv][1] ][ PS1P1*SQR(PS1) ];
Output/Output_DumpData_Total_HDF5.cpp:1362:               H5_MemDims_FCMag[0] = amr->NPatchComma[lv][1];
Output/Output_DumpData_Total_HDF5.cpp:1376:               H5_Count_FCMag [0] = amr->NPatchComma[lv][1];
Output/Output_DumpData_Total_HDF5.cpp:1385:               for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1386:                  memcpy( FCMagData[PID], amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic[v], FCMagSizeOnePatch );
Output/Output_DumpData_Total_HDF5.cpp:1447:   for (int lv=0; lv<NLEVEL; lv++)  MaxNPar1Lv = MAX( MaxNPar1Lv, amr->Par->NPar_Lv[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1452:   MPI_Allgather( amr->Par->NPar_Lv, NLEVEL, MPI_LONG, NParLv_EachRank[0], NLEVEL, MPI_LONG, MPI_COMM_WORLD );
Output/Output_DumpData_Total_HDF5.cpp:1467:   H5_SetDims_ParData[0] = amr->Par->NPar_Active_AllRank;
Output/Output_DumpData_Total_HDF5.cpp:1517:         H5_MemDims_ParData[0] = amr->Par->NPar_Lv[lv];
Output/Output_DumpData_Total_HDF5.cpp:1524:         H5_Count_ParData [0] = amr->Par->NPar_Lv[lv];
Output/Output_DumpData_Total_HDF5.cpp:1537:            for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_DumpData_Total_HDF5.cpp:1538:            for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Output/Output_DumpData_Total_HDF5.cpp:1540:               ParID = amr->patch[0][lv][PID]->ParList[p];
Output/Output_DumpData_Total_HDF5.cpp:1543:               if ( NParInBuf >= amr->Par->NPar_Lv[lv] )
Output/Output_DumpData_Total_HDF5.cpp:1544:                  Aux_Error( ERROR_INFO, "lv %d, NParInBuf (%ld) >= NPar_Lv (%ld) !!\n", lv, NParInBuf, amr->Par->NPar_Lv[lv] );
Output/Output_DumpData_Total_HDF5.cpp:1547:               ParBuf1v1Lv[ NParInBuf ++ ] = amr->Par->Attribute[v][ParID];
Output/Output_DumpData_Total_HDF5.cpp:1766:   KeyInfo.Par_NPar             = amr->Par->NPar_Active_AllRank;
Output/Output_DumpData_Total_HDF5.cpp:1785:      KeyInfo.BoxScale[d] = amr->BoxScale[d];
Output/Output_DumpData_Total_HDF5.cpp:1786:      KeyInfo.BoxSize [d] = amr->BoxSize [d];
Output/Output_DumpData_Total_HDF5.cpp:1792:      KeyInfo.CellSize      [lv] = amr->dh       [lv];
Output/Output_DumpData_Total_HDF5.cpp:1793:      KeyInfo.CellScale     [lv] = amr->scale    [lv];
Output/Output_DumpData_Total_HDF5.cpp:2355:   InputPara.Par_Init                = amr->Par->Init;
Output/Output_DumpData_Total_HDF5.cpp:2356:   InputPara.Par_ICFormat            = amr->Par->ParICFormat;
Output/Output_DumpData_Total_HDF5.cpp:2357:   InputPara.Par_ICMass              = amr->Par->ParICMass;
Output/Output_DumpData_Total_HDF5.cpp:2358:   InputPara.Par_ICType              = amr->Par->ParICType;
Output/Output_DumpData_Total_HDF5.cpp:2359:   InputPara.Par_Interp              = amr->Par->Interp;
Output/Output_DumpData_Total_HDF5.cpp:2360:   InputPara.Par_InterpTracer        = amr->Par->InterpTracer;
Output/Output_DumpData_Total_HDF5.cpp:2361:   InputPara.Par_Integ               = amr->Par->Integ;
Output/Output_DumpData_Total_HDF5.cpp:2362:   InputPara.Par_IntegTracer         = amr->Par->IntegTracer;
Output/Output_DumpData_Total_HDF5.cpp:2363:   InputPara.Par_ImproveAcc          = amr->Par->ImproveAcc;
Output/Output_DumpData_Total_HDF5.cpp:2364:   InputPara.Par_PredictPos          = amr->Par->PredictPos;
Output/Output_DumpData_Total_HDF5.cpp:2365:   InputPara.Par_TracerVelCorr       = amr->Par->TracerVelCorr;
Output/Output_DumpData_Total_HDF5.cpp:2366:   InputPara.Par_RemoveCell          = amr->Par->RemoveCell;
Output/Output_DumpData_Total_HDF5.cpp:2368:   InputPara.Par_GhostSize           = amr->Par->GhostSize;
Output/Output_DumpData_Total_HDF5.cpp:2369:   InputPara.Par_GhostSizeTracer     = amr->Par->GhostSizeTracer;
Output/Output_DumpData_Total_HDF5.cpp:2459:   InputPara.LB_WLI_Max              = amr->LB->WLI_Max;
Output/Output_DumpData_Total_HDF5.cpp:2461:   InputPara.LB_Par_Weight           = amr->LB->Par_Weight;
Output/Output_L1Error.cpp:60:   if ( Part == OUTPUT_DIAG  &&  ( amr->BoxSize[0] != amr->BoxSize[1] || amr->BoxSize[0] != amr->BoxSize[2] )  )
Output/Output_L1Error.cpp:167:            dh = amr->dh[lv];
Output/Output_L1Error.cpp:169:            for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_L1Error.cpp:172:               if ( amr->patch[0][lv][PID]->son == -1 )
Output/Output_L1Error.cpp:174:                  Corner = amr->patch[0][lv][PID]->corner;
Output/Output_L1Error.cpp:175:                  EdgeL  = amr->patch[0][lv][PID]->EdgeL;
Output/Output_L1Error.cpp:176:                  EdgeR  = amr->patch[0][lv][PID]->EdgeR;
Output/Output_L1Error.cpp:212:               } // if ( amr->patch[0][lv][PID]->son == -1 )
Output/Output_L1Error.cpp:213:            } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Output/Output_L1Error.cpp:233:         case OUTPUT_X    :  Norm = amr->BoxSize[0];  break;
Output/Output_L1Error.cpp:234:         case OUTPUT_Y    :  Norm = amr->BoxSize[1];  break;
Output/Output_L1Error.cpp:235:         case OUTPUT_Z    :  Norm = amr->BoxSize[2];  break;
Output/Output_L1Error.cpp:236:         case OUTPUT_DIAG :  Norm = amr->BoxSize[0];  break;
Output/Output_L1Error.cpp:327:      Nume[v] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
Output/Output_L1Error.cpp:331:   MHD_GetCellCenteredBFieldInPatch( Nume+NCOMP_TOTAL, lv, PID, i, j, k, amr->MagSg[lv] );
Output/Output_L1Error.cpp:357:   const double dh = amr->dh[lv];
Output/Output_L1Error.cpp:358:   const double x  = amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh;
Output/Output_L1Error.cpp:359:   const double y  = amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh;
Output/Output_L1Error.cpp:360:   const double z  = amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:109:      if ( PID < amr->NPatchComma[lv][1]  ||  PID >= amr->num[lv] )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:111:                    t, PID, amr->NPatchComma[lv][1], amr->num[lv] );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:113:      if ( amr->patch[0][lv][PID]->NPar > 0 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:114:         Aux_Error( ERROR_INFO, "lv %d, PID %d, NPar = %d > 0 !!\n", lv, PID, amr->patch[0][lv][PID]->NPar );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:116:      if ( amr->patch[0][lv][PID]->NPar_Copy >= 0 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:117:         Aux_Error( ERROR_INFO, "lv %d, PID %d, NPar_Copy = %d >= 0 !!\n", lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:120:      if ( amr->patch[0][lv][PID]->ParAtt_Copy[v] != NULL )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:122:                    lv, PID, amr->patch[0][lv][PID]->NPar_Copy, v );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:129:      if ( PID < 0  ||  PID >= amr->NPatchComma[lv][1] )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:131:                    t, PID, amr->NPatchComma[lv][1], amr->num[lv] );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:133:      if ( amr->patch[0][lv][PID]->NPar < 0 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:134:         Aux_Error( ERROR_INFO, "lv %d, PID %d, NPar = %d < 0 !!\n", lv, PID, amr->patch[0][lv][PID]->NPar );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:137:      if ( amr->patch[0][lv][PID]->son == -1  &&  amr->patch[0][lv][PID]->NPar_Copy >= 0 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:139:                    lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:142:      if ( amr->patch[0][lv][PID]->son != -1  &&  amr->patch[0][lv][PID]->NPar_Copy < 0 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:144:                    lv, PID, amr->patch[0][lv][PID]->son, amr->patch[0][lv][PID]->NPar_Copy );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:183:      if ( amr->patch[0][lv][PID]->son == -1 )  NParThisPatch = amr->patch[0][lv][PID]->NPar;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:184:      else                                      NParThisPatch = amr->patch[0][lv][PID]->NPar_Copy;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:221:      if ( amr->patch[0][lv][PID]->son == -1 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:223:         ParList = amr->patch[0][lv][PID]->ParList;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:235:            for (int v=0; v<NAtt; v++)    SendPtr[v] = amr->Par->Attribute[ AttIntIdx[v] ][ParID];
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:247:      } // if ( amr->patch[0][lv][PID]->son == -1 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:251:         ParAtt_Copy = amr->patch[0][lv][PID]->ParAtt_Copy;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:268:      } // if ( amr->patch[0][lv][PID]->son == -1 ) ... else ...
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:323:      amr->patch[0][lv][PID]->NPar_Copy = NParThisPatch;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:329:            amr->patch[0][lv][PID]->ParAtt_Copy[ AttIntIdx[v] ] = new real [NParThisPatch];
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:335:               amr->patch[0][lv][PID]->ParAtt_Copy[ AttIntIdx[v] ][p] = *RecvPtr++;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:341:            if ( amr->patch[0][lv][PID]->ParAtt_Copy[PAR_MASS][p] < (real)0.0 )
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:343:                          lv, PID, amr->patch[0][lv][PID]->ParAtt_Copy[PAR_MASS][p], p );
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:351:               const double *EdgeL     = amr->patch[0][lv][PID]->EdgeL;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:352:               const double *EdgeR     = amr->patch[0][lv][PID]->EdgeR;
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:353:               const real    ParPos[3] = { amr->patch[0][lv][PID]->ParAtt_Copy[PAR_POSX][p],
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:354:                                           amr->patch[0][lv][PID]->ParAtt_Copy[PAR_POSY][p],
Particle/LoadBalance/Par_LB_CollectParticleFromRealPatch.cpp:355:                                           amr->patch[0][lv][PID]->ParAtt_Copy[PAR_POSZ][p] };
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:69:      if ( Buff_PIDList[t] < amr->NPatchComma[lv][1]  ||  Buff_PIDList[t] >= amr->num[lv] )
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:71:                    t, Buff_PIDList[t], amr->NPatchComma[lv][1], amr->num[lv] );
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:92:      for (int t=0; t<Buff_NPatchTotal; t++)    Buff_LBIdxList[t] = amr->patch[0][lv][ Buff_PIDList[t] ]->LB_Idx;
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:179:   Mis_Matching_int( amr->NPatchComma[lv][1], amr->LB->IdxList_Real[lv], Real_NPatchTotal, Real_LBIdxList_Sort,
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:190:      Real_PIDList[ Real_LBIdxList_Sort_IdxTable[t] ] = amr->LB->IdxList_Real_IdxTable[lv][ Match_LBIdxList[t] ];
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:195:      if ( Real_PIDList[t] < 0  ||  Real_PIDList[t] >= amr->NPatchComma[lv][1] )
Particle/LoadBalance/Par_LB_MapBuffer2RealPatch.cpp:197:                    lv, t, Real_PIDList[t], amr->NPatchComma[lv][1] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:67:      NReal      [t] = amr->NPatchComma[lv][1];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:68:      NBuff      [t] = amr->NPatchComma[lv][3] - amr->NPatchComma[lv][1];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:74:      if ( amr->Par->R2B_Buff_PIDList[MainLv][t] != NULL )  free( amr->Par->R2B_Buff_PIDList[MainLv][t] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:76:      amr->Par->R2B_Buff_NPatchTotal[MainLv][t] = 0;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:77:      amr->Par->R2B_Buff_PIDList    [MainLv][t] = (int*)malloc( MemSize_R2B[t]*sizeof(int) );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:79:      if ( amr->Par->B2R_Buff_PIDList[MainLv][t] != NULL )  free( amr->Par->B2R_Buff_PIDList[MainLv][t] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:81:      amr->Par->B2R_Buff_NPatchTotal[MainLv][t] = 0;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:82:      amr->Par->B2R_Buff_PIDList    [MainLv][t] = (int*)malloc( MemSize_B2R[t]*sizeof(int) );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:88:      if ( amr->Par->F2S_Send_PIDList[FaLv] != NULL )    free( amr->Par->F2S_Send_PIDList[FaLv] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:90:      amr->Par->F2S_Send_NPatchTotal[FaLv] = 0;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:91:      amr->Par->F2S_Send_PIDList    [FaLv] = (int*)malloc( MemSize_F2S*sizeof(int) );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:118:               if ( amr->Par->R2B_Buff_NPatchTotal[MainLv][0] >= MemSize_R2B[0] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:121:                  amr->Par->R2B_Buff_PIDList[MainLv][0] = (int*)realloc( amr->Par->R2B_Buff_PIDList[MainLv][0],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:126:               amr->Par->R2B_Buff_PIDList[MainLv][0][ amr->Par->R2B_Buff_NPatchTotal[MainLv][0] ++ ] = SibPID;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:137:            FaPID = amr->patch[0][MainLv][PID0]->father;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:144:            FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[s];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:157:               if ( amr->Par->R2B_Buff_NPatchTotal[MainLv][1] >= MemSize_R2B[1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:160:                  amr->Par->R2B_Buff_PIDList[MainLv][1] = (int*)realloc( amr->Par->R2B_Buff_PIDList[MainLv][1],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:164:               amr->Par->R2B_Buff_PIDList[MainLv][1][ amr->Par->R2B_Buff_NPatchTotal[MainLv][1] ++ ] = FaSibPID;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:168:               if ( amr->Par->B2R_Buff_NPatchTotal[MainLv][1] >= MemSize_B2R[1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:171:                  amr->Par->B2R_Buff_PIDList[MainLv][1] = (int*)realloc( amr->Par->B2R_Buff_PIDList[MainLv][1],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:175:               amr->Par->B2R_Buff_PIDList[MainLv][1][ amr->Par->B2R_Buff_NPatchTotal[MainLv][1] ++ ] = FaSibPID;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:187:      if ( amr->patch[0][MainLv][PID]->son != -1 )    continue;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:191:         SibPID = amr->patch[0][MainLv][PID]->sibling[s];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:197:            if ( amr->Par->B2R_Buff_NPatchTotal[MainLv][0] >= MemSize_B2R[0] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:200:               amr->Par->B2R_Buff_PIDList[MainLv][0] = (int*)realloc( amr->Par->B2R_Buff_PIDList[MainLv][0],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:205:            amr->Par->B2R_Buff_PIDList[MainLv][0][ amr->Par->B2R_Buff_NPatchTotal[MainLv][0] ++ ] = SibPID;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:216:      Buff_NPatchTotal_Dup = amr->Par->R2B_Buff_NPatchTotal[MainLv][t];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:218:      Mis_Heapsort( Buff_NPatchTotal_Dup, amr->Par->R2B_Buff_PIDList[MainLv][t], NULL );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:220:      amr->Par->R2B_Buff_NPatchTotal[MainLv][t] = ( Buff_NPatchTotal_Dup > 0 ) ? 1 : 0;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:223:         if ( amr->Par->R2B_Buff_PIDList[MainLv][t][p] != amr->Par->R2B_Buff_PIDList[MainLv][t][p-1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:224:            amr->Par->R2B_Buff_PIDList[MainLv][t][ amr->Par->R2B_Buff_NPatchTotal[MainLv][t] ++ ]
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:225:               = amr->Par->R2B_Buff_PIDList[MainLv][t][p];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:228:      for (int p=1; p<amr->Par->R2B_Buff_NPatchTotal[MainLv][t]; p++)
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:229:         if ( amr->Par->R2B_Buff_PIDList[MainLv][t][p] <= amr->Par->R2B_Buff_PIDList[MainLv][t][p-1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:231:                       MainLv, t, p, amr->Par->R2B_Buff_PIDList[MainLv][t][p-1], amr->Par->R2B_Buff_PIDList[MainLv][t][p] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:236:      Buff_NPatchTotal_Dup = amr->Par->B2R_Buff_NPatchTotal[MainLv][t];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:238:      Mis_Heapsort( Buff_NPatchTotal_Dup, amr->Par->B2R_Buff_PIDList[MainLv][t], NULL );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:240:      amr->Par->B2R_Buff_NPatchTotal[MainLv][t] = ( Buff_NPatchTotal_Dup > 0 ) ? 1 : 0;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:243:         if ( amr->Par->B2R_Buff_PIDList[MainLv][t][p] != amr->Par->B2R_Buff_PIDList[MainLv][t][p-1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:244:            amr->Par->B2R_Buff_PIDList[MainLv][t][ amr->Par->B2R_Buff_NPatchTotal[MainLv][t] ++ ]
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:245:               = amr->Par->B2R_Buff_PIDList[MainLv][t][p];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:248:      for (int p=1; p<amr->Par->B2R_Buff_NPatchTotal[MainLv][t]; p++)
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:249:         if ( amr->Par->B2R_Buff_PIDList[MainLv][t][p] <= amr->Par->B2R_Buff_PIDList[MainLv][t][p-1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:251:                       MainLv, t, p, amr->Par->B2R_Buff_PIDList[MainLv][t][p-1], amr->Par->B2R_Buff_PIDList[MainLv][t][p] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:259:   for (FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:262:      if ( amr->patch[0][FaLv][FaPID]->son >= -1 )    continue;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:266:         FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[s];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:275:         if ( FaSibPID >= 0  &&  amr->patch[0][FaLv][FaSibPID]->son == -1 )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:278:            if ( amr->Par->F2S_Send_NPatchTotal[FaLv] >= MemSize_F2S )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:281:               amr->Par->F2S_Send_PIDList[FaLv] = (int*)realloc( amr->Par->F2S_Send_PIDList[FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:286:            amr->Par->F2S_Send_PIDList[FaLv][ amr->Par->F2S_Send_NPatchTotal[FaLv] ++ ] = FaPID;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:290:   } // for (FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:302:      Par_LB_MapBuffer2RealPatch( lv, amr->Par->R2B_Buff_NPatchTotal   [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:303:                                      amr->Par->R2B_Buff_PIDList       [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:304:                                      amr->Par->R2B_Buff_NPatchEachRank[MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:305:                                      amr->Par->R2B_Real_NPatchTotal   [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:306:                                      amr->Par->R2B_Real_PIDList       [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:307:                                      amr->Par->R2B_Real_NPatchEachRank[MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:310:      Par_LB_MapBuffer2RealPatch( lv, amr->Par->B2R_Buff_NPatchTotal   [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:311:                                      amr->Par->B2R_Buff_PIDList       [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:312:                                      amr->Par->B2R_Buff_NPatchEachRank[MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:313:                                      amr->Par->B2R_Real_NPatchTotal   [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:314:                                      amr->Par->B2R_Real_PIDList       [MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:315:                                      amr->Par->B2R_Real_NPatchEachRank[MainLv][t],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:324:      long *SonLBIdxList = new long [ amr->Par->F2S_Send_NPatchTotal[FaLv] ];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:328:      for (int p=0; p<amr->Par->F2S_Send_NPatchTotal[FaLv]; p++)
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:330:         FaPID    = amr->Par->F2S_Send_PIDList[FaLv][p];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:332:         SonLBIdx = 8*amr->patch[0][FaLv][FaPID]->LB_Idx;   // faster, LB_Idx of one of the eight sons
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:334:         SonLBIdx = LB_Corner2Index( MainLv, amr->patch[0][FaLv][FaPID]->corner, CHECK_ON );    // LB_Idx of son 0
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:341:      Par_LB_MapBuffer2RealPatch( MainLv, amr->Par->F2S_Send_NPatchTotal   [FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:342:                                          amr->Par->F2S_Send_PIDList       [FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:343:                                          amr->Par->F2S_Send_NPatchEachRank[FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:344:                                          amr->Par->F2S_Recv_NPatchTotal   [FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:345:                                          amr->Par->F2S_Recv_PIDList       [FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:346:                                          amr->Par->F2S_Recv_NPatchEachRank[FaLv],
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:351:      if ( amr->Par->F2S_Send_NPatchEachRank[FaLv][MPI_Rank] != 0 )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:353:                    amr->Par->F2S_Send_NPatchEachRank[FaLv][MPI_Rank], FaLv );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:355:      if ( amr->Par->F2S_Recv_NPatchEachRank[FaLv][MPI_Rank] != 0 )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:357:                    amr->Par->F2S_Recv_NPatchEachRank[FaLv][MPI_Rank], FaLv );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:361:      for (int p=0; p<amr->Par->F2S_Recv_NPatchTotal[FaLv]; p++)
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:363:         SonPID = amr->Par->F2S_Recv_PIDList[FaLv][p];
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:364:         FaPID  = amr->patch[0][MainLv][SonPID]->father;
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:368:         if ( FaPID < amr->NPatchComma[FaLv][1] )
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:370:                       FaLv, SonPID, FaPID, amr->NPatchComma[FaLv][1] );
Particle/LoadBalance/Par_LB_RecordExchangeParticlePatchID.cpp:373:         amr->Par->F2S_Recv_PIDList[FaLv][p] = FaPID;
Particle/LoadBalance/Par_LB_Refine_SendParticle2Father.cpp:63:      if ( amr->patch[0][FaLv][FaPID]->son != -1 )
Particle/LoadBalance/Par_LB_Refine_SendParticle2Father.cpp:64:         Aux_Error( ERROR_INFO, "FaLv %d, FaPID %d, SonPID = %d != -1 !!\n", FaLv, FaPID, amr->patch[0][FaLv][FaPID]->son );
Particle/LoadBalance/Par_LB_Refine_SendParticle2Father.cpp:66:      if ( amr->patch[0][FaLv][FaPID]->NPar != 0 )
Particle/LoadBalance/Par_LB_Refine_SendParticle2Father.cpp:67:         Aux_Error( ERROR_INFO, "FaLv %d, FaPID %d, NPar = %d != 0 !!\n", FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:129:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:131:      if ( amr->patch[0][FaLv][FaPID]->NPar_Copy != -1 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:133:                    FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar_Copy );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:137:         if ( amr->patch[0][FaLv][FaPID]->ParAtt_Copy[v] != NULL )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:139:                       FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar_Copy, v );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:158:            amr->Par->R2B_Buff_NPatchTotal[FaLv][0], amr->Par->R2B_Buff_PIDList[FaLv][0], amr->Par->R2B_Buff_NPatchEachRank[FaLv][0],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:159:            amr->Par->R2B_Real_NPatchTotal[FaLv][0], amr->Par->R2B_Real_PIDList[FaLv][0], amr->Par->R2B_Real_NPatchEachRank[FaLv][0],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:171:            amr->Par->R2B_Buff_NPatchTotal[FaLv][1], amr->Par->R2B_Buff_PIDList[FaLv][1], amr->Par->R2B_Buff_NPatchEachRank[FaLv][1],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:172:            amr->Par->R2B_Real_NPatchTotal[FaLv][1], amr->Par->R2B_Real_PIDList[FaLv][1], amr->Par->R2B_Real_NPatchEachRank[FaLv][1],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:189:   const int PatchScaleFaLv = PS1 * amr->scale[FaLv];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:202:      NPatchAll += amr->NPatchComma[lv][1];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:204:      if ( q > 0 )   NPatchAcc[q] = NPatchAcc[q-1] + amr->NPatchComma[lv-1][1];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:218:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:221:      if ( amr->patch[0][lv][PID]->NPar == 0 )  continue;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:224:      if ( amr->patch[0][lv][PID]->son != -1 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:226:                    lv, PID, amr->patch[0][lv][PID]->son, amr->patch[0][lv][PID]->NPar );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:228:      if ( amr->patch[0][lv][PID]->NPar < 0 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:229:         Aux_Error( ERROR_INFO, "lv %d, PID %d, NPar %d < 0 !!\n", lv, PID, amr->patch[0][lv][PID]->NPar );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:234:      const long LB_Idx = amr->patch[0][lv][PID]->LB_Idx / ( 1 << (3*(lv-FaLv)) );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:237:      for (int d=0; d<3; d++)    FaCr[d] = amr->patch[0][lv][PID]->corner[d] - amr->patch[0][lv][PID]->corner[d]%PatchScaleFaLv;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:244:      NParForEachRank  [TRank ] += amr->patch[0][lv][PID]->NPar;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:287:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:289:      const int NParThisPatch = amr->patch[0][lv][PID]->NPar;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:311:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:313:         const int  NParThisPatch = amr->patch[0][lv][PID]->NPar;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:340:               const long ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:342:               for (int v=0; v<NAtt; v++)    SendPtr[v] = amr->Par->Attribute[ AttIntIdx[v] ][ParID];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:348://                if ( amr->Par->Time[ParID] < (real)0.0 )  continue;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:350:                  if ( amr->Par->Time[ParID] < (real)0.0 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:351:                     Aux_Error( ERROR_INFO, "ParTime[%ld] = %21.14e < 0.0 !!\n", ParID, amr->Par->Time[ParID] );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:362:      } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:415:   Mis_Matching_int( amr->NPatchComma[FaLv][1], amr->LB->IdxList_Real[FaLv], NRecvPatchTotal, RecvBuf_LBIdxEachPatch,
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:427:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:428:      if ( amr->patch[0][FaLv][FaPID]->son != -1 )    amr->patch[0][FaLv][FaPID]->NPar_Copy = amr->patch[0][FaLv][FaPID]->NPar;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:441:      FaPID_Match = amr->LB->IdxList_Real_IdxTable[FaLv][ Match_LBIdxEachPatch[t] ];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:445:      if ( amr->patch[0][FaLv][FaPID_Match]->son == -1 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:450:      amr->patch[0][FaLv][FaPID_Match]->NPar_Copy += RecvBuf_NParEachPatch[RecvBuf_Idx];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:458:      if ( FaPIDList[t] < 0  ||  FaPIDList[t] >= amr->NPatchComma[FaLv][1] )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:460:                    FaLv, t, FaPIDList[t], amr->NPatchComma[FaLv][1] );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:466:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:468:      if ( amr->patch[0][FaLv][FaPID]->NPar_Copy > 0 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:471:            amr->patch[0][FaLv][FaPID]->ParAtt_Copy[ AttIntIdx[v] ] = new real [ amr->patch[0][FaLv][FaPID]->NPar_Copy ];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:475:         amr->patch[0][FaLv][FaPID]->NPar_Copy = 0;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:491:      NPar_Copy_Old = amr->patch[0][FaLv][FaPID_Match]->NPar_Copy;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:493:      amr->patch[0][FaLv][FaPID_Match]->NPar_Copy += RecvBuf_NParEachPatch[t];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:500:      for (int p=NPar_Copy_Old; p<amr->patch[0][FaLv][FaPID_Match]->NPar_Copy; p++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:505:            if ( amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[ AttIntIdx[v] ] == NULL )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:507:                          FaLv, FaPID_Match, amr->patch[0][FaLv][FaPID_Match]->NPar_Copy, v );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:512:            amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[ AttIntIdx[v] ][p] = *RecvPtr++;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:517:         if ( amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[PAR_MASS][p] < (real)0.0 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:519:                       FaLv, FaPID_Match, amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[PAR_MASS][p], p );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:524:            const double *EdgeL     = amr->patch[0][FaLv][FaPID_Match]->EdgeL;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:525:            const double *EdgeR     = amr->patch[0][FaLv][FaPID_Match]->EdgeR;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:526:            const real    ParPos[3] = { amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[PAR_POSX][p],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:527:                                        amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[PAR_POSY][p],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:528:                                        amr->patch[0][FaLv][FaPID_Match]->ParAtt_Copy[PAR_POSZ][p] };
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:538:      } // for (int p=NPar_Copy_Old; p<amr->patch[0][FaLv][FaPID_Match]->NPar_Copy; p++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:554:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:556:      if ( amr->patch[0][FaLv][FaPID]->son != -1  &&  amr->patch[0][FaLv][FaPID]->NPar > 0 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:558:         for (int p=0; p<amr->patch[0][FaLv][FaPID]->NPar; p++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:560:            const long ParID = amr->patch[0][FaLv][FaPID]->ParList[p];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:561:            const int  idx   = amr->patch[0][FaLv][FaPID]->NPar_Copy + p;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:565:            if ( amr->Par->Integ == PAR_INTEG_KDK  &&  amr->Par->Time[ParID] >= (real)0.0  &&  amr->Par->Type[ParID] != PTYPE_TRACER )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:567:                          FaLv, FaPID, ParID, amr->Par->Time[ParID], (int)amr->Par->Type[ParID] );
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:574:               amr->patch[0][FaLv][FaPID]->ParAtt_Copy[ AttIntIdx[v] ][idx] = amr->Par->Attribute[ AttIntIdx[v] ][ParID];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:575:         } // for (int p=0; p<amr->patch[0][FaLv][FaPID]->NPar; p++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:578:         amr->patch[0][FaLv][FaPID]->NPar_Copy += amr->patch[0][FaLv][FaPID]->NPar;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:579:      } // if ( amr->patch[0][FaLv][FaPID]->son != -1  &&  amr->patch[0][FaLv][FaPID]->NPar > 0 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:580:   } // for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:588:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:589:      NParLocal_Get += ( amr->patch[0][FaLv][FaPID]->son == -1 ) ? amr->patch[0][FaLv][FaPID]->NPar :
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:590:                                                                   amr->patch[0][FaLv][FaPID]->NPar_Copy;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:592:   for (int lv=FaLv; lv<=MAX_LEVEL; lv++)    NParLocal_Check += amr->Par->NPar_Lv[lv];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:616:         amr->Par->R2B_Buff_NPatchTotal[FaLv][0], amr->Par->R2B_Buff_PIDList[FaLv][0], amr->Par->R2B_Buff_NPatchEachRank[FaLv][0],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:617:         amr->Par->R2B_Real_NPatchTotal[FaLv][0], amr->Par->R2B_Real_PIDList[FaLv][0], amr->Par->R2B_Real_NPatchEachRank[FaLv][0],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:629:         amr->Par->R2B_Buff_NPatchTotal[FaLv][1], amr->Par->R2B_Buff_PIDList[FaLv][1], amr->Par->R2B_Buff_NPatchEachRank[FaLv][1],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:630:         amr->Par->R2B_Real_NPatchTotal[FaLv][1], amr->Par->R2B_Real_PIDList[FaLv][1], amr->Par->R2B_Real_NPatchEachRank[FaLv][1],
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:655:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:659:         delete [] amr->patch[0][lv][PID]->ParAtt_Copy[v];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:660:         amr->patch[0][lv][PID]->ParAtt_Copy[v] = NULL;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:664:      amr->patch[0][lv][PID]->NPar_Copy = -1;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:670:   for (int p=0; p<amr->Par->R2B_Buff_NPatchTotal[lv][0]; p++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:672:      const int PID = amr->Par->R2B_Buff_PIDList[lv][0][p];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:676:         delete [] amr->patch[0][lv][PID]->ParAtt_Copy[v];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:677:         amr->patch[0][lv][PID]->ParAtt_Copy[v] = NULL;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:681:      amr->patch[0][lv][PID]->NPar_Copy = -1;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:689:   for (int p=0; p<amr->Par->R2B_Buff_NPatchTotal[lv][1]; p++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:691:      const int FaPID = amr->Par->R2B_Buff_PIDList[lv][1][p];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:695:         delete [] amr->patch[0][FaLv][FaPID]->ParAtt_Copy[v];
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:696:         amr->patch[0][FaLv][FaPID]->ParAtt_Copy[v] = NULL;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:700:      amr->patch[0][FaLv][FaPID]->NPar_Copy = -1;
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:710:      for (int PID=0; PID<amr->num[TLv]; PID++)
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:713:         if ( amr->patch[0][TLv][PID]->ParAtt_Copy[v] != NULL )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:717:         if ( amr->patch[0][TLv][PID]->NPar_Copy != -1 )
Particle/LoadBalance/Par_LB_CollectParticle2OneLevel.cpp:719:                       TLv, PID, amr->patch[0][TLv][PID]->NPar_Copy );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:77:      if ( PID < 0  ||  PID >= amr->num[lv] )
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:79:                    lv, m, t, PID, amr->NPatchComma[lv][1], amr->num[lv] );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:81:      if ( amr->patch[0][lv][PID]->NPar < 0 )
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:82:         Aux_Error( ERROR_INFO, "lv %d, PID %d, NPar = %d < 0 !!\n", lv, PID, amr->patch[0][lv][PID]->NPar );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:84:      if ( amr->patch[0][lv][PID]->NPar_Copy != -1 )
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:85:         Aux_Error( ERROR_INFO, "lv %d, PID %d, NPar_Copy = %d != -1 !!\n", lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:88:      if ( amr->patch[0][lv][PID]->ParAtt_Copy[v] != NULL )
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:90:                    lv, PID, amr->patch[0][lv][PID]->NPar_Copy, v );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:125:      NParThisPatch = amr->patch[0][lv][PID]->NPar;
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:156:      ParList = amr->patch[0][lv][PID]->ParList;
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:169:         for (int v=0; v<PAR_NATT_TOTAL; v++)   *SendPtr++ = amr->Par->Attribute[v][ParID];
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:172:         amr->Par->RemoveOneParticle( ParID, PAR_INACTIVE_MPI );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:176:      const real *PType = amr->Par->Type;
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:177:      amr->patch[0][lv][PID]->RemoveParticle( NULL_INT, NULL, &amr->Par->NPar_Lv[lv],
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:236:         ParID    = amr->Par->AddOneParticle( RecvPtr );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:244:         if ( amr->Par->Attribute[PAR_MASS][ParID] < (real)0.0 )
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:246:                       ParID, amr->Par->Attribute[PAR_MASS][ParID] );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:253:      const real *PType = amr->Par->Type;
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:255://    do not set ParPos too early since pointers to the particle repository (e.g., amr->Par->PosX)
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:256://    may change after calling amr->Par->AddOneParticle
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:257:      const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:261:      amr->patch[0][lv][PID]->AddParticle( NParThisPatch, NewParIDList, &amr->Par->NPar_Lv[lv],
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:262:                                           PType, ParPos, amr->Par->NPar_AcPlusInac, Comment );
Particle/LoadBalance/Par_LB_ExchangeParticleBetweenPatch.cpp:264:      amr->patch[0][lv][PID]->AddParticle( NParThisPatch, NewParIDList, &amr->Par->NPar_Lv[lv],
Particle/Par_AddParticleAfterInit.cpp:23:// Return      :  1. amr->Par
Particle/Par_AddParticleAfterInit.cpp:39:      const int NFaPatch = amr->NPatchComma[FaLv][1];
Particle/Par_Aux_Record_ParticleCount.cpp:31:   const long NPar_Tot = amr->Par->NPar_Active_AllRank;
Particle/Par_Aux_Record_ParticleCount.cpp:39:   MPI_Gather( amr->Par->NPar_Lv, NLEVEL, MPI_LONG, NPar_EachRank[0], NLEVEL, MPI_LONG, 0, MPI_COMM_WORLD );
Particle/Par_Aux_Record_ParticleCount.cpp:105:         WLoad_Max += (double)amr->NUpdateLv[lv]*NPar_Max[lv];
Particle/Par_Aux_Record_ParticleCount.cpp:106:         WLoad_Ave += (double)amr->NUpdateLv[lv]*NPar_Ave[lv];
Particle/Par_CountParticleInDescendant.cpp:27:   const int SonPID0 = amr->patch[0][FaLv][FaPID]->son;
Particle/Par_CountParticleInDescendant.cpp:38:         if ( amr->patch[0][SonLv][SonPID]->son != -1 )  NPar_Sum += Par_CountParticleInDescendant( SonLv, SonPID );
Particle/Par_CountParticleInDescendant.cpp:39:         else                                            NPar_Sum += amr->patch[0][SonLv][SonPID]->NPar;
Particle/Par_Output_BinaryFile.cpp:39:   real *attribute_buff = (real*)malloc( sizeof(real)*amr->Par->NPar_AcPlusInac );
Particle/Par_Output_BinaryFile.cpp:51:            for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Particle/Par_Output_BinaryFile.cpp:54:               if ( amr->Par->Mass[p] < 0.0 )   continue;
Particle/Par_Output_BinaryFile.cpp:55:               else                             attribute_buff[ counter ++ ] = amr->Par->Attribute[v][p];
Particle/Par_Output_TextFile.cpp:33:               Time[0], Step, amr->Par->NPar_Active_AllRank );
Particle/Par_Output_TextFile.cpp:53:         for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Particle/Par_Output_TextFile.cpp:56:            if ( amr->Par->Mass[p] < 0.0 )   continue;
Particle/Par_Output_TextFile.cpp:58:            for (int v=0; v<PAR_NATT_TOTAL; v++)   fprintf( File, "  %21.14e", amr->Par->Attribute[v][p] );
Particle/Par_Aux_Check_Particle.cpp:30:   const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_Aux_Check_Particle.cpp:34:   bool   *ParHome    = new bool [amr->Par->NPar_AcPlusInac];  // true/false --> particle has home/is homeless
Particle/Par_Aux_Check_Particle.cpp:42:   for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)   ParHome[p] = false;
Particle/Par_Aux_Check_Particle.cpp:48:   MPI_Allreduce( &amr->Par->NPar_Active, &NPar_Active_AllRank_Expect, 1, MPI_LONG, MPI_SUM, MPI_COMM_WORLD );
Particle/Par_Aux_Check_Particle.cpp:58:         for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_Aux_Check_Particle.cpp:60:            NParThisPatch = amr->patch[0][lv][PID]->NPar;
Particle/Par_Aux_Check_Particle.cpp:62:            if ( amr->patch[0][lv][PID]->son == -1 )
Particle/Par_Aux_Check_Particle.cpp:68:               EdgeL = amr->patch[0][lv][PID]->EdgeL;
Particle/Par_Aux_Check_Particle.cpp:69:               EdgeR = amr->patch[0][lv][PID]->EdgeR;
Particle/Par_Aux_Check_Particle.cpp:73:                  ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_Aux_Check_Particle.cpp:124:                  if ( amr->Par->Mass[ParID] < 0.0 )
Particle/Par_Aux_Check_Particle.cpp:142:                                  amr->Par->Mass[ParID] );
Particle/Par_Aux_Check_Particle.cpp:150:                  if ( amr->Par->Type[ParID] < (real)0  ||  amr->Par->Type[ParID] >= (real)PAR_NTYPE )
Particle/Par_Aux_Check_Particle.cpp:155:                  if ( amr->Par->Type[ParID] != PTYPE_TRACER )
Particle/Par_Aux_Check_Particle.cpp:161:                  if ( amr->Par->Type[ParID] == PTYPE_TRACER )
Particle/Par_Aux_Check_Particle.cpp:167:                  if ( amr->Par->Type[ParID] == PTYPE_TRACER  &&  amr->Par->Mass[ParID] != (real)0.0 )
Particle/Par_Aux_Check_Particle.cpp:188:                                  MPI_Rank, lv, PID, ParID, (int)amr->Par->Type[ParID], amr->Par->Mass[ParID] );
Particle/Par_Aux_Check_Particle.cpp:192:            } // if ( amr->patch[0][lv][PID]->son == -1 )
Particle/Par_Aux_Check_Particle.cpp:211:               Aux_Message( stderr, "Check 2: %4d  %2d  %7d  %7d  %7d\n", MPI_Rank, lv, PID, amr->patch[0][lv][PID]->son, NParThisPatch );
Particle/Par_Aux_Check_Particle.cpp:212:            } // if ( amr->patch[0][lv][PID]->son == -1 ) ... else ...
Particle/Par_Aux_Check_Particle.cpp:213:         } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++); for (int lv=0; lv<NLEVEL; lv++)
Particle/Par_Aux_Check_Particle.cpp:218:         for (int PID=0; PID<amr->num[lv]; PID++)
Particle/Par_Aux_Check_Particle.cpp:220:            if ( amr->patch[0][lv][PID]->NPar_Copy != -1 )
Particle/Par_Aux_Check_Particle.cpp:232:                               lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Particle/Par_Aux_Check_Particle.cpp:240:         if ( NParInLeaf != amr->Par->NPar_Active )
Particle/Par_Aux_Check_Particle.cpp:252:                            NParInLeaf, amr->Par->NPar_Active );
Particle/Par_Aux_Check_Particle.cpp:253:               Aux_Message( stderr, "         (inactive + active particles = %ld)\n", amr->Par->NPar_AcPlusInac );
Particle/Par_Aux_Check_Particle.cpp:260:         for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Particle/Par_Aux_Check_Particle.cpp:262:            if ( amr->Par->Mass[p] >= 0.0  &&  ParHome[p] == false )
Particle/Par_Aux_Check_Particle.cpp:283:         if ( amr->Par->NPar_Active + amr->Par->NPar_Inactive != amr->Par->NPar_AcPlusInac )
Particle/Par_Aux_Check_Particle.cpp:295:                            amr->Par->NPar_Active, amr->Par->NPar_Inactive,
Particle/Par_Aux_Check_Particle.cpp:296:                            amr->Par->NPar_Active+amr->Par->NPar_Inactive, amr->Par->NPar_AcPlusInac );
Particle/Par_Aux_Check_Particle.cpp:302:         if ( amr->Par->NPar_Active_AllRank != NPar_Active_AllRank_Expect )
Particle/Par_Aux_Check_Particle.cpp:314:                            amr->Par->NPar_Active_AllRank, NPar_Active_AllRank_Expect );
Particle/Par_Aux_Check_Particle.cpp:321:         for (int lv=0; lv<NLEVEL; lv++)  NPar_Lv_Sum += amr->Par->NPar_Lv[lv];
Particle/Par_Aux_Check_Particle.cpp:323:         if ( NPar_Lv_Sum != amr->Par->NPar_Active )
Particle/Par_Aux_Check_Particle.cpp:335:                            NPar_Lv_Sum, amr->Par->NPar_Active );
Particle/Par_Aux_GetConservedQuantity.cpp:44:   for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:47:      if ( amr->Par->Mass[p] > (real)0.0  &&  amr->Par->Type[p] != PTYPE_TRACER )
Particle/Par_Aux_GetConservedQuantity.cpp:49:         Mass_ThisRank += amr->Par->Mass[p];
Particle/Par_Aux_GetConservedQuantity.cpp:50:         MomX_ThisRank += amr->Par->Mass[p]*amr->Par->VelX[p];
Particle/Par_Aux_GetConservedQuantity.cpp:51:         MomY_ThisRank += amr->Par->Mass[p]*amr->Par->VelY[p];
Particle/Par_Aux_GetConservedQuantity.cpp:52:         MomZ_ThisRank += amr->Par->Mass[p]*amr->Par->VelZ[p];
Particle/Par_Aux_GetConservedQuantity.cpp:53:         Ek_ThisRank   += 0.5*amr->Par->Mass[p]*( SQR(amr->Par->VelX[p]) + SQR(amr->Par->VelY[p]) + SQR(amr->Par->VelZ[p]) );
Particle/Par_Aux_GetConservedQuantity.cpp:74:   const ParInterp_t IntScheme  = amr->Par->Interp;
Particle/Par_Aux_GetConservedQuantity.cpp:83:   const int  PotGhost          = amr->Par->GhostSize;
Particle/Par_Aux_GetConservedQuantity.cpp:86:   const real *Pos[3]           = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_Aux_GetConservedQuantity.cpp:87:   const real *Mass             = amr->Par->Mass;
Particle/Par_Aux_GetConservedQuantity.cpp:88:   const real *PType            = amr->Par->Type;
Particle/Par_Aux_GetConservedQuantity.cpp:104:   if ( amr->Par->ImproveAcc  &&  PotGhost != GRA_GHOST_SIZE-1 )
Particle/Par_Aux_GetConservedQuantity.cpp:105:      Aux_Error( ERROR_INFO, "PotGhost (%d) != GRA_GHOST_SIZE-1 (%d) for amr->Par->ImproveAcc !!\n",
Particle/Par_Aux_GetConservedQuantity.cpp:110:   if ( amr->Par->ImproveAcc )
Particle/Par_Aux_GetConservedQuantity.cpp:111:      Aux_Error( ERROR_INFO, "amr->Par->ImproveAcc must work with STORE_POT_GHOST !!\n" );
Particle/Par_Aux_GetConservedQuantity.cpp:122:      dh          = amr->dh[lv];
Particle/Par_Aux_GetConservedQuantity.cpp:128:      if ( amr->Par->ImproveAcc )
Particle/Par_Aux_GetConservedQuantity.cpp:130:         if      (  Mis_CompareRealValue( PrepPotTime, amr->PotSgTime[lv][   amr->PotSg[lv] ], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:131:            PotSg =   amr->PotSg[lv];
Particle/Par_Aux_GetConservedQuantity.cpp:133:         else if (  Mis_CompareRealValue( PrepPotTime, amr->PotSgTime[lv][ 1-amr->PotSg[lv] ], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:134:            PotSg = 1-amr->PotSg[lv];
Particle/Par_Aux_GetConservedQuantity.cpp:138:                       lv, PrepPotTime, amr->PotSgTime[lv][0], amr->PotSgTime[lv][1] );
Particle/Par_Aux_GetConservedQuantity.cpp:158:      for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Particle/Par_Aux_GetConservedQuantity.cpp:167:            if ( amr->patch[0][lv][PID]->NPar > 0 )
Particle/Par_Aux_GetConservedQuantity.cpp:181:         if ( amr->Par->ImproveAcc )
Particle/Par_Aux_GetConservedQuantity.cpp:187:               if ( amr->patch[0][lv][PID]->NPar == 0 )  continue;   // skip patches with no particles
Particle/Par_Aux_GetConservedQuantity.cpp:192:                  Pot3D[P][k-didx][j-didx][i-didx] = amr->patch[PotSg][lv][PID]->pot_ext[k][j][i];
Particle/Par_Aux_GetConservedQuantity.cpp:206:            if ( amr->patch[0][lv][PID]->NPar == 0 )  continue;   // skip patches with no particles
Particle/Par_Aux_GetConservedQuantity.cpp:215:                  for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:217:                     ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_Aux_GetConservedQuantity.cpp:225:                        idx[d] = int( ( Pos[d][ParID] - amr->patch[0][lv][PID]->EdgeL[d] )*_dh );
Particle/Par_Aux_GetConservedQuantity.cpp:231:                           if (  ! Mis_CompareRealValue( Pos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeL[d], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:233:                                      d, Pos[d][ParID], amr->patch[0][lv][PID]->EdgeL[d], idx[d] );
Particle/Par_Aux_GetConservedQuantity.cpp:242:                           if (  ! Mis_CompareRealValue( Pos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeR[d], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:244:                                         d, Pos[d][ParID], amr->patch[0][lv][PID]->EdgeR[d], idx[d] );
Particle/Par_Aux_GetConservedQuantity.cpp:253:                  } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:265:                  for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:267:                     ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_Aux_GetConservedQuantity.cpp:275:                        dr      [d]  = ( Pos[d][ParID] - amr->patch[0][lv][PID]->EdgeL[d] )*_dh + PotGhost - 0.5;
Particle/Par_Aux_GetConservedQuantity.cpp:285:                           if (  ! Mis_CompareRealValue( Pos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeL[d], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:287:                                      d, Pos[d][ParID], amr->patch[0][lv][PID]->EdgeL[d], idxLR[0][d], idxLR[1][d] );
Particle/Par_Aux_GetConservedQuantity.cpp:297:                           if (  ! Mis_CompareRealValue( Pos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeR[d], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:299:                                      d, Pos[d][ParID], amr->patch[0][lv][PID]->EdgeR[d], idxLR[0][d], idxLR[1][d] );
Particle/Par_Aux_GetConservedQuantity.cpp:317:                  } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:329:                  for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:331:                     ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_Aux_GetConservedQuantity.cpp:339:                        dr       [d]  = ( Pos[d][ParID] - amr->patch[0][lv][PID]->EdgeL[d] )*_dh + PotGhost;
Particle/Par_Aux_GetConservedQuantity.cpp:349:                           if (  ! Mis_CompareRealValue( Pos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeL[d], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:351:                                      d, Pos[d][ParID], amr->patch[0][lv][PID]->EdgeL[d], idxLCR[0][d], idxLCR[2][d] );
Particle/Par_Aux_GetConservedQuantity.cpp:362:                           if (  ! Mis_CompareRealValue( Pos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeR[d], NULL, false )  )
Particle/Par_Aux_GetConservedQuantity.cpp:364:                                      d, Pos[d][ParID], amr->patch[0][lv][PID]->EdgeR[d], idxLCR[0][d], idxLCR[2][d] );
Particle/Par_Aux_GetConservedQuantity.cpp:384:                  } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_Aux_GetConservedQuantity.cpp:391:      } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Particle/Par_Aux_InitCheck.cpp:26:   const real *Mass   =   amr->Par->Mass;
Particle/Par_Aux_InitCheck.cpp:27:   const real *Pos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_Aux_InitCheck.cpp:28:   const real *Type   =   amr->Par->Type;
Particle/Par_Aux_InitCheck.cpp:34:   for (long ParID=0; ParID<amr->Par->NPar_AcPlusInac; ParID++)
Particle/Par_Aux_InitCheck.cpp:63:         if ( Pos[d][ParID] < (real)0.0  ||  Pos[d][ParID] >= amr->BoxSize[d] )
Particle/Par_Aux_InitCheck.cpp:68:                       d, ParID, Pos[d][ParID], amr->BoxSize[d] );
Particle/Par_Aux_InitCheck.cpp:73:                        d, ParID, Pos[d][ParID], amr->BoxSize[d] );
Particle/Par_Aux_InitCheck.cpp:80:   for (long ParID=0; ParID<amr->Par->NPar_AcPlusInac; ParID++)
Particle/Par_Aux_InitCheck.cpp:84:         amr->Par->RemoveOneParticle( ParID, PAR_INACTIVE_OUTSIDE );
Particle/Par_Aux_InitCheck.cpp:93:   MPI_Allreduce( &amr->Par->NPar_Active, &amr->Par->NPar_Active_AllRank, 1, MPI_LONG, MPI_SUM, MPI_COMM_WORLD );
Particle/Par_CollectParticle2OneLevel.cpp:100:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/Par_CollectParticle2OneLevel.cpp:104:      if ( amr->patch[0][FaLv][FaPID]->NPar_Copy != -1  ||  amr->patch[0][FaLv][FaPID]->ParList_Copy != NULL )
Particle/Par_CollectParticle2OneLevel.cpp:106:                    FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar_Copy );
Particle/Par_CollectParticle2OneLevel.cpp:112:      if ( amr->patch[0][FaLv][FaPID]->son == -1 )    continue;
Particle/Par_CollectParticle2OneLevel.cpp:116:      amr->patch[0][FaLv][FaPID]->NPar_Copy = Par_CountParticleInDescendant( FaLv, FaPID );
Particle/Par_CollectParticle2OneLevel.cpp:120:      amr->patch[0][FaLv][FaPID]->NPar_Copy += amr->patch[0][FaLv][FaPID]->NPar;
Particle/Par_CollectParticle2OneLevel.cpp:124:      if ( amr->Par->Integ == PAR_INTEG_KDK )
Particle/Par_CollectParticle2OneLevel.cpp:125:      for (int p=0; p<amr->patch[0][FaLv][FaPID]->NPar; p++)
Particle/Par_CollectParticle2OneLevel.cpp:127:         const long ParID = amr->patch[0][FaLv][FaPID]->ParList[p];
Particle/Par_CollectParticle2OneLevel.cpp:129:         if ( amr->Par->Time[ParID] >= (real)0.0  &&  amr->Par->Type[ParID] != PTYPE_TRACER )
Particle/Par_CollectParticle2OneLevel.cpp:131:                       FaLv, FaPID, ParID, amr->Par->Time[ParID], (int)amr->Par->Type[ParID] );
Particle/Par_CollectParticle2OneLevel.cpp:137:      if ( JustCountNPar  ||  amr->patch[0][FaLv][FaPID]->NPar_Copy == 0 )    continue;
Particle/Par_CollectParticle2OneLevel.cpp:141:      amr->patch[0][FaLv][FaPID]->ParList_Copy = new long [ amr->patch[0][FaLv][FaPID]->NPar_Copy ];
Particle/Par_CollectParticle2OneLevel.cpp:146:      CollectParticle( FaLv, FaPID, NPar_SoFar, amr->patch[0][FaLv][FaPID]->ParList_Copy );
Particle/Par_CollectParticle2OneLevel.cpp:150:      for (int p=0; p<amr->patch[0][FaLv][FaPID]->NPar; p++)
Particle/Par_CollectParticle2OneLevel.cpp:152:         const long ParID = amr->patch[0][FaLv][FaPID]->ParList[p];
Particle/Par_CollectParticle2OneLevel.cpp:154:         amr->patch[0][FaLv][FaPID]->ParList_Copy[ NPar_SoFar ++ ] = ParID;
Particle/Par_CollectParticle2OneLevel.cpp:160:      if ( NPar_SoFar != amr->patch[0][FaLv][FaPID]->NPar_Copy )
Particle/Par_CollectParticle2OneLevel.cpp:162:                    NPar_SoFar, amr->patch[0][FaLv][FaPID]->NPar_Copy );
Particle/Par_CollectParticle2OneLevel.cpp:164:   } // for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/Par_CollectParticle2OneLevel.cpp:203:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/Par_CollectParticle2OneLevel.cpp:205:      if ( amr->patch[0][FaLv][FaPID]->ParList_Copy != NULL )
Particle/Par_CollectParticle2OneLevel.cpp:207:         delete [] amr->patch[0][FaLv][FaPID]->ParList_Copy;
Particle/Par_CollectParticle2OneLevel.cpp:208:         amr->patch[0][FaLv][FaPID]->ParList_Copy = NULL;
Particle/Par_CollectParticle2OneLevel.cpp:212:      amr->patch[0][FaLv][FaPID]->NPar_Copy = -1;
Particle/Par_CollectParticle2OneLevel.cpp:245:   const int SonPID0 = amr->patch[0][FaLv][FaPID]->son;
Particle/Par_CollectParticle2OneLevel.cpp:254:         if ( amr->patch[0][SonLv][SonPID]->son != -1 )  CollectParticle( SonLv, SonPID, NPar_SoFar, ParList );
Particle/Par_CollectParticle2OneLevel.cpp:257:            for (int p=0; p<amr->patch[0][SonLv][SonPID]->NPar; p++)
Particle/Par_CollectParticle2OneLevel.cpp:258:               ParList[ NPar_SoFar ++ ] = amr->patch[0][SonLv][SonPID]->ParList[p];
Particle/Par_EquilibriumIC.cpp:124:      if ( params.Cloud_Center[d] == NoDef_double )  params.Cloud_Center[d] = 0.5*amr->BoxSize[d];
Particle/Par_EquilibriumIC.cpp:147:   if ( params.Cloud_R0<amr->dh[MAX_LEVEL] )Aux_Message( stdout, "WARNING : Characteristic length R0:%f is smaller than spatial resolution %f!\n",params.Cloud_R0,amr->dh[MAX_LEVEL] );
Particle/Par_EquilibriumIC.cpp:356:         Pos_AllRank[d][p] = FMOD( Pos_AllRank[d][p]+(real)amr->BoxSize[d], (real)amr->BoxSize[d] );
Particle/Par_FindHomePatch_UniformGrid.cpp:19://                3. After calling this function, the amr->Par structure will be reconstructed and
Particle/Par_FindHomePatch_UniformGrid.cpp:32:// Return      :  1. amr->Par
Particle/Par_FindHomePatch_UniformGrid.cpp:56:   const long NOldPar = ( OldParOnly ) ? 0 : amr->Par->NPar_AcPlusInac;
Particle/Par_FindHomePatch_UniformGrid.cpp:65:   const long  NTarPar   = amr->Par->NPar_AcPlusInac - NOldPar;
Particle/Par_FindHomePatch_UniformGrid.cpp:66:   const real *Pos[3]    = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_FindHomePatch_UniformGrid.cpp:67:   const real *PType     = amr->Par->Type;
Particle/Par_FindHomePatch_UniformGrid.cpp:68:   const int   NReal     = amr->NPatchComma[lv][1];
Particle/Par_FindHomePatch_UniformGrid.cpp:88:// --> do not use amr->LB->IdxList_Real[] since it may not be constructed yet
Particle/Par_FindHomePatch_UniformGrid.cpp:92:   for (int PID=0; PID<NReal; PID++)   RealPatchLBIdx[PID] = amr->patch[0][lv][PID]->LB_Idx;
Particle/Par_FindHomePatch_UniformGrid.cpp:125:   for (int PID=0; PID<NReal; PID++)   amr->patch[0][lv][PID]->ParListSize = 0;
Particle/Par_FindHomePatch_UniformGrid.cpp:128:      amr->patch[0][lv][ HomePID[t] ]->ParListSize ++;
Particle/Par_FindHomePatch_UniformGrid.cpp:134:         free( amr->patch[0][lv][PID]->ParList );
Particle/Par_FindHomePatch_UniformGrid.cpp:135:         amr->patch[0][lv][PID]->ParList = NULL;
Particle/Par_FindHomePatch_UniformGrid.cpp:138:      if ( amr->patch[0][lv][PID]->ParListSize > 0 )
Particle/Par_FindHomePatch_UniformGrid.cpp:141:         amr->patch[0][lv][PID]->ParList = (long*)realloc( amr->patch[0][lv][PID]->ParList,
Particle/Par_FindHomePatch_UniformGrid.cpp:142:                                                           amr->patch[0][lv][PID]->ParListSize*sizeof(long) );
Particle/Par_FindHomePatch_UniformGrid.cpp:148:   if ( OldParOnly )    amr->Par->NPar_Lv[lv] = 0;
Particle/Par_FindHomePatch_UniformGrid.cpp:150:// no OpenMP since AddParticle() will modify amr->Par->NPar_Lv[]
Particle/Par_FindHomePatch_UniformGrid.cpp:157:      amr->patch[0][lv][PID]->AddParticle( 1, &ParID, &amr->Par->NPar_Lv[lv], PType,
Particle/Par_FindHomePatch_UniformGrid.cpp:158:                                           Pos, amr->Par->NPar_AcPlusInac, __FUNCTION__ );
Particle/Par_FindHomePatch_UniformGrid.cpp:160:      amr->patch[0][lv][PID]->AddParticle( 1, &ParID, &amr->Par->NPar_Lv[lv], PType);
Particle/Par_FindHomePatch_UniformGrid.cpp:180:// Note        :  1. amr->LB->CutPoint[lv][] must be set in advance (e.g., by calling LB_SetCutPoint())
Particle/Par_FindHomePatch_UniformGrid.cpp:194:// Return      :  1. amr->Par
Particle/Par_FindHomePatch_UniformGrid.cpp:209:      Mass   = amr->Par->Mass;
Particle/Par_FindHomePatch_UniformGrid.cpp:210:      Pos[0] = amr->Par->PosX;
Particle/Par_FindHomePatch_UniformGrid.cpp:211:      Pos[1] = amr->Par->PosY;
Particle/Par_FindHomePatch_UniformGrid.cpp:212:      Pos[2] = amr->Par->PosZ;
Particle/Par_FindHomePatch_UniformGrid.cpp:227:   const long NTarPar = ( OldParOnly ) ? amr->Par->NPar_AcPlusInac : NNewPar;
Particle/Par_FindHomePatch_UniformGrid.cpp:272:   if ( OldParOnly  &&  Send_Count_Sum != amr->Par->NPar_Active )
Particle/Par_FindHomePatch_UniformGrid.cpp:273:      Aux_Error( ERROR_INFO, "Send_Count_Sum (%d) != NPar_Active (%ld) !!\n", Send_Count_Sum, amr->Par->NPar_Active );
Particle/Par_FindHomePatch_UniformGrid.cpp:278:   const long NOldPar            = ( OldParOnly ) ?       NULL_INT : amr->Par->NPar_AcPlusInac;
Particle/Par_FindHomePatch_UniformGrid.cpp:279:   const long UpdatedParListSize = ( OldParOnly ) ? Recv_Count_Sum : amr->Par->NPar_AcPlusInac + Recv_Count_Sum;
Particle/Par_FindHomePatch_UniformGrid.cpp:291:      SendAttPtr  [v] = ( OldParOnly ) ? amr->Par->Attribute[v] : NewParAtt[v];
Particle/Par_FindHomePatch_UniformGrid.cpp:292:      OldAttPtrPtr[v] = &amr->Par->Attribute[v];
Particle/Par_FindHomePatch_UniformGrid.cpp:331:      free( amr->Par->InactiveParList );
Particle/Par_FindHomePatch_UniformGrid.cpp:333:      amr->Par->NPar_AcPlusInac     = (long)Recv_Count_Sum;
Particle/Par_FindHomePatch_UniformGrid.cpp:334:      amr->Par->NPar_Active         = (long)Recv_Count_Sum;
Particle/Par_FindHomePatch_UniformGrid.cpp:335:      amr->Par->NPar_Inactive       = 0;                       // since we don't redistribute inactive particles
Particle/Par_FindHomePatch_UniformGrid.cpp:336:      amr->Par->ParListSize         = UpdatedParListSize;
Particle/Par_FindHomePatch_UniformGrid.cpp:337:      amr->Par->InactiveParListSize = (long)MAX( 1, UpdatedParListSize/100 );
Particle/Par_FindHomePatch_UniformGrid.cpp:338:      amr->Par->InactiveParList     = (long*)malloc( amr->Par->InactiveParListSize*sizeof(long) );
Particle/Par_FindHomePatch_UniformGrid.cpp:343:      amr->Par->NPar_AcPlusInac    += (long)Recv_Count_Sum;
Particle/Par_FindHomePatch_UniformGrid.cpp:344:      amr->Par->NPar_Active        += (long)Recv_Count_Sum;
Particle/Par_FindHomePatch_UniformGrid.cpp:345:      amr->Par->ParListSize         = UpdatedParListSize;
Particle/Par_FindHomePatch_UniformGrid.cpp:348:      MPI_Allreduce( &amr->Par->NPar_Active, &amr->Par->NPar_Active_AllRank, 1, MPI_LONG, MPI_SUM, MPI_COMM_WORLD );
Particle/Par_FindHomePatch_UniformGrid.cpp:353:   amr->Par->Mass = amr->Par->Attribute[PAR_MASS];
Particle/Par_FindHomePatch_UniformGrid.cpp:354:   amr->Par->PosX = amr->Par->Attribute[PAR_POSX];
Particle/Par_FindHomePatch_UniformGrid.cpp:355:   amr->Par->PosY = amr->Par->Attribute[PAR_POSY];
Particle/Par_FindHomePatch_UniformGrid.cpp:356:   amr->Par->PosZ = amr->Par->Attribute[PAR_POSZ];
Particle/Par_FindHomePatch_UniformGrid.cpp:357:   amr->Par->VelX = amr->Par->Attribute[PAR_VELX];
Particle/Par_FindHomePatch_UniformGrid.cpp:358:   amr->Par->VelY = amr->Par->Attribute[PAR_VELY];
Particle/Par_FindHomePatch_UniformGrid.cpp:359:   amr->Par->VelZ = amr->Par->Attribute[PAR_VELZ];
Particle/Par_FindHomePatch_UniformGrid.cpp:360:   amr->Par->Time = amr->Par->Attribute[PAR_TIME];
Particle/Par_FindHomePatch_UniformGrid.cpp:361:   amr->Par->Type = amr->Par->Attribute[PAR_TYPE];
Particle/Par_FindHomePatch_UniformGrid.cpp:363:   amr->Par->AccX = amr->Par->Attribute[PAR_ACCX];
Particle/Par_FindHomePatch_UniformGrid.cpp:364:   amr->Par->AccY = amr->Par->Attribute[PAR_ACCY];
Particle/Par_FindHomePatch_UniformGrid.cpp:365:   amr->Par->AccZ = amr->Par->Attribute[PAR_ACCZ];
Particle/Par_FindHomePatch_UniformGrid.cpp:373:   for (long ParID=NewParID0; ParID<amr->Par->NPar_AcPlusInac; ParID++)
Particle/Par_FindHomePatch_UniformGrid.cpp:376:      if ( amr->Par->Mass[ParID] < 0.0 )
Particle/Par_FindHomePatch_UniformGrid.cpp:377:         Aux_Error( ERROR_INFO, "ParMass[%ld] = %14.7e < 0.0 !!\n", ParID, amr->Par->Mass[ParID] );
Particle/Par_FindHomePatch_UniformGrid.cpp:410:      if ( ParPos[d] < amr->BoxEdgeL[d]  ||  ParPos[d] >= amr->BoxEdgeR[d] )
Particle/Par_FindHomePatch_UniformGrid.cpp:412:                    d, ParPos[d], amr->BoxEdgeL[d], amr->BoxEdgeR[d] );
Particle/Par_FindHomePatch_UniformGrid.cpp:418:   const double dh_min        = amr->dh[TOP_LEVEL];
Particle/Par_FindHomePatch_UniformGrid.cpp:419:   const double _PatchPhySize = 1.0/( PS1*amr->dh[lv] );
Particle/Par_FindHomePatch_UniformGrid.cpp:420:   const int    PatchScale    = PS1*amr->scale[lv];
Particle/Par_FindHomePatch_UniformGrid.cpp:427:      Cr[d] = (int)floor(  ( (double)ParPos[d] - amr->BoxEdgeL[d] )*_PatchPhySize  )*PatchScale;
Particle/Par_FindHomePatch_UniformGrid.cpp:446:      if ( PatchEdgeL < amr->BoxEdgeL[d]  ||  PatchEdgeR > amr->BoxEdgeR[d] )
Particle/Par_FindHomePatch_UniformGrid.cpp:448:                    d, PatchEdgeL, PatchEdgeR, amr->BoxEdgeL[d], amr->BoxEdgeR[d] );
Particle/Par_GetTimeStep_VelAcc.cpp:36:   const real *Vel[3]     = { amr->Par->VelX, amr->Par->VelY, amr->Par->VelZ };
Particle/Par_GetTimeStep_VelAcc.cpp:38:   const real *Acc[3]     = { amr->Par->AccX, amr->Par->AccY, amr->Par->AccZ };
Particle/Par_GetTimeStep_VelAcc.cpp:52:   const real *ParType   = amr->Par->Type;
Particle/Par_GetTimeStep_VelAcc.cpp:104:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_GetTimeStep_VelAcc.cpp:111:         if ( amr->patch[0][lv][PID]->son == -1 )
Particle/Par_GetTimeStep_VelAcc.cpp:113:            NParThisPatch = amr->patch[0][lv][PID]->NPar;
Particle/Par_GetTimeStep_VelAcc.cpp:114:            ParList       = amr->patch[0][lv][PID]->ParList;
Particle/Par_GetTimeStep_VelAcc.cpp:121:            NParThisPatch = amr->patch[0][lv][PID]->NPar_Copy;
Particle/Par_GetTimeStep_VelAcc.cpp:126:            ParList       = amr->patch[0][lv][PID]->ParList_Copy;
Particle/Par_GetTimeStep_VelAcc.cpp:129:         } // if ( amr->patch[0][lv][PID]->son == -1 ) ... elif ...
Particle/Par_GetTimeStep_VelAcc.cpp:137:         } // if ( amr->patch[0][lv][PID]->son == -1 ) ... elif ... else ...
Particle/Par_GetTimeStep_VelAcc.cpp:149:               Vel_Copy[d] = amr->patch[0][lv][PID]->ParAtt_Copy[ PAR_VELX + d ];
Particle/Par_GetTimeStep_VelAcc.cpp:151:               Acc_Copy[d] = amr->patch[0][lv][PID]->ParAtt_Copy[ PAR_ACCX + d ];
Particle/Par_GetTimeStep_VelAcc.cpp:154:            Typ_Copy = amr->patch[0][lv][PID]->ParAtt_Copy[ PAR_TYPE ];
Particle/Par_GetTimeStep_VelAcc.cpp:208:      } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_GetTimeStep_VelAcc.cpp:227:   dt_vel_local =       amr->dh[lv] / MaxVel;
Particle/Par_GetTimeStep_VelAcc.cpp:230:   dt_acc_local = sqrt( amr->dh[lv] / MaxAcc );
Particle/Par_Init_Attribute.cpp:98://                       data (e.g., amr->Par->Attribute[])
Particle/Par_Init_ByFile.cpp:41:// Return      :  amr->Par->Attribute[]
Particle/Par_Init_ByFile.cpp:50:   if ( amr->Par->ParICFormat != PAR_IC_FORMAT_ID_ATT  &&  amr->Par->ParICFormat != PAR_IC_FORMAT_ATT_ID )
Particle/Par_Init_ByFile.cpp:51:      Aux_Error( ERROR_INFO, "unknown data format in PAR_IC (%d) !!\n", amr->Par->ParICFormat );
Particle/Par_Init_ByFile.cpp:55:   const long NParAllRank   = amr->Par->NPar_Active_AllRank;
Particle/Par_Init_ByFile.cpp:56:         long NParThisRank  = amr->Par->NPar_AcPlusInac;       // cannot be "const" due to MPI_Allgather()
Particle/Par_Init_ByFile.cpp:57:   const bool SingleParMass = amr->Par->ParICMass >= 0.0;
Particle/Par_Init_ByFile.cpp:58:   const bool SingleParType = amr->Par->ParICType >= 0;
Particle/Par_Init_ByFile.cpp:68:   const int NParAttPerLoad = ( amr->Par->ParICFormat == PAR_IC_FORMAT_ID_ATT ) ? NParAtt : 1;
Particle/Par_Init_ByFile.cpp:131:      if ( amr->Par->ParICFormat == PAR_IC_FORMAT_ID_ATT )
Particle/Par_Init_ByFile.cpp:148:         amr->Par->Attribute[v_out][p] = ParData1[v_in];
Particle/Par_Init_ByFile.cpp:151:      if ( SingleParMass )    amr->Par->Mass[p] = amr->Par->ParICMass;
Particle/Par_Init_ByFile.cpp:152:      if ( SingleParType )    amr->Par->Type[p] = amr->Par->ParICType;
Particle/Par_Init_ByFile.cpp:155:      amr->Par->Time[p] = Time[0];
Particle/Par_Init_ByFunction.cpp:29://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
Particle/Par_Init_ByFunction.cpp:87:   const real PosMax[3] = { real( amr->BoxSize[0]*(1.0-1.0e-5) ),    // maximum value of particle position
Particle/Par_Init_ByFunction.cpp:88:                            real( amr->BoxSize[1]*(1.0-1.0e-5) ),
Particle/Par_Init_ByFunction.cpp:89:                            real( amr->BoxSize[2]*(1.0-1.0e-5) ) };
Particle/Par_MapMesh2Particles.cpp:45:   const ParInterp_t IntScheme = amr->Par->InterpTracer;
Particle/Par_MassAssignment.cpp:144:         Mass  [p] = amr->Par->Mass[ParID];
Particle/Par_MassAssignment.cpp:145:         Pos[0][p] = amr->Par->PosX[ParID];
Particle/Par_MassAssignment.cpp:146:         Pos[1][p] = amr->Par->PosY[ParID];
Particle/Par_MassAssignment.cpp:147:         Pos[2][p] = amr->Par->PosZ[ParID];
Particle/Par_MassAssignment.cpp:148:         PType [p] = amr->Par->Type[ParID];
Particle/Par_MassAssignment.cpp:169:   const double Ghost_Phy = amr->Par->GhostSize*dh;
Particle/Par_PassParticle2Father.cpp:26:   if ( FaPID < 0  ||  FaPID >= amr->num[FaLv] )
Particle/Par_PassParticle2Father.cpp:27:      Aux_Error( ERROR_INFO, "incorrect FaPID = %d (FaLv %d, NPatch %d) !!\n", FaPID, FaLv, amr->num[FaLv] );
Particle/Par_PassParticle2Father.cpp:31:   const int SonPID0 = amr->patch[0][FaLv][FaPID]->son;
Particle/Par_PassParticle2Father.cpp:48:   for (int SonPID=SonPID0; SonPID<SonPID0+8; SonPID++)  NParSon += amr->patch[0][SonLv][SonPID]->NPar;
Particle/Par_PassParticle2Father.cpp:59:   for (int p=0; p<amr->patch[0][SonLv][SonPID]->NPar; p++)    ParListSon[ t++ ] = amr->patch[0][SonLv][SonPID]->ParList[p];
Particle/Par_PassParticle2Father.cpp:63://###NOTE : No OpenMP since AddParticle will modify amr->Par->NPar_Lv[]
Particle/Par_PassParticle2Father.cpp:64:   const real *PType = amr->Par->Type;
Particle/Par_PassParticle2Father.cpp:66:   const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_PassParticle2Father.cpp:67:   amr->patch[0][FaLv][FaPID]->AddParticle( NParSon, ParListSon, &amr->Par->NPar_Lv[FaLv], PType, ParPos, amr->Par->NPar_AcPlusInac, __FUNCTION__ );
Particle/Par_PassParticle2Father.cpp:69:   amr->patch[0][FaLv][FaPID]->AddParticle( NParSon, ParListSon, &amr->Par->NPar_Lv[FaLv], PType );
Particle/Par_PassParticle2Father.cpp:74://###NOTE : No OpenMP since RemoveParticle will modify amr->Par->NPar_Lv[]
Particle/Par_PassParticle2Father.cpp:77:      amr->patch[0][SonLv][SonPID]->RemoveParticle( NULL_INT, NULL,
Particle/Par_PassParticle2Father.cpp:78:         &amr->Par->NPar_Lv[SonLv], RemoveAllParticle, PType );
Particle/Par_PassParticle2Sibling.cpp:43:   const double dh_min           = amr->dh[TOP_LEVEL];
Particle/Par_PassParticle2Sibling.cpp:47:// ParPos should NOT be used after calling Par_LB_ExchangeParticleBetweenPatch() since amr->Par->Attribute may be reallocated
Particle/Par_PassParticle2Sibling.cpp:48:   real *ParPos[3]               = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_PassParticle2Sibling.cpp:49:   const real *PType = amr->Par->Type;
Particle/Par_PassParticle2Sibling.cpp:73:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_PassParticle2Sibling.cpp:75:      NPar  = amr->patch[0][lv][PID]->NPar;
Particle/Par_PassParticle2Sibling.cpp:76:      EdgeL = amr->patch[0][lv][PID]->EdgeL;
Particle/Par_PassParticle2Sibling.cpp:77:      EdgeR = amr->patch[0][lv][PID]->EdgeR;
Particle/Par_PassParticle2Sibling.cpp:90:         amr->patch[0][lv][PID]->NPar_Escp   [s] = 0;
Particle/Par_PassParticle2Sibling.cpp:91:         amr->patch[0][lv][PID]->ParList_Escp[s] = NULL;    // allocate only when necessary (==> better performance)
Particle/Par_PassParticle2Sibling.cpp:101:         ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_PassParticle2Sibling.cpp:109://               --> note that EdgeL/R in amr->patch always assumes periodicity
Particle/Par_PassParticle2Sibling.cpp:163:            amr->Par->RemoveOneParticle( ParID, PAR_INACTIVE_OUTSIDE );
Particle/Par_PassParticle2Sibling.cpp:178:            if ( amr->patch[0][lv][PID]->ParList_Escp[TSib] == NULL )
Particle/Par_PassParticle2Sibling.cpp:179:               amr->patch[0][lv][PID]->ParList_Escp[TSib] = (long*)malloc( ArraySize[TSib]*sizeof(long) );
Particle/Par_PassParticle2Sibling.cpp:182:            if ( amr->patch[0][lv][PID]->NPar_Escp[TSib] >= ArraySize[TSib] )
Particle/Par_PassParticle2Sibling.cpp:185:               amr->patch[0][lv][PID]->ParList_Escp[TSib] = (long*)realloc( amr->patch[0][lv][PID]->ParList_Escp[TSib],
Particle/Par_PassParticle2Sibling.cpp:189:            amr->patch[0][lv][PID]->ParList_Escp[TSib][ amr->patch[0][lv][PID]->NPar_Escp[TSib] ++ ] = ParID;
Particle/Par_PassParticle2Sibling.cpp:192:            if ( amr->Par->Mass[ParID] < 0.0 )
Particle/Par_PassParticle2Sibling.cpp:197:            if ( amr->patch[0][lv][PID]->sibling[TSib] < -1 )
Particle/Par_PassParticle2Sibling.cpp:200:                            lv, PID, TSib, amr->patch[0][lv][PID]->sibling[TSib], ParID );
Particle/Par_PassParticle2Sibling.cpp:204:               const int MagSg = amr->MagSg[lv];
Particle/Par_PassParticle2Sibling.cpp:209:               const int PotSg = amr->PotSg[lv];
Particle/Par_PassParticle2Sibling.cpp:213:               Output_Patch( lv, PID, amr->FluSg[lv], PotSg, MagSg, "debug" );
Particle/Par_PassParticle2Sibling.cpp:221://    3. remove the escaping particles (set amr->Par->NPar_Lv later due to OpenMP)
Particle/Par_PassParticle2Sibling.cpp:222:      const real *PType = amr->Par->Type;
Particle/Par_PassParticle2Sibling.cpp:223:      amr->patch[0][lv][PID]->RemoveParticle( NPar_Remove, RemoveParList, NULL,
Particle/Par_PassParticle2Sibling.cpp:227:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_PassParticle2Sibling.cpp:233:   amr->Par->NPar_Lv[lv] -= NPar_Remove_Tot;
Particle/Par_PassParticle2Sibling.cpp:239:      for (int PID=0; PID<amr->num[lv]; PID++)
Particle/Par_PassParticle2Sibling.cpp:244:            SibPID = amr->patch[0][lv][PID]->sibling[s];
Particle/Par_PassParticle2Sibling.cpp:247:            if ( SibPID >= 0  &&  amr->patch[0][lv][SibPID]->NPar_Escp[ MirSib[s] ] > 0 )
Particle/Par_PassParticle2Sibling.cpp:249://###NOTE : No OpenMP since AddParticle will modify amr->Par->NPar_Lv[]
Particle/Par_PassParticle2Sibling.cpp:251:               if ( SibPID >= amr->NPatchComma[lv][1] )
Particle/Par_PassParticle2Sibling.cpp:253:                             PID, s, SibPID, amr->patch[0][lv][SibPID]->NPar_Escp[ MirSib[s] ] );
Particle/Par_PassParticle2Sibling.cpp:257:               amr->patch[0][lv][PID]->AddParticle( amr->patch[0][lv][SibPID]->NPar_Escp   [ MirSib[s] ],
Particle/Par_PassParticle2Sibling.cpp:258:                                                    amr->patch[0][lv][SibPID]->ParList_Escp[ MirSib[s] ],
Particle/Par_PassParticle2Sibling.cpp:259:                                                   &amr->Par->NPar_Lv[lv], PType,
Particle/Par_PassParticle2Sibling.cpp:260:                                                    (const real **)ParPos, amr->Par->NPar_AcPlusInac, Comment );
Particle/Par_PassParticle2Sibling.cpp:262:               amr->patch[0][lv][PID]->AddParticle( amr->patch[0][lv][SibPID]->NPar_Escp   [ MirSib[s] ],
Particle/Par_PassParticle2Sibling.cpp:263:                                                    amr->patch[0][lv][SibPID]->ParList_Escp[ MirSib[s] ],
Particle/Par_PassParticle2Sibling.cpp:264:                                                   &amr->Par->NPar_Lv[lv], PType );
Particle/Par_PassParticle2Sibling.cpp:273://       if ( amr->patch[0][lv][PID]->son != -1 )  Par_PassParticle2Son_SinglePatch( lv, PID );
Particle/Par_PassParticle2Sibling.cpp:274:      } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_PassParticle2Sibling.cpp:280:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_PassParticle2Sibling.cpp:283:         SibPID = amr->patch[0][lv][PID]->sibling[s];
Particle/Par_PassParticle2Sibling.cpp:287:         if ( SibPID == -1  &&  amr->patch[0][lv][PID]->NPar_Escp[s] > 0 )
Particle/Par_PassParticle2Sibling.cpp:299:            FaPID = amr->patch[0][lv][PID]->father;
Particle/Par_PassParticle2Sibling.cpp:309:            FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[FaSib];
Particle/Par_PassParticle2Sibling.cpp:318://###NOTE : No OpenMP since AddParticle will modify amr->Par->NPar_Lv[]
Particle/Par_PassParticle2Sibling.cpp:322:            amr->patch[0][FaLv][FaSibPID]->AddParticle( amr->patch[0][lv][PID]->NPar_Escp   [s],
Particle/Par_PassParticle2Sibling.cpp:323:                                                        amr->patch[0][lv][PID]->ParList_Escp[s],
Particle/Par_PassParticle2Sibling.cpp:324:                                                       &amr->Par->NPar_Lv[FaLv], PType,
Particle/Par_PassParticle2Sibling.cpp:325:                                                        (const real **)ParPos, amr->Par->NPar_AcPlusInac, Comment );
Particle/Par_PassParticle2Sibling.cpp:327:            amr->patch[0][FaLv][FaSibPID]->AddParticle( amr->patch[0][lv][PID]->NPar_Escp   [s],
Particle/Par_PassParticle2Sibling.cpp:328:                                                        amr->patch[0][lv][PID]->ParList_Escp[s],
Particle/Par_PassParticle2Sibling.cpp:329:                                                       &amr->Par->NPar_Lv[FaLv], PType );
Particle/Par_PassParticle2Sibling.cpp:332:      } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++); for (int s=0; s<26; s++)
Particle/Par_PassParticle2Sibling.cpp:359:      amr->Par->B2R_Buff_NPatchTotal[lv][0], amr->Par->B2R_Buff_PIDList[lv][0], amr->Par->B2R_Buff_NPatchEachRank[lv][0],
Particle/Par_PassParticle2Sibling.cpp:360:      amr->Par->B2R_Real_NPatchTotal[lv][0], amr->Par->B2R_Real_PIDList[lv][0], amr->Par->B2R_Real_NPatchEachRank[lv][0],
Particle/Par_PassParticle2Sibling.cpp:368:      amr->Par->B2R_Buff_NPatchTotal[lv][1], amr->Par->B2R_Buff_PIDList[lv][1], amr->Par->B2R_Buff_NPatchEachRank[lv][1],
Particle/Par_PassParticle2Sibling.cpp:369:      amr->Par->B2R_Real_NPatchTotal[lv][1], amr->Par->B2R_Real_PIDList[lv][1], amr->Par->B2R_Real_NPatchEachRank[lv][1],
Particle/Par_PassParticle2Sibling.cpp:374:   for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][3]; PID++)
Particle/Par_PassParticle2Sibling.cpp:375:      if ( amr->patch[0][lv][PID]->NPar != 0 )
Particle/Par_PassParticle2Sibling.cpp:377:                    lv, PID, amr->patch[0][lv][PID]->NPar );
Particle/Par_PassParticle2Sibling.cpp:379:   for (int FaPID=amr->NPatchComma[FaLv][1]; FaPID<amr->NPatchComma[FaLv][3]; FaPID++)
Particle/Par_PassParticle2Sibling.cpp:380:      if ( amr->patch[0][FaLv][FaPID]->NPar != 0 )
Particle/Par_PassParticle2Sibling.cpp:382:                    FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar );
Particle/Par_PassParticle2Sibling.cpp:388:   MPI_Allreduce( &amr->Par->NPar_Active, &amr->Par->NPar_Active_AllRank, 1, MPI_LONG, MPI_SUM, MPI_COMM_WORLD );
Particle/Par_PassParticle2Sibling.cpp:392:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Particle/Par_PassParticle2Sibling.cpp:395:      if ( amr->patch[0][lv][PID]->ParList_Escp[s] != NULL )   free( amr->patch[0][lv][PID]->ParList_Escp[s] );
Particle/Par_PassParticle2Sibling.cpp:397:      amr->patch[0][lv][PID]->ParList_Escp[s] = NULL;
Particle/Par_PassParticle2Sibling.cpp:398:      amr->patch[0][lv][PID]->NPar_Escp   [s] = -1;      // -1: indicate that it has not been calculated yet
Particle/Par_PassParticle2Sibling.cpp:422:   const double RemoveZone = amr->Par->RemoveCell*amr->dh[0];
Particle/Par_PassParticle2Sibling.cpp:425:   if (  OPT__BC_FLU[0] != BC_FLU_PERIODIC  &&  ( x < RemoveZone || x > amr->BoxSize[0]-RemoveZone )  )  return false;
Particle/Par_PassParticle2Sibling.cpp:426:   if (  OPT__BC_FLU[2] != BC_FLU_PERIODIC  &&  ( y < RemoveZone || y > amr->BoxSize[1]-RemoveZone )  )  return false;
Particle/Par_PassParticle2Sibling.cpp:427:   if (  OPT__BC_FLU[4] != BC_FLU_PERIODIC  &&  ( z < RemoveZone || z > amr->BoxSize[2]-RemoveZone )  )  return false;
Particle/Par_PassParticle2Son_MultiPatch.cpp:45://                                    --> Use the list amr->Par->F2S_* for that
Particle/Par_PassParticle2Son_MultiPatch.cpp:47://                                    pre-calculated and stored in amr->Par->F2S_*
Particle/Par_PassParticle2Son_MultiPatch.cpp:83:         if ( FaPID < 0  ||  FaPID >= amr->NPatchComma[FaLv][1] )
Particle/Par_PassParticle2Son_MultiPatch.cpp:85:                       FaPID, FaLv, t, amr->NPatchComma[FaLv][1] );
Particle/Par_PassParticle2Son_MultiPatch.cpp:92:   const int loop_size = ( Mode == PAR_PASS2SON_EVOLVE ) ? amr->NPatchComma[FaLv][1] : NFaPatch;
Particle/Par_PassParticle2Son_MultiPatch.cpp:98:      if ( amr->patch[0][FaLv][FaPID]->son >= 0 )  Par_PassParticle2Son_SinglePatch( FaLv, FaPID );
Particle/Par_PassParticle2Son_MultiPatch.cpp:126:      Send_NPatchTotal    = amr->Par->F2S_Send_NPatchTotal   [FaLv];
Particle/Par_PassParticle2Son_MultiPatch.cpp:127:      Send_PIDList        = amr->Par->F2S_Send_PIDList       [FaLv];
Particle/Par_PassParticle2Son_MultiPatch.cpp:128:      Send_NPatchEachRank = amr->Par->F2S_Send_NPatchEachRank[FaLv];
Particle/Par_PassParticle2Son_MultiPatch.cpp:129:      Recv_NPatchTotal    = amr->Par->F2S_Recv_NPatchTotal   [FaLv];
Particle/Par_PassParticle2Son_MultiPatch.cpp:130:      Recv_PIDList        = amr->Par->F2S_Recv_PIDList       [FaLv];
Particle/Par_PassParticle2Son_MultiPatch.cpp:131:      Recv_NPatchEachRank = amr->Par->F2S_Recv_NPatchEachRank[FaLv];
Particle/Par_PassParticle2Son_MultiPatch.cpp:146:         if ( amr->patch[0][FaLv][FaPID]->son < -1  &&  amr->patch[0][FaLv][FaPID]->NPar > 0 )
Particle/Par_PassParticle2Son_MultiPatch.cpp:161:         const long SonLBIdx = 8*amr->patch[0][FaLv][FaPID]->LB_Idx;    // faster, LB_Idx of one of the eight sons
Particle/Par_PassParticle2Son_MultiPatch.cpp:163:         const long SonLBIdx = LB_Corner2Index( SonLv, amr->patch[0][FaLv][FaPID]->corner, CHECK_ON );   // LB_Idx of son 0
Particle/Par_PassParticle2Son_MultiPatch.cpp:200:         if ( SonPID < 0  ||  SonPID >= amr->NPatchComma[SonLv][1] )
Particle/Par_PassParticle2Son_MultiPatch.cpp:202:                       SonPID, FaLv, amr->NPatchComma[SonLv][1] );
Particle/Par_PassParticle2Son_MultiPatch.cpp:205:         const int FaPID = amr->patch[0][SonLv][SonPID]->father;
Particle/Par_PassParticle2Son_MultiPatch.cpp:209:         if ( FaPID < amr->NPatchComma[FaLv][1] )
Particle/Par_PassParticle2Son_MultiPatch.cpp:211:                       FaLv, SonPID, FaPID, amr->NPatchComma[FaLv][1] );
Particle/Par_PassParticle2Son_MultiPatch.cpp:249:   for (int FaPID=0; FaPID<amr->NPatchComma[FaLv][1]; FaPID++)
Particle/Par_PassParticle2Son_MultiPatch.cpp:250:      if ( amr->patch[0][FaLv][FaPID]->son != -1  &&  amr->patch[0][FaLv][FaPID]->NPar != 0 )
Particle/Par_PassParticle2Son_MultiPatch.cpp:252:                    FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar );
Particle/Par_PassParticle2Son_MultiPatch.cpp:254:   for (int FaPID=amr->NPatchComma[FaLv][1]; FaPID<amr->NPatchComma[FaLv][3]; FaPID++)
Particle/Par_PassParticle2Son_MultiPatch.cpp:255:      if ( amr->patch[0][FaLv][FaPID]->NPar != 0 )
Particle/Par_PassParticle2Son_MultiPatch.cpp:257:                    FaLv, FaPID, amr->patch[0][FaLv][FaPID]->NPar );
Particle/Par_PassParticle2Son_SinglePatch.cpp:30:   const int NPar    = amr->patch[0][FaLv][FaPID]->NPar;
Particle/Par_PassParticle2Son_SinglePatch.cpp:31:   const int SonPID0 = amr->patch[0][FaLv][FaPID]->son;
Particle/Par_PassParticle2Son_SinglePatch.cpp:58:   const double *FaCen           = amr->patch[0][SonLv][SonPID0+7]->EdgeL;    // central coordinates of FaPID
Particle/Par_PassParticle2Son_SinglePatch.cpp:59:   const real   *ParPos[3]       = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_PassParticle2Son_SinglePatch.cpp:60:   const real   *PType           = amr->Par->Type;
Particle/Par_PassParticle2Son_SinglePatch.cpp:66:      ParID = amr->patch[0][FaLv][FaPID]->ParList[p];
Particle/Par_PassParticle2Son_SinglePatch.cpp:81://###NOTE : No OpenMP since AddParticle will modify amr->Par->NPar_Lv[]
Particle/Par_PassParticle2Son_SinglePatch.cpp:83:      amr->patch[0][SonLv][SonPID]->AddParticle( NNewForSon[LocalID], NewListForSon[LocalID], &amr->Par->NPar_Lv[SonLv],
Particle/Par_PassParticle2Son_SinglePatch.cpp:84:                                                 PType, ParPos, amr->Par->NPar_AcPlusInac, __FUNCTION__ );
Particle/Par_PassParticle2Son_SinglePatch.cpp:86:      amr->patch[0][SonLv][SonPID]->AddParticle( NNewForSon[LocalID], NewListForSon[LocalID], &amr->Par->NPar_Lv[SonLv], PType );
Particle/Par_PassParticle2Son_SinglePatch.cpp:92://###NOTE : No OpenMP since RemoveParticle will modify amr->Par->NPar_Lv[]
Particle/Par_PassParticle2Son_SinglePatch.cpp:94:   amr->patch[0][FaLv][FaPID]->RemoveParticle( NULL_INT, NULL, &amr->Par->NPar_Lv[FaLv],
Particle/Par_PredictPos.cpp:55:      if ( ParID < 0  ||  ParID >= amr->Par->NPar_AcPlusInac )
Particle/Par_PredictPos.cpp:57:                    ParID, amr->Par->NPar_AcPlusInac );
Particle/Par_PredictPos.cpp:59:      if ( amr->Par->Mass[ParID] < (real)0.0 )
Particle/Par_PredictPos.cpp:60:         Aux_Error( ERROR_INFO, "Found inactive particle (ParID %ld, Mass %14.7e) !!\n", ParID, amr->Par->Mass[ParID] );
Particle/Par_PredictPos.cpp:64:      if ( amr->Par->Time[ParID] < (real)0.0 )  continue;
Particle/Par_PredictPos.cpp:66:      ParTime = amr->Par->Time[ParID];
Particle/Par_PredictPos.cpp:95:      ParPosX[p] += amr->Par->VelX[ParID]*dt;
Particle/Par_PredictPos.cpp:96:      ParPosY[p] += amr->Par->VelY[ParID]*dt;
Particle/Par_PredictPos.cpp:97:      ParPosZ[p] += amr->Par->VelZ[ParID]*dt;
Particle/Par_Synchronize.cpp:63:      MemUnit       = MAX( 1, amr->Par->NPar_Active/100 );  // set arbitrarily (but must > 0)
Particle/Par_Synchronize.cpp:72:         real *ParTime   =   amr->Par->Time;
Particle/Par_Synchronize.cpp:73:         real *ParType   =   amr->Par->Type;
Particle/Par_Synchronize.cpp:74:         real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_Synchronize.cpp:75:         real *ParVel[3] = { amr->Par->VelX, amr->Par->VelY, amr->Par->VelZ };
Particle/Par_Synchronize.cpp:77:   const real *ParAcc[3] = { amr->Par->AccX, amr->Par->AccY, amr->Par->AccZ };
Particle/Par_Synchronize.cpp:91:   for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Particle/Par_Synchronize.cpp:94:      if ( amr->Par->Mass[p] < 0.0 )   continue;
Particle/Par_Synchronize.cpp:161:   } // for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
Particle/Par_Synchronize.cpp:194:   real *ParTime   =   amr->Par->Time;
Particle/Par_Synchronize.cpp:195:   real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_Synchronize.cpp:196:   real *ParVel[3] = { amr->Par->VelX, amr->Par->VelY, amr->Par->VelZ };
Particle/Par_UpdateParticle.cpp:60:   const ParInterp_t IntScheme    = amr->Par->Interp;
Particle/Par_UpdateParticle.cpp:68:   const double dh                = amr->dh[lv];
Particle/Par_UpdateParticle.cpp:73:   const int  ParGhost            = amr->Par->GhostSize;
Particle/Par_UpdateParticle.cpp:84:   real *ParPos[3]       = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_UpdateParticle.cpp:85:   real *ParVel[3]       = { amr->Par->VelX, amr->Par->VelY, amr->Par->VelZ };
Particle/Par_UpdateParticle.cpp:87:   real *ParAcc[3]       = { amr->Par->AccX, amr->Par->AccY, amr->Par->AccZ };
Particle/Par_UpdateParticle.cpp:89:   real *ParTime         = amr->Par->Time;
Particle/Par_UpdateParticle.cpp:90:   const real *ParType   = amr->Par->Type;
Particle/Par_UpdateParticle.cpp:98:   if ( UsePot  &&  amr->Par->ImproveAcc )
Particle/Par_UpdateParticle.cpp:100:      if      (  Mis_CompareRealValue( PrepPotTime, amr->PotSgTime[lv][   amr->PotSg[lv] ], NULL, false )  )
Particle/Par_UpdateParticle.cpp:101:         PotSg =   amr->PotSg[lv];
Particle/Par_UpdateParticle.cpp:103:      else if (  Mis_CompareRealValue( PrepPotTime, amr->PotSgTime[lv][ 1-amr->PotSg[lv] ], NULL, false )  )
Particle/Par_UpdateParticle.cpp:104:         PotSg = 1-amr->PotSg[lv];
Particle/Par_UpdateParticle.cpp:110:                    lv, PrepPotTime, amr->PotSgTime[lv][0], amr->PotSgTime[lv][1] );
Particle/Par_UpdateParticle.cpp:113:                    lv, PrepPotTime, amr->PotSgTime[lv][0], amr->PotSgTime[lv][1] );
Particle/Par_UpdateParticle.cpp:116:         PotWeighting0 = ( +amr->PotSgTime[lv][1] - PrepPotTime ) / ( amr->PotSgTime[lv][1] - amr->PotSgTime[lv][0] );
Particle/Par_UpdateParticle.cpp:117:         PotWeighting1 = ( -amr->PotSgTime[lv][0] + PrepPotTime ) / ( amr->PotSgTime[lv][1] - amr->PotSgTime[lv][0] );
Particle/Par_UpdateParticle.cpp:127:   if ( amr->Par->ImproveAcc  &&  PotGhost != GRA_GHOST_SIZE )
Particle/Par_UpdateParticle.cpp:128:      Aux_Error( ERROR_INFO, "PotGhost (%d) != GRA_GHOST_SIZE (%d) for amr->Par->ImproveAcc !!\n",
Particle/Par_UpdateParticle.cpp:133:   if ( amr->Par->ImproveAcc )
Particle/Par_UpdateParticle.cpp:134:      Aux_Error( ERROR_INFO, "amr->Par->ImproveAcc must work with STORE_POT_GHOST !!\n" );
Particle/Par_UpdateParticle.cpp:137:   if ( amr->Par->Integ == PAR_INTEG_EULER  &&  UpdateStep == PAR_UPSTEP_CORR )
Particle/Par_UpdateParticle.cpp:144:   if ( StoreAcc  &&  amr->Par->Integ == PAR_INTEG_KDK  &&  UpdateStep == PAR_UPSTEP_PRED )
Particle/Par_UpdateParticle.cpp:147:   if ( StoreAcc  &&  amr->Par->Integ == PAR_INTEG_EULER  &&  UpdateStep == PAR_UPSTEP_CORR )
Particle/Par_UpdateParticle.cpp:150:   if ( UseStoredAcc  &&  amr->Par->Integ == PAR_INTEG_EULER )
Particle/Par_UpdateParticle.cpp:153:   if ( UseStoredAcc  &&  amr->Par->Integ == PAR_INTEG_KDK  &&  UpdateStep == PAR_UPSTEP_CORR )
Particle/Par_UpdateParticle.cpp:193:   for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Particle/Par_UpdateParticle.cpp:202:         if ( amr->patch[0][lv][PID]->NPar - amr->patch[0][lv][PID]->NParType[ptype_tracer] > 0 )
Particle/Par_UpdateParticle.cpp:206:               for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_UpdateParticle.cpp:208:                  ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_UpdateParticle.cpp:234:         if ( amr->Par->ImproveAcc )
Particle/Par_UpdateParticle.cpp:238:               if ( amr->patch[0][lv][PID]->NPar - amr->patch[0][lv][PID]->NParType[ptype_tracer] == 0 )
Particle/Par_UpdateParticle.cpp:248:                     Pot3D[P][k][j][i] =   PotWeighting0*amr->patch[0][lv][PID]->pot_ext[k][j][i]
Particle/Par_UpdateParticle.cpp:249:                                         + PotWeighting1*amr->patch[1][lv][PID]->pot_ext[k][j][i];
Particle/Par_UpdateParticle.cpp:253:                  memcpy( Pot3D[P], amr->patch[PotSg][lv][PID]->pot_ext, CUBE(PotSize)*sizeof(real) );
Particle/Par_UpdateParticle.cpp:255:         } // if ( amr->Par->ImproveAcc )
Particle/Par_UpdateParticle.cpp:267:         if ( amr->patch[0][lv][PID]->NPar - amr->patch[0][lv][PID]->NParType[ptype_tracer] == 0 )
Particle/Par_UpdateParticle.cpp:275:               PhyCorner_ExtAcc[d] = amr->patch[0][lv][PID]->EdgeL[d] + (0.5-ParGhost)*dh;
Particle/Par_UpdateParticle.cpp:319:         for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_UpdateParticle.cpp:321:            ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_UpdateParticle.cpp:375:                  idx[d] = int( ( ParPos[d][ParID] - amr->patch[0][lv][PID]->EdgeL[d] )*_dh );
Particle/Par_UpdateParticle.cpp:381:                     if (  ! Mis_CompareRealValue( ParPos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeL[d], NULL, false )  )
Particle/Par_UpdateParticle.cpp:383:                                d, ParPos[d][ParID], amr->patch[0][lv][PID]->EdgeL[d], idx[d] );
Particle/Par_UpdateParticle.cpp:392:                     if (  ! Mis_CompareRealValue( ParPos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeR[d], NULL, false )  )
Particle/Par_UpdateParticle.cpp:394:                                   d, ParPos[d][ParID], amr->patch[0][lv][PID]->EdgeR[d], idx[d] );
Particle/Par_UpdateParticle.cpp:430:                  dr      [d] = ( ParPos[d][ParID] - amr->patch[0][lv][PID]->EdgeL[d] )*_dh + ParGhost - 0.5;
Particle/Par_UpdateParticle.cpp:439:                     if (  ! Mis_CompareRealValue( ParPos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeL[d], NULL, false )  )
Particle/Par_UpdateParticle.cpp:441:                                d, ParPos[d][ParID], amr->patch[0][lv][PID]->EdgeL[d], idxLR[0][d], idxLR[1][d] );
Particle/Par_UpdateParticle.cpp:451:                     if (  ! Mis_CompareRealValue( ParPos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeR[d], NULL, false )  )
Particle/Par_UpdateParticle.cpp:453:                                d, ParPos[d][ParID], amr->patch[0][lv][PID]->EdgeR[d], idxLR[0][d], idxLR[1][d] );
Particle/Par_UpdateParticle.cpp:503:                  dr       [d] = ( ParPos[d][ParID] - amr->patch[0][lv][PID]->EdgeL[d] )*_dh + ParGhost;
Particle/Par_UpdateParticle.cpp:512:                     if (  ! Mis_CompareRealValue( ParPos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeL[d], NULL, false )  )
Particle/Par_UpdateParticle.cpp:514:                                d, ParPos[d][ParID], amr->patch[0][lv][PID]->EdgeL[d], idxLCR[0][d], idxLCR[2][d] );
Particle/Par_UpdateParticle.cpp:525:                     if (  ! Mis_CompareRealValue( ParPos[d][ParID], (real)amr->patch[0][lv][PID]->EdgeR[d], NULL, false )  )
Particle/Par_UpdateParticle.cpp:527:                                d, ParPos[d][ParID], amr->patch[0][lv][PID]->EdgeR[d], idxLCR[0][d], idxLCR[2][d] );
Particle/Par_UpdateParticle.cpp:578:            else if ( amr->Par->Integ == PAR_INTEG_EULER )
Particle/Par_UpdateParticle.cpp:591:            else if ( amr->Par->Integ == PAR_INTEG_KDK )
Particle/Par_UpdateParticle.cpp:613:            } // amr->Par->Integ
Particle/Par_UpdateParticle.cpp:614:         } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)`
Particle/Par_UpdateParticle.cpp:616:   } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Particle/Par_UpdateTracerParticle.cpp:43:   const double dh                = amr->dh[lv];
Particle/Par_UpdateTracerParticle.cpp:45:   const int    ParGhost          = amr->Par->GhostSizeTracer;
Particle/Par_UpdateTracerParticle.cpp:52:         real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
Particle/Par_UpdateTracerParticle.cpp:53:         real *ParVel[3] = { amr->Par->VelX, amr->Par->VelY, amr->Par->VelZ };
Particle/Par_UpdateTracerParticle.cpp:54:         real *ParTime   = amr->Par->Time;
Particle/Par_UpdateTracerParticle.cpp:55:   const real *ParType   = amr->Par->Type;
Particle/Par_UpdateTracerParticle.cpp:62:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)   NParMax = MAX( NParMax, amr->patch[0][lv][PID]->NPar );
Particle/Par_UpdateTracerParticle.cpp:89:   for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Particle/Par_UpdateTracerParticle.cpp:98:         if ( amr->patch[0][lv][PID]->NParType[(int)PTYPE_TRACER] > 0 )    GotYou = true;
Particle/Par_UpdateTracerParticle.cpp:123:         if ( amr->patch[0][lv][PID]->NParType[(int)PTYPE_TRACER] == 0 )   continue;
Particle/Par_UpdateTracerParticle.cpp:128:            EdgeL[d] = amr->patch[0][lv][PID]->EdgeL[d] - dh*ParGhost;
Particle/Par_UpdateTracerParticle.cpp:129:            EdgeR[d] = amr->patch[0][lv][PID]->EdgeR[d] + dh*ParGhost;
Particle/Par_UpdateTracerParticle.cpp:132:         for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_UpdateTracerParticle.cpp:134:            ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_UpdateTracerParticle.cpp:157:         } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_UpdateTracerParticle.cpp:160:                                amr->patch[0][lv][PID]->NPar, InterpParPos, ParType,
Particle/Par_UpdateTracerParticle.cpp:161:                                amr->patch[0][lv][PID]->ParList, UseTracers_Yes, Vel_Temp[0],
Particle/Par_UpdateTracerParticle.cpp:162:                                amr->Par->TracerVelCorr );
Particle/Par_UpdateTracerParticle.cpp:164:                                amr->patch[0][lv][PID]->NPar, InterpParPos, ParType,
Particle/Par_UpdateTracerParticle.cpp:165:                                amr->patch[0][lv][PID]->ParList, UseTracers_Yes, Vel_Temp[1],
Particle/Par_UpdateTracerParticle.cpp:166:                                amr->Par->TracerVelCorr );
Particle/Par_UpdateTracerParticle.cpp:168:                                amr->patch[0][lv][PID]->NPar, InterpParPos, ParType,
Particle/Par_UpdateTracerParticle.cpp:169:                                amr->patch[0][lv][PID]->ParList, UseTracers_Yes, Vel_Temp[2],
Particle/Par_UpdateTracerParticle.cpp:170:                                amr->Par->TracerVelCorr );
Particle/Par_UpdateTracerParticle.cpp:173:         for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_UpdateTracerParticle.cpp:175:            ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_UpdateTracerParticle.cpp:189:            else if ( amr->Par->IntegTracer == TRACER_INTEG_EULER )
Particle/Par_UpdateTracerParticle.cpp:200:            else if ( amr->Par->IntegTracer == TRACER_INTEG_RK2 )
Particle/Par_UpdateTracerParticle.cpp:214:            } // amr->Par->IntegTracer
Particle/Par_UpdateTracerParticle.cpp:216:         } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)`
Particle/Par_UpdateTracerParticle.cpp:220:         if ( !MapOnly  &&  amr->Par->IntegTracer == TRACER_INTEG_RK2 )
Particle/Par_UpdateTracerParticle.cpp:223:                                   amr->patch[0][lv][PID]->NPar, InterpParPos, ParType,
Particle/Par_UpdateTracerParticle.cpp:224:                                   amr->patch[0][lv][PID]->ParList, UseTracers_Yes, Vel_Temp[0],
Particle/Par_UpdateTracerParticle.cpp:225:                                   amr->Par->TracerVelCorr );
Particle/Par_UpdateTracerParticle.cpp:227:                                   amr->patch[0][lv][PID]->NPar, InterpParPos, ParType,
Particle/Par_UpdateTracerParticle.cpp:228:                                   amr->patch[0][lv][PID]->ParList, UseTracers_Yes, Vel_Temp[1],
Particle/Par_UpdateTracerParticle.cpp:229:                                   amr->Par->TracerVelCorr );
Particle/Par_UpdateTracerParticle.cpp:231:                                   amr->patch[0][lv][PID]->NPar, InterpParPos, ParType,
Particle/Par_UpdateTracerParticle.cpp:232:                                   amr->patch[0][lv][PID]->ParList, UseTracers_Yes, Vel_Temp[2],
Particle/Par_UpdateTracerParticle.cpp:233:                                   amr->Par->TracerVelCorr );
Particle/Par_UpdateTracerParticle.cpp:235:            for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++) {
Particle/Par_UpdateTracerParticle.cpp:237:               ParID = amr->patch[0][lv][PID]->ParList[p];
Particle/Par_UpdateTracerParticle.cpp:249:            } // for (int p=0; p<amr->patch[0][lv][PID]->NPar; p++)
Particle/Par_UpdateTracerParticle.cpp:250:         } // if ( !MapOnly  &&  amr->Par->IntegTracer == TRACER_INTEG_RK2 )
Particle/Par_UpdateTracerParticle.cpp:252:   } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Refine/FindFather.cpp:30:   const int scale0      = amr->scale[0];
Refine/FindFather.cpp:45:   for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Refine/FindFather.cpp:47:      Corner = amr->patch[0][lv][PID0]->corner;
Refine/FindFather.cpp:63:            GrandPaCorner = amr->patch[0][GrandPaLv][GrandPaPID]->corner;
Refine/FindFather.cpp:64:            FaPS          = PATCH_SIZE*amr->scale[FaLv];
Refine/FindFather.cpp:85:            FaPID = amr->patch[0][GrandPaLv][GrandPaPID]->son + LocalID;
Refine/FindFather.cpp:93:         for (int FaPID_Candidate=0; FaPID_Candidate<amr->NPatchComma[lv-1][1]; FaPID_Candidate++)
Refine/FindFather.cpp:95:            FaCorner = amr->patch[0][lv-1][FaPID_Candidate]->corner;
Refine/FindFather.cpp:104:            if ( FaPID_Candidate == amr->NPatchComma[lv-1][1]-1 )
Refine/FindFather.cpp:112:      amr->patch[0][lv-1][FaPID]->son = PID0;
Refine/FindFather.cpp:114:      for (int PID=PID0; PID<PID0+8; PID++)  amr->patch[0][lv][PID]->father = FaPID;
Refine/FindFather.cpp:116:   } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Refine/Flag_Buffer.cpp:31:      for (int ID=0; ID<amr->ParaVar->BuffFlag_NList[lv][s]; ID+=FlagLayer)
Refine/Flag_Buffer.cpp:34:         if ( MPI_SibRank[s] < 0 )  Aux_Error( ERROR_INFO, "amr->ParaVar->BuffFlag_NList[%d][%d] = %d != 0 !!\n",
Refine/Flag_Buffer.cpp:35:                                               lv, s, amr->ParaVar->BuffFlag_NList[lv][s] );
Refine/Flag_Buffer.cpp:38:         FlagPos = amr->ParaVar->BuffFlag_PosList[lv][s][ID];
Refine/Flag_Buffer.cpp:40:         while ( amr->ParaVar->BounP_PosList[lv][s][TargetID] != FlagPos )
Refine/Flag_Buffer.cpp:46:            if ( TargetID >= amr->ParaVar->BounP_NList[lv][s] )
Refine/Flag_Buffer.cpp:51:         BounPID = amr->ParaVar->BounP_IDList[lv][s][TargetID];
Refine/Flag_Buffer.cpp:52:         BuffPID = amr->patch[0][lv][BounPID]->sibling[s];
Refine/Flag_Buffer.cpp:57:         if ( BuffPID < amr->NPatchComma[lv][1]  ||  BuffPID >= amr->num[lv] )
Refine/Flag_Buffer.cpp:63:         amr->patch[0][lv][BuffPID]->flag = true;
Refine/Flag_Buffer.cpp:69:            if ( amr->ParaVar->BuffFlag_PosList[lv][s][ID+n] == BUFFER_IS_FLAGGED )
Refine/Flag_Buffer.cpp:72:               SibPID = amr->patch[0][lv][BuffPID]->sibling[Sib];
Refine/Flag_Buffer.cpp:78:               amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Buffer.cpp:85:      if ( amr->ParaVar->BuffFlag_PosList[lv][s] != NULL )
Refine/Flag_Buffer.cpp:87:         delete [] amr->ParaVar->BuffFlag_PosList[lv][s];
Refine/Flag_Buffer.cpp:88:         amr->ParaVar->BuffFlag_PosList[lv][s] = NULL;
Refine/Flag_Buffer.cpp:91:      amr->ParaVar->BuffFlag_NList[lv][s] = 0;
Refine/Flag_Region.cpp:22:   const double dh     = amr->dh[lv];                                         // cell size
Refine/Flag_Region.cpp:23:   const double Pos[3] = { amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh,     // x,y,z position
Refine/Flag_Region.cpp:24:                           amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh,
Refine/Flag_Region.cpp:25:                           amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh  };
Refine/Flag_Region.cpp:34:   const double Center[3] = { 0.5*amr->BoxSize[0], 0.5*amr->BoxSize[1], 0.5*amr->BoxSize[2] };
Refine/Flag_User.cpp:20:// Parameter   :  i,j,k     : Indices of the target element in the patch ptr[ amr->FluSg[lv] ][lv][PID]
Refine/Flag_User.cpp:33:   const double dh     = amr->dh[lv];                                                  // grid size
Refine/Flag_User.cpp:34:   const double Pos[3] = { amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh,              // x,y,z position
Refine/Flag_User.cpp:35:                           amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh,
Refine/Flag_User.cpp:36:                           amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh  };
Refine/Flag_User.cpp:38:   const real (*Rho )[PS1][PS1] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[DENS];  // density
Refine/Flag_User.cpp:39:   const real (*MomX)[PS1][PS1] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[MOMX];  // momentum x
Refine/Flag_User.cpp:40:   const real (*MomY)[PS1][PS1] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[MOMY];  // momentum y
Refine/Flag_User.cpp:41:   const real (*MomZ)[PS1][PS1] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[MOMZ];  // momentum z
Refine/Flag_User.cpp:42:   const real (*Egy )[PS1][PS1] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[ENGY];  // total energy
Refine/Flag_User.cpp:44:   const real (*Pot )[PS1][PS1] = amr->patch[ amr->PotSg[lv] ][lv][PID]->pot;          // potential
Refine/Flag_User.cpp:65:   const double Center[3] = { 0.5*amr->BoxSize[0], 0.5*amr->BoxSize[1], 0.5*amr->BoxSize[2] };
Refine/Refine_Buffer.cpp:20:   const int Width = PATCH_SIZE * amr->scale[lv+1];   // scale of a single patch at level "lv+1"
Refine/Refine_Buffer.cpp:42:      for (int PID=amr->NPatchComma[lv][s+1]; PID<amr->NPatchComma[lv][s+2]; PID++)
Refine/Refine_Buffer.cpp:48:         if ( amr->patch[0][lv][PID]->flag )
Refine/Refine_Buffer.cpp:51:            amr->patch[0][lv][PID]->son = amr->num[lv+1];
Refine/Refine_Buffer.cpp:55:            Cr = amr->patch[0][lv][PID]->corner;
Refine/Refine_Buffer.cpp:57:            amr->pnew( lv+1, Cr[0],       Cr[1],       Cr[2],       PID, AllocData[0], AllocData[0], AllocData[0] );
Refine/Refine_Buffer.cpp:58:            amr->pnew( lv+1, Cr[0]+Width, Cr[1],       Cr[2],       PID, AllocData[1], AllocData[1], AllocData[1] );
Refine/Refine_Buffer.cpp:59:            amr->pnew( lv+1, Cr[0],       Cr[1]+Width, Cr[2],       PID, AllocData[2], AllocData[2], AllocData[2] );
Refine/Refine_Buffer.cpp:60:            amr->pnew( lv+1, Cr[0],       Cr[1],       Cr[2]+Width, PID, AllocData[3], AllocData[3], AllocData[3] );
Refine/Refine_Buffer.cpp:61:            amr->pnew( lv+1, Cr[0]+Width, Cr[1]+Width, Cr[2],       PID, AllocData[4], AllocData[4], AllocData[4] );
Refine/Refine_Buffer.cpp:62:            amr->pnew( lv+1, Cr[0],       Cr[1]+Width, Cr[2]+Width, PID, AllocData[5], AllocData[5], AllocData[5] );
Refine/Refine_Buffer.cpp:63:            amr->pnew( lv+1, Cr[0]+Width, Cr[1],       Cr[2]+Width, PID, AllocData[6], AllocData[6], AllocData[6] );
Refine/Refine_Buffer.cpp:64:            amr->pnew( lv+1, Cr[0]+Width, Cr[1]+Width, Cr[2]+Width, PID, AllocData[7], AllocData[7], AllocData[7] );
Refine/Refine_Buffer.cpp:68:            amr->NPatchComma[lv+1][s+2] += 8;
Refine/Refine_Buffer.cpp:70:         } // if ( amr->patch[0][lv][PID]->flag )
Refine/Refine_Buffer.cpp:71:      } // for (int PID=amr->NPatchComma[lv][s+1]; PID<amr->NPatchComma[lv][s+2]; PID++)
Refine/Refine_Buffer.cpp:73:      for (int n=s+3; n<28; n++)    amr->NPatchComma[lv+1][n] = amr->num[lv+1];
Refine/Refine_Buffer.cpp:78:// check the amr->NPatchComma recording
Refine/Refine_Buffer.cpp:79:   if ( amr->NPatchComma[lv+1][27] != amr->num[lv+1] )
Refine/Refine_Buffer.cpp:80:      Aux_Error( ERROR_INFO, "amr->NPatchComma[%d][27] (%d) != amr->num[%d] (%d) !!\n",
Refine/Refine_Buffer.cpp:81:                 lv+1, amr->NPatchComma[lv+1][27], lv+1, amr->num[lv+1] );
Refine/Refine_Buffer.cpp:91:         if ( amr->NPatchComma[lv+2][s+1] == amr->NPatchComma[lv+2][s+2] )    continue;
Refine/Refine_Buffer.cpp:93:         for (int SonPID0=amr->NPatchComma[lv+1][s+1]; SonPID0<amr->NPatchComma[lv+1][s+2]; SonPID0+=8)
Refine/Refine_Buffer.cpp:95:         for (int SonPID0=amr->NPatchComma[lv+1][1]; SonPID0<amr->NPatchComma[lv+1][27]; SonPID0+=8)
Refine/Refine_Buffer.cpp:97:            const int FaID      = amr->patch[0][lv+1][SonPID0]->father - amr->NPatchComma[lv][1];
Refine/Refine_Buffer.cpp:109:                     amr->patch[0][lv+1][SonPID]->son = GrandPID0;
Refine/Refine_Buffer.cpp:112:                        amr->patch[0][lv+2][GrandPID]->father = SonPID;
Refine/Refine_Buffer.cpp:117:         } // for (int SonPID0=amr->NPatchComma[lv+1][s+1]; SonPID0<amr->NPatchComma[lv+1][s+2]; SonPID0+=8)
Refine/SiblingSearch.cpp:30:   for (int PID=0; PID<amr->num[lv]; PID++)
Refine/SiblingSearch.cpp:33:      patch_t *fa = amr->patch[0][lv-1][ amr->patch[0][lv][PID]->father ];
Refine/SiblingSearch.cpp:36:      for (int s=0; s<26; s++)      amr->patch[0][lv][PID]->sibling[s] = -1;
Refine/SiblingSearch.cpp:41:            amr->patch[0][lv][PID]->sibling[ 1] = PID+1;
Refine/SiblingSearch.cpp:42:            amr->patch[0][lv][PID]->sibling[ 3] = PID+2;
Refine/SiblingSearch.cpp:43:            amr->patch[0][lv][PID]->sibling[ 5] = PID+3;
Refine/SiblingSearch.cpp:44:            amr->patch[0][lv][PID]->sibling[ 9] = PID+4;
Refine/SiblingSearch.cpp:45:            amr->patch[0][lv][PID]->sibling[13] = PID+5;
Refine/SiblingSearch.cpp:46:            amr->patch[0][lv][PID]->sibling[17] = PID+6;
Refine/SiblingSearch.cpp:47:            amr->patch[0][lv][PID]->sibling[25] = PID+7;
Refine/SiblingSearch.cpp:51:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:53:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSibSon + 1;
Refine/SiblingSearch.cpp:54:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSibSon + 4;
Refine/SiblingSearch.cpp:55:                  amr->patch[0][lv][PID]->sibling[15] = FaSibSon + 6;
Refine/SiblingSearch.cpp:56:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon + 7;
Refine/SiblingSearch.cpp:61:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSib;
Refine/SiblingSearch.cpp:62:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSib;
Refine/SiblingSearch.cpp:63:                  amr->patch[0][lv][PID]->sibling[15] = FaSib;
Refine/SiblingSearch.cpp:64:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:69:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:71:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSibSon + 2;
Refine/SiblingSearch.cpp:72:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSibSon + 4;
Refine/SiblingSearch.cpp:73:                  amr->patch[0][lv][PID]->sibling[12] = FaSibSon + 5;
Refine/SiblingSearch.cpp:74:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon + 7;
Refine/SiblingSearch.cpp:79:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSib;
Refine/SiblingSearch.cpp:80:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSib;
Refine/SiblingSearch.cpp:81:                  amr->patch[0][lv][PID]->sibling[12] = FaSib;
Refine/SiblingSearch.cpp:82:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:87:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:89:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSibSon + 3;
Refine/SiblingSearch.cpp:90:                  amr->patch[0][lv][PID]->sibling[11] = FaSibSon + 5;
Refine/SiblingSearch.cpp:91:                  amr->patch[0][lv][PID]->sibling[16] = FaSibSon + 6;
Refine/SiblingSearch.cpp:92:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon + 7;
Refine/SiblingSearch.cpp:97:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSib;
Refine/SiblingSearch.cpp:98:                  amr->patch[0][lv][PID]->sibling[11] = FaSib;
Refine/SiblingSearch.cpp:99:                  amr->patch[0][lv][PID]->sibling[16] = FaSib;
Refine/SiblingSearch.cpp:100:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:105:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:107:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSibSon + 4;
Refine/SiblingSearch.cpp:108:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon + 7;
Refine/SiblingSearch.cpp:113:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSib;
Refine/SiblingSearch.cpp:114:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:119:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:121:                  amr->patch[0][lv][PID]->sibling[10] = FaSibSon + 5;
Refine/SiblingSearch.cpp:122:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon + 7;
Refine/SiblingSearch.cpp:127:                  amr->patch[0][lv][PID]->sibling[10] = FaSib;
Refine/SiblingSearch.cpp:128:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:133:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:135:                  amr->patch[0][lv][PID]->sibling[14] = FaSibSon + 6;
Refine/SiblingSearch.cpp:136:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon + 7;
Refine/SiblingSearch.cpp:141:                  amr->patch[0][lv][PID]->sibling[14] = FaSib;
Refine/SiblingSearch.cpp:142:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:147:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:148:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 7;
Refine/SiblingSearch.cpp:151:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:157:            amr->patch[0][lv][PID]->sibling[ 8] = PID+1;
Refine/SiblingSearch.cpp:158:            amr->patch[0][lv][PID]->sibling[15] = PID+2;
Refine/SiblingSearch.cpp:159:            amr->patch[0][lv][PID]->sibling[ 3] = PID+3;
Refine/SiblingSearch.cpp:160:            amr->patch[0][lv][PID]->sibling[24] = PID+4;
Refine/SiblingSearch.cpp:161:            amr->patch[0][lv][PID]->sibling[ 5] = PID+5;
Refine/SiblingSearch.cpp:162:            amr->patch[0][lv][PID]->sibling[13] = PID+6;
Refine/SiblingSearch.cpp:163:            amr->patch[0][lv][PID]->sibling[ 0] = PID-1;
Refine/SiblingSearch.cpp:167:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:169:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSibSon;
Refine/SiblingSearch.cpp:170:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSibSon + 2;
Refine/SiblingSearch.cpp:171:                  amr->patch[0][lv][PID]->sibling[17] = FaSibSon + 3;
Refine/SiblingSearch.cpp:172:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon + 5;
Refine/SiblingSearch.cpp:177:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSib;
Refine/SiblingSearch.cpp:178:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSib;
Refine/SiblingSearch.cpp:179:                  amr->patch[0][lv][PID]->sibling[17] = FaSib;
Refine/SiblingSearch.cpp:180:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:185:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:187:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSibSon + 2;
Refine/SiblingSearch.cpp:188:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSibSon + 4;
Refine/SiblingSearch.cpp:189:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon + 5;
Refine/SiblingSearch.cpp:190:                  amr->patch[0][lv][PID]->sibling[12] = FaSibSon + 7;
Refine/SiblingSearch.cpp:195:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSib;
Refine/SiblingSearch.cpp:196:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSib;
Refine/SiblingSearch.cpp:197:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:198:                  amr->patch[0][lv][PID]->sibling[12] = FaSib;
Refine/SiblingSearch.cpp:203:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:205:                  amr->patch[0][lv][PID]->sibling[14] = FaSibSon + 3;
Refine/SiblingSearch.cpp:206:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon + 5;
Refine/SiblingSearch.cpp:207:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSibSon + 6;
Refine/SiblingSearch.cpp:208:                  amr->patch[0][lv][PID]->sibling[11] = FaSibSon + 7;
Refine/SiblingSearch.cpp:213:                  amr->patch[0][lv][PID]->sibling[14] = FaSib;
Refine/SiblingSearch.cpp:214:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:215:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSib;
Refine/SiblingSearch.cpp:216:                  amr->patch[0][lv][PID]->sibling[11] = FaSib;
Refine/SiblingSearch.cpp:221:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:223:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSibSon + 2;
Refine/SiblingSearch.cpp:224:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon + 5;
Refine/SiblingSearch.cpp:229:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSib;
Refine/SiblingSearch.cpp:230:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:235:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:237:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 5;
Refine/SiblingSearch.cpp:238:                  amr->patch[0][lv][PID]->sibling[10] = FaSibSon + 7;
Refine/SiblingSearch.cpp:243:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:244:                  amr->patch[0][lv][PID]->sibling[10] = FaSib;
Refine/SiblingSearch.cpp:249:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:251:                  amr->patch[0][lv][PID]->sibling[16] = FaSibSon + 3;
Refine/SiblingSearch.cpp:252:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon + 5;
Refine/SiblingSearch.cpp:257:                  amr->patch[0][lv][PID]->sibling[16] = FaSib;
Refine/SiblingSearch.cpp:258:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:263:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:264:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon + 5;
Refine/SiblingSearch.cpp:267:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:273:            amr->patch[0][lv][PID]->sibling[12] = PID+1;
Refine/SiblingSearch.cpp:274:            amr->patch[0][lv][PID]->sibling[ 1] = PID+2;
Refine/SiblingSearch.cpp:275:            amr->patch[0][lv][PID]->sibling[ 5] = PID+3;
Refine/SiblingSearch.cpp:276:            amr->patch[0][lv][PID]->sibling[23] = PID+4;
Refine/SiblingSearch.cpp:277:            amr->patch[0][lv][PID]->sibling[17] = PID+5;
Refine/SiblingSearch.cpp:278:            amr->patch[0][lv][PID]->sibling[ 7] = PID-1;
Refine/SiblingSearch.cpp:279:            amr->patch[0][lv][PID]->sibling[ 2] = PID-2;
Refine/SiblingSearch.cpp:283:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:285:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSibSon + 1;
Refine/SiblingSearch.cpp:286:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSibSon + 4;
Refine/SiblingSearch.cpp:287:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon + 6;
Refine/SiblingSearch.cpp:288:                  amr->patch[0][lv][PID]->sibling[15] = FaSibSon + 7;
Refine/SiblingSearch.cpp:293:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSib;
Refine/SiblingSearch.cpp:294:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSib;
Refine/SiblingSearch.cpp:295:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:296:                  amr->patch[0][lv][PID]->sibling[15] = FaSib;
Refine/SiblingSearch.cpp:301:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:303:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSibSon;
Refine/SiblingSearch.cpp:304:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSibSon + 1;
Refine/SiblingSearch.cpp:305:                  amr->patch[0][lv][PID]->sibling[13] = FaSibSon + 3;
Refine/SiblingSearch.cpp:306:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon + 6;
Refine/SiblingSearch.cpp:311:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSib;
Refine/SiblingSearch.cpp:312:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSib;
Refine/SiblingSearch.cpp:313:                  amr->patch[0][lv][PID]->sibling[13] = FaSib;
Refine/SiblingSearch.cpp:314:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:319:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:321:                  amr->patch[0][lv][PID]->sibling[10] = FaSibSon + 3;
Refine/SiblingSearch.cpp:322:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSibSon + 5;
Refine/SiblingSearch.cpp:323:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon + 6;
Refine/SiblingSearch.cpp:324:                  amr->patch[0][lv][PID]->sibling[16] = FaSibSon + 7;
Refine/SiblingSearch.cpp:329:                  amr->patch[0][lv][PID]->sibling[10] = FaSib;
Refine/SiblingSearch.cpp:330:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSib;
Refine/SiblingSearch.cpp:331:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:332:                  amr->patch[0][lv][PID]->sibling[16] = FaSib;
Refine/SiblingSearch.cpp:337:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:339:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSibSon + 1;
Refine/SiblingSearch.cpp:340:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon + 6;
Refine/SiblingSearch.cpp:345:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSib;
Refine/SiblingSearch.cpp:346:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:351:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:353:                  amr->patch[0][lv][PID]->sibling[11] = FaSibSon + 3;
Refine/SiblingSearch.cpp:354:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon + 6;
Refine/SiblingSearch.cpp:359:                  amr->patch[0][lv][PID]->sibling[11] = FaSib;
Refine/SiblingSearch.cpp:360:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:365:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:367:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 6;
Refine/SiblingSearch.cpp:368:                  amr->patch[0][lv][PID]->sibling[14] = FaSibSon + 7;
Refine/SiblingSearch.cpp:373:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:374:                  amr->patch[0][lv][PID]->sibling[14] = FaSib;
Refine/SiblingSearch.cpp:379:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:380:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon + 6;
Refine/SiblingSearch.cpp:383:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:389:            amr->patch[0][lv][PID]->sibling[21] = PID+1;
Refine/SiblingSearch.cpp:390:            amr->patch[0][lv][PID]->sibling[ 3] = PID+2;
Refine/SiblingSearch.cpp:391:            amr->patch[0][lv][PID]->sibling[ 1] = PID+3;
Refine/SiblingSearch.cpp:392:            amr->patch[0][lv][PID]->sibling[ 9] = PID+4;
Refine/SiblingSearch.cpp:393:            amr->patch[0][lv][PID]->sibling[11] = PID-1;
Refine/SiblingSearch.cpp:394:            amr->patch[0][lv][PID]->sibling[16] = PID-2;
Refine/SiblingSearch.cpp:395:            amr->patch[0][lv][PID]->sibling[ 4] = PID-3;
Refine/SiblingSearch.cpp:399:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:401:                  amr->patch[0][lv][PID]->sibling[14] = FaSibSon + 1;
Refine/SiblingSearch.cpp:402:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon + 4;
Refine/SiblingSearch.cpp:403:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSibSon + 6;
Refine/SiblingSearch.cpp:404:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSibSon + 7;
Refine/SiblingSearch.cpp:409:                  amr->patch[0][lv][PID]->sibling[14] = FaSib;
Refine/SiblingSearch.cpp:410:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:411:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSib;
Refine/SiblingSearch.cpp:412:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSib;
Refine/SiblingSearch.cpp:417:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:419:                  amr->patch[0][lv][PID]->sibling[10] = FaSibSon + 2;
Refine/SiblingSearch.cpp:420:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon + 4;
Refine/SiblingSearch.cpp:421:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSibSon + 5;
Refine/SiblingSearch.cpp:422:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSibSon + 7;
Refine/SiblingSearch.cpp:427:                  amr->patch[0][lv][PID]->sibling[10] = FaSib;
Refine/SiblingSearch.cpp:428:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:429:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSib;
Refine/SiblingSearch.cpp:430:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSib;
Refine/SiblingSearch.cpp:435:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:437:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSibSon;
Refine/SiblingSearch.cpp:438:                  amr->patch[0][lv][PID]->sibling[17] = FaSibSon + 1;
Refine/SiblingSearch.cpp:439:                  amr->patch[0][lv][PID]->sibling[13] = FaSibSon + 2;
Refine/SiblingSearch.cpp:440:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon + 4;
Refine/SiblingSearch.cpp:445:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSib;
Refine/SiblingSearch.cpp:446:                  amr->patch[0][lv][PID]->sibling[17] = FaSib;
Refine/SiblingSearch.cpp:447:                  amr->patch[0][lv][PID]->sibling[13] = FaSib;
Refine/SiblingSearch.cpp:448:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:453:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:455:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 4;
Refine/SiblingSearch.cpp:456:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSibSon + 7;
Refine/SiblingSearch.cpp:461:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:462:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSib;
Refine/SiblingSearch.cpp:467:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:469:                  amr->patch[0][lv][PID]->sibling[12] = FaSibSon + 2;
Refine/SiblingSearch.cpp:470:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon + 4;
Refine/SiblingSearch.cpp:475:                  amr->patch[0][lv][PID]->sibling[12] = FaSib;
Refine/SiblingSearch.cpp:476:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:481:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:483:                  amr->patch[0][lv][PID]->sibling[15] = FaSibSon + 1;
Refine/SiblingSearch.cpp:484:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon + 4;
Refine/SiblingSearch.cpp:489:                  amr->patch[0][lv][PID]->sibling[15] = FaSib;
Refine/SiblingSearch.cpp:490:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:495:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:496:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon + 4;
Refine/SiblingSearch.cpp:499:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:505:            amr->patch[0][lv][PID]->sibling[15] = PID+1;
Refine/SiblingSearch.cpp:506:            amr->patch[0][lv][PID]->sibling[12] = PID+2;
Refine/SiblingSearch.cpp:507:            amr->patch[0][lv][PID]->sibling[ 5] = PID+3;
Refine/SiblingSearch.cpp:508:            amr->patch[0][lv][PID]->sibling[22] = PID-1;
Refine/SiblingSearch.cpp:509:            amr->patch[0][lv][PID]->sibling[ 0] = PID-2;
Refine/SiblingSearch.cpp:510:            amr->patch[0][lv][PID]->sibling[ 2] = PID-3;
Refine/SiblingSearch.cpp:511:            amr->patch[0][lv][PID]->sibling[ 6] = PID-4;
Refine/SiblingSearch.cpp:515:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:517:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSibSon;
Refine/SiblingSearch.cpp:518:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSibSon + 2;
Refine/SiblingSearch.cpp:519:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon + 3;
Refine/SiblingSearch.cpp:520:                  amr->patch[0][lv][PID]->sibling[17] = FaSibSon + 5;
Refine/SiblingSearch.cpp:525:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSib;
Refine/SiblingSearch.cpp:526:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSib;
Refine/SiblingSearch.cpp:527:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:528:                  amr->patch[0][lv][PID]->sibling[17] = FaSib;
Refine/SiblingSearch.cpp:533:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:535:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSibSon;
Refine/SiblingSearch.cpp:536:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSibSon + 1;
Refine/SiblingSearch.cpp:537:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon + 3;
Refine/SiblingSearch.cpp:538:                  amr->patch[0][lv][PID]->sibling[13] = FaSibSon + 6;
Refine/SiblingSearch.cpp:543:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSib;
Refine/SiblingSearch.cpp:544:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSib;
Refine/SiblingSearch.cpp:545:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:546:                  amr->patch[0][lv][PID]->sibling[13] = FaSib;
Refine/SiblingSearch.cpp:551:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:553:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 3;
Refine/SiblingSearch.cpp:554:                  amr->patch[0][lv][PID]->sibling[14] = FaSibSon + 5;
Refine/SiblingSearch.cpp:555:                  amr->patch[0][lv][PID]->sibling[10] = FaSibSon + 6;
Refine/SiblingSearch.cpp:556:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSibSon + 7;
Refine/SiblingSearch.cpp:561:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:562:                  amr->patch[0][lv][PID]->sibling[14] = FaSib;
Refine/SiblingSearch.cpp:563:                  amr->patch[0][lv][PID]->sibling[10] = FaSib;
Refine/SiblingSearch.cpp:564:                  amr->patch[0][lv][PID]->sibling[ 4] = FaSib;
Refine/SiblingSearch.cpp:569:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:571:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSibSon;
Refine/SiblingSearch.cpp:572:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon + 3;
Refine/SiblingSearch.cpp:577:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSib;
Refine/SiblingSearch.cpp:578:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:583:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:585:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon + 3;
Refine/SiblingSearch.cpp:586:                  amr->patch[0][lv][PID]->sibling[11] = FaSibSon + 6;
Refine/SiblingSearch.cpp:591:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:592:                  amr->patch[0][lv][PID]->sibling[11] = FaSib;
Refine/SiblingSearch.cpp:597:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:599:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon + 3;
Refine/SiblingSearch.cpp:600:                  amr->patch[0][lv][PID]->sibling[16] = FaSibSon + 5;
Refine/SiblingSearch.cpp:605:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:606:                  amr->patch[0][lv][PID]->sibling[16] = FaSib;
Refine/SiblingSearch.cpp:611:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:612:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon + 3;
Refine/SiblingSearch.cpp:615:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:621:            amr->patch[0][lv][PID]->sibling[ 7] = PID+1;
Refine/SiblingSearch.cpp:622:            amr->patch[0][lv][PID]->sibling[ 1] = PID+2;
Refine/SiblingSearch.cpp:623:            amr->patch[0][lv][PID]->sibling[16] = PID-1;
Refine/SiblingSearch.cpp:624:            amr->patch[0][lv][PID]->sibling[ 2] = PID-2;
Refine/SiblingSearch.cpp:625:            amr->patch[0][lv][PID]->sibling[ 4] = PID-3;
Refine/SiblingSearch.cpp:626:            amr->patch[0][lv][PID]->sibling[19] = PID-4;
Refine/SiblingSearch.cpp:627:            amr->patch[0][lv][PID]->sibling[10] = PID-5;
Refine/SiblingSearch.cpp:631:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:633:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 1;
Refine/SiblingSearch.cpp:634:                  amr->patch[0][lv][PID]->sibling[14] = FaSibSon + 4;
Refine/SiblingSearch.cpp:635:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSibSon + 6;
Refine/SiblingSearch.cpp:636:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSibSon + 7;
Refine/SiblingSearch.cpp:641:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:642:                  amr->patch[0][lv][PID]->sibling[14] = FaSib;
Refine/SiblingSearch.cpp:643:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSib;
Refine/SiblingSearch.cpp:644:                  amr->patch[0][lv][PID]->sibling[ 0] = FaSib;
Refine/SiblingSearch.cpp:649:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:651:                  amr->patch[0][lv][PID]->sibling[11] = FaSibSon;
Refine/SiblingSearch.cpp:652:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon + 1;
Refine/SiblingSearch.cpp:653:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSibSon + 3;
Refine/SiblingSearch.cpp:654:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSibSon + 6;
Refine/SiblingSearch.cpp:659:                  amr->patch[0][lv][PID]->sibling[11] = FaSib;
Refine/SiblingSearch.cpp:660:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:661:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSib;
Refine/SiblingSearch.cpp:662:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSib;
Refine/SiblingSearch.cpp:667:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:669:                  amr->patch[0][lv][PID]->sibling[12] = FaSibSon;
Refine/SiblingSearch.cpp:670:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon + 1;
Refine/SiblingSearch.cpp:671:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSibSon + 2;
Refine/SiblingSearch.cpp:672:                  amr->patch[0][lv][PID]->sibling[17] = FaSibSon + 4;
Refine/SiblingSearch.cpp:677:                  amr->patch[0][lv][PID]->sibling[12] = FaSib;
Refine/SiblingSearch.cpp:678:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:679:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSib;
Refine/SiblingSearch.cpp:680:                  amr->patch[0][lv][PID]->sibling[17] = FaSib;
Refine/SiblingSearch.cpp:685:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:687:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon + 1;
Refine/SiblingSearch.cpp:688:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSibSon + 6;
Refine/SiblingSearch.cpp:693:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:694:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSib;
Refine/SiblingSearch.cpp:699:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:701:                  amr->patch[0][lv][PID]->sibling[13] = FaSibSon;
Refine/SiblingSearch.cpp:702:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon + 1;
Refine/SiblingSearch.cpp:707:                  amr->patch[0][lv][PID]->sibling[13] = FaSib;
Refine/SiblingSearch.cpp:708:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:713:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:715:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon + 1;
Refine/SiblingSearch.cpp:716:                  amr->patch[0][lv][PID]->sibling[15] = FaSibSon + 4;
Refine/SiblingSearch.cpp:721:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:722:                  amr->patch[0][lv][PID]->sibling[15] = FaSib;
Refine/SiblingSearch.cpp:727:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:728:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon + 1;
Refine/SiblingSearch.cpp:731:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:737:            amr->patch[0][lv][PID]->sibling[ 3] = PID+1;
Refine/SiblingSearch.cpp:738:            amr->patch[0][lv][PID]->sibling[ 8] = PID-1;
Refine/SiblingSearch.cpp:739:            amr->patch[0][lv][PID]->sibling[11] = PID-2;
Refine/SiblingSearch.cpp:740:            amr->patch[0][lv][PID]->sibling[ 0] = PID-3;
Refine/SiblingSearch.cpp:741:            amr->patch[0][lv][PID]->sibling[20] = PID-4;
Refine/SiblingSearch.cpp:742:            amr->patch[0][lv][PID]->sibling[ 4] = PID-5;
Refine/SiblingSearch.cpp:743:            amr->patch[0][lv][PID]->sibling[14] = PID-6;
Refine/SiblingSearch.cpp:747:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:749:                  amr->patch[0][lv][PID]->sibling[16] = FaSibSon;
Refine/SiblingSearch.cpp:750:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon + 2;
Refine/SiblingSearch.cpp:751:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSibSon + 3;
Refine/SiblingSearch.cpp:752:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSibSon + 5;
Refine/SiblingSearch.cpp:757:                  amr->patch[0][lv][PID]->sibling[16] = FaSib;
Refine/SiblingSearch.cpp:758:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:759:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSib;
Refine/SiblingSearch.cpp:760:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSib;
Refine/SiblingSearch.cpp:765:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:767:                  amr->patch[0][lv][PID]->sibling[18] = FaSibSon + 2;
Refine/SiblingSearch.cpp:768:                  amr->patch[0][lv][PID]->sibling[10] = FaSibSon + 4;
Refine/SiblingSearch.cpp:769:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSibSon + 5;
Refine/SiblingSearch.cpp:770:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSibSon + 7;
Refine/SiblingSearch.cpp:775:                  amr->patch[0][lv][PID]->sibling[18] = FaSib;
Refine/SiblingSearch.cpp:776:                  amr->patch[0][lv][PID]->sibling[10] = FaSib;
Refine/SiblingSearch.cpp:777:                  amr->patch[0][lv][PID]->sibling[ 6] = FaSib;
Refine/SiblingSearch.cpp:778:                  amr->patch[0][lv][PID]->sibling[ 2] = FaSib;
Refine/SiblingSearch.cpp:783:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:785:                  amr->patch[0][lv][PID]->sibling[15] = FaSibSon;
Refine/SiblingSearch.cpp:786:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSibSon + 1;
Refine/SiblingSearch.cpp:787:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon + 2;
Refine/SiblingSearch.cpp:788:                  amr->patch[0][lv][PID]->sibling[13] = FaSibSon + 4;
Refine/SiblingSearch.cpp:793:                  amr->patch[0][lv][PID]->sibling[15] = FaSib;
Refine/SiblingSearch.cpp:794:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSib;
Refine/SiblingSearch.cpp:795:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:796:                  amr->patch[0][lv][PID]->sibling[13] = FaSib;
Refine/SiblingSearch.cpp:801:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:803:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon + 2;
Refine/SiblingSearch.cpp:804:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSibSon + 5;
Refine/SiblingSearch.cpp:809:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:810:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSib;
Refine/SiblingSearch.cpp:815:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:817:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon + 2;
Refine/SiblingSearch.cpp:818:                  amr->patch[0][lv][PID]->sibling[12] = FaSibSon + 4;
Refine/SiblingSearch.cpp:823:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:824:                  amr->patch[0][lv][PID]->sibling[12] = FaSib;
Refine/SiblingSearch.cpp:829:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:831:                  amr->patch[0][lv][PID]->sibling[17] = FaSibSon;
Refine/SiblingSearch.cpp:832:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon + 2;
Refine/SiblingSearch.cpp:837:                  amr->patch[0][lv][PID]->sibling[17] = FaSib;
Refine/SiblingSearch.cpp:838:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:843:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:844:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon + 2;
Refine/SiblingSearch.cpp:847:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:853:            amr->patch[0][lv][PID]->sibling[ 2] = PID-1;
Refine/SiblingSearch.cpp:854:            amr->patch[0][lv][PID]->sibling[ 0] = PID-2;
Refine/SiblingSearch.cpp:855:            amr->patch[0][lv][PID]->sibling[ 4] = PID-3;
Refine/SiblingSearch.cpp:856:            amr->patch[0][lv][PID]->sibling[ 6] = PID-4;
Refine/SiblingSearch.cpp:857:            amr->patch[0][lv][PID]->sibling[14] = PID-5;
Refine/SiblingSearch.cpp:858:            amr->patch[0][lv][PID]->sibling[10] = PID-6;
Refine/SiblingSearch.cpp:859:            amr->patch[0][lv][PID]->sibling[18] = PID-7;
Refine/SiblingSearch.cpp:863:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:865:                  amr->patch[0][lv][PID]->sibling[19] = FaSibSon;
Refine/SiblingSearch.cpp:866:                  amr->patch[0][lv][PID]->sibling[16] = FaSibSon + 2;
Refine/SiblingSearch.cpp:867:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSibSon + 3;
Refine/SiblingSearch.cpp:868:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSibSon + 5;
Refine/SiblingSearch.cpp:873:                  amr->patch[0][lv][PID]->sibling[19] = FaSib;
Refine/SiblingSearch.cpp:874:                  amr->patch[0][lv][PID]->sibling[16] = FaSib;
Refine/SiblingSearch.cpp:875:                  amr->patch[0][lv][PID]->sibling[ 7] = FaSib;
Refine/SiblingSearch.cpp:876:                  amr->patch[0][lv][PID]->sibling[ 1] = FaSib;
Refine/SiblingSearch.cpp:881:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:883:                  amr->patch[0][lv][PID]->sibling[20] = FaSibSon;
Refine/SiblingSearch.cpp:884:                  amr->patch[0][lv][PID]->sibling[11] = FaSibSon + 1;
Refine/SiblingSearch.cpp:885:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSibSon + 3;
Refine/SiblingSearch.cpp:886:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSibSon + 6;
Refine/SiblingSearch.cpp:891:                  amr->patch[0][lv][PID]->sibling[20] = FaSib;
Refine/SiblingSearch.cpp:892:                  amr->patch[0][lv][PID]->sibling[11] = FaSib;
Refine/SiblingSearch.cpp:893:                  amr->patch[0][lv][PID]->sibling[ 8] = FaSib;
Refine/SiblingSearch.cpp:894:                  amr->patch[0][lv][PID]->sibling[ 3] = FaSib;
Refine/SiblingSearch.cpp:899:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:901:                  amr->patch[0][lv][PID]->sibling[22] = FaSibSon;
Refine/SiblingSearch.cpp:902:                  amr->patch[0][lv][PID]->sibling[12] = FaSibSon + 1;
Refine/SiblingSearch.cpp:903:                  amr->patch[0][lv][PID]->sibling[15] = FaSibSon + 2;
Refine/SiblingSearch.cpp:904:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSibSon + 4;
Refine/SiblingSearch.cpp:909:                  amr->patch[0][lv][PID]->sibling[22] = FaSib;
Refine/SiblingSearch.cpp:910:                  amr->patch[0][lv][PID]->sibling[12] = FaSib;
Refine/SiblingSearch.cpp:911:                  amr->patch[0][lv][PID]->sibling[15] = FaSib;
Refine/SiblingSearch.cpp:912:                  amr->patch[0][lv][PID]->sibling[ 5] = FaSib;
Refine/SiblingSearch.cpp:917:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:919:                  amr->patch[0][lv][PID]->sibling[21] = FaSibSon;
Refine/SiblingSearch.cpp:920:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSibSon + 3;
Refine/SiblingSearch.cpp:925:                  amr->patch[0][lv][PID]->sibling[21] = FaSib;
Refine/SiblingSearch.cpp:926:                  amr->patch[0][lv][PID]->sibling[ 9] = FaSib;
Refine/SiblingSearch.cpp:931:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:933:                  amr->patch[0][lv][PID]->sibling[24] = FaSibSon;
Refine/SiblingSearch.cpp:934:                  amr->patch[0][lv][PID]->sibling[13] = FaSibSon + 1;
Refine/SiblingSearch.cpp:939:                  amr->patch[0][lv][PID]->sibling[24] = FaSib;
Refine/SiblingSearch.cpp:940:                  amr->patch[0][lv][PID]->sibling[13] = FaSib;
Refine/SiblingSearch.cpp:945:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:947:                  amr->patch[0][lv][PID]->sibling[23] = FaSibSon;
Refine/SiblingSearch.cpp:948:                  amr->patch[0][lv][PID]->sibling[17] = FaSibSon + 2;
Refine/SiblingSearch.cpp:953:                  amr->patch[0][lv][PID]->sibling[23] = FaSib;
Refine/SiblingSearch.cpp:954:                  amr->patch[0][lv][PID]->sibling[17] = FaSib;
Refine/SiblingSearch.cpp:959:               if (  ( FaSibSon = amr->patch[0][lv-1][FaSib]->son ) != -1  )
Refine/SiblingSearch.cpp:960:                  amr->patch[0][lv][PID]->sibling[25] = FaSibSon;
Refine/SiblingSearch.cpp:963:                  amr->patch[0][lv][PID]->sibling[25] = FaSib;
Refine/SiblingSearch.cpp:968:   }  // for (int PID=0; PID<amr->num[lv]; PID++)
Refine/SiblingSearch_Base.cpp:18:   for (int PID=0; PID<amr->num[0]; PID++)
Refine/SiblingSearch_Base.cpp:20:      amr->patch[0][0][PID]->sibling[s] = -1;
Refine/SiblingSearch_Base.cpp:23:   for (int PID=0; PID<amr->NPatchComma[0][1]; PID++)
Refine/SiblingSearch_Base.cpp:29:   for (int PID0=amr->NPatchComma[0][s+1]; PID0<amr->NPatchComma[0][s+2]; PID0+=8)
Refine/SiblingSearch_Base.cpp:50:   const int scale0      = amr->scale[0];
Refine/SiblingSearch_Base.cpp:55:      order[d] = (amr->patch[0][0][PID]->corner[d] - MPI_Rank_X[d]*NX0[d]*scale0) / (PATCH_SIZE*scale0) + 2;
Refine/SiblingSearch_Base.cpp:85:   for (int s=0; s<26; s++)      amr->patch[0][0][PID]->sibling[s] = BaseP[ Sib[s] ];
Refine/Flag_Check.cpp:143:      Flag |= (  SQR(amr->dh[lv]) > JeansCoeff*Pres_1Cell/SQR( Dens_1Cell )  );
Refine/Flag_Real.cpp:36:   for (int PID=0; PID<amr->num[lv]; PID++)  amr->patch[0][lv][PID]->flag = false;
Refine/Flag_Real.cpp:45:   const real dv                      = CUBE( amr->dh[lv] );
Refine/Flag_Real.cpp:170:      for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Refine/Flag_Real.cpp:191:               if ( amr->patch[0][lv][PID]->sibling[sib] == -1 )
Refine/Flag_Real.cpp:203:                  int CornerL = amr->patch[0][lv][PID]->corner[d];
Refine/Flag_Real.cpp:207:                       CornerR >= amr->BoxScale[d] - NoRefineBoundaryRegion    )
Refine/Flag_Real.cpp:220:               Fluid     = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid;
Refine/Flag_Real.cpp:222:               Pot       = amr->patch[ amr->PotSg[lv] ][lv][PID]->pot;
Refine/Flag_Real.cpp:237:                     MHD_GetCellCenteredBFieldInPatch( MagCC_1Cell, lv, PID, i, j, k, amr->MagSg[lv] );
Refine/Flag_Real.cpp:323:                  if ( amr->patch[0][lv][PID]->son == -1 )
Refine/Flag_Real.cpp:325:                     NParThisPatch   = amr->patch[0][lv][PID]->NPar;
Refine/Flag_Real.cpp:326:                     ParList         = amr->patch[0][lv][PID]->ParList;
Refine/Flag_Real.cpp:331:                     if ( amr->patch[0][lv][PID]->NPar_Copy != -1 )
Refine/Flag_Real.cpp:333:                                   lv, PID, amr->patch[0][lv][PID]->NPar_Copy );
Refine/Flag_Real.cpp:339:                     NParThisPatch   = amr->patch[0][lv][PID]->NPar_Copy;
Refine/Flag_Real.cpp:343:                     InputMassPos    = amr->patch[0][lv][PID]->ParAtt_Copy;
Refine/Flag_Real.cpp:345:                     ParList         = amr->patch[0][lv][PID]->ParList_Copy;
Refine/Flag_Real.cpp:351:                     if ( amr->patch[0][lv][PID]->NPar != 0 )
Refine/Flag_Real.cpp:353:                                   lv, PID, amr->patch[0][lv][PID]->NPar );
Refine/Flag_Real.cpp:386:                                      amr->patch[0][lv][PID]->EdgeL, amr->dh[lv], PredictPos_No, NULL_REAL,
Refine/Flag_Real.cpp:392:                                      amr->patch[0][lv][PID]->EdgeL, amr->dh[lv], PredictPos_No, NULL_REAL,
Refine/Flag_Real.cpp:418:                     amr->patch[0][lv][PID]->flag = true;
Refine/Flag_Real.cpp:429:                           SibPID = amr->patch[0][lv][PID]->sibling[SibID];
Refine/Flag_Real.cpp:441:                           if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:459:                  if ( amr->patch[0][lv][PID]->son == -1 )  NParThisPatch = amr->patch[0][lv][PID]->NPar;
Refine/Flag_Real.cpp:460:                  else                                      NParThisPatch = amr->patch[0][lv][PID]->NPar_Copy;
Refine/Flag_Real.cpp:471:                     amr->patch[0][lv][PID]->flag = true;
Refine/Flag_Real.cpp:478:                           SibPID = amr->patch[0][lv][PID]->sibling[s];
Refine/Flag_Real.cpp:490:                           if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:504:                    !amr->patch[0][lv][PID]->flag  &&  amr->patch[0][lv][PID]->son != -1 )
Refine/Flag_Real.cpp:521:                        amr->patch[0][lv][PID]->flag = true;
Refine/Flag_Real.cpp:531:      } // for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
Refine/Flag_Real.cpp:556:   for (int PID=0; PID<amr->num[lv]; PID++)
Refine/Flag_Real.cpp:561:         if ( amr->patch[0][lv][PID]->sibling[sib] == -1 )
Refine/Flag_Real.cpp:563:            amr->patch[0][lv][PID]->flag = false;
Refine/Flag_Real.cpp:569:      if ( OPT__NO_FLAG_NEAR_BOUNDARY  &&  amr->patch[0][lv][PID]->flag )
Refine/Flag_Real.cpp:573:           int CornerL = amr->patch[0][lv][PID]->corner[d];
Refine/Flag_Real.cpp:577:                CornerR >= amr->BoxScale[d] - NoRefineBoundaryRegion    )
Refine/Flag_Real.cpp:579:               amr->patch[0][lv][PID]->flag = false;
Refine/Flag_Real.cpp:584:   } // for (int PID=0; PID<amr->num[lv]; PID++)
Refine/Flag_Real.cpp:609:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Refine/Flag_Real.cpp:611:         SonPID = amr->patch[0][lv][PID]->son;
Refine/Flag_Real.cpp:617:               if ( amr->patch[0][lv+1][SonPID+LocalID]->son != -1 )    // if grandson exists
Refine/Flag_Real.cpp:623:                  amr->patch[0][lv][PID]->flag = true;
Refine/Flag_Real.cpp:661:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:662:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:663:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:664:         SibPID = amr->patch[0][lv][PID]->sibling[ 6];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:665:         SibPID = amr->patch[0][lv][PID]->sibling[14];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:666:         SibPID = amr->patch[0][lv][PID]->sibling[18];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:667:         SibPID = amr->patch[0][lv][PID]->sibling[10];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:670:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:671:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:672:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:673:         SibPID = amr->patch[0][lv][PID]->sibling[ 6];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:674:         SibPID = amr->patch[0][lv][PID]->sibling[14];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:675:         SibPID = amr->patch[0][lv][PID]->sibling[18];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:676:         SibPID = amr->patch[0][lv][PID]->sibling[10];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:682:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:683:         SibPID = amr->patch[0][lv][PID]->sibling[ 7];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:684:         SibPID = amr->patch[0][lv][PID]->sibling[19];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:685:         SibPID = amr->patch[0][lv][PID]->sibling[16];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:686:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:687:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:688:         SibPID = amr->patch[0][lv][PID]->sibling[10];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:691:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:692:         SibPID = amr->patch[0][lv][PID]->sibling[ 7];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:693:         SibPID = amr->patch[0][lv][PID]->sibling[19];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:694:         SibPID = amr->patch[0][lv][PID]->sibling[16];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:695:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:696:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:697:         SibPID = amr->patch[0][lv][PID]->sibling[10];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:703:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:704:         SibPID = amr->patch[0][lv][PID]->sibling[ 8];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:705:         SibPID = amr->patch[0][lv][PID]->sibling[11];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:706:         SibPID = amr->patch[0][lv][PID]->sibling[20];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:707:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:708:         SibPID = amr->patch[0][lv][PID]->sibling[14];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:709:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:712:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:713:         SibPID = amr->patch[0][lv][PID]->sibling[ 8];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:714:         SibPID = amr->patch[0][lv][PID]->sibling[11];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:715:         SibPID = amr->patch[0][lv][PID]->sibling[20];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:716:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:717:         SibPID = amr->patch[0][lv][PID]->sibling[14];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:718:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:724:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:725:         SibPID = amr->patch[0][lv][PID]->sibling[15];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:726:         SibPID = amr->patch[0][lv][PID]->sibling[12];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:727:         SibPID = amr->patch[0][lv][PID]->sibling[22];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:728:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:729:         SibPID = amr->patch[0][lv][PID]->sibling[ 6];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:730:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:733:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:734:         SibPID = amr->patch[0][lv][PID]->sibling[15];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:735:         SibPID = amr->patch[0][lv][PID]->sibling[12];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:736:         SibPID = amr->patch[0][lv][PID]->sibling[22];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:737:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:738:         SibPID = amr->patch[0][lv][PID]->sibling[ 6];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:739:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:745:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:746:         SibPID = amr->patch[0][lv][PID]->sibling[21];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:747:         SibPID = amr->patch[0][lv][PID]->sibling[ 9];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:748:         SibPID = amr->patch[0][lv][PID]->sibling[16];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:749:         SibPID = amr->patch[0][lv][PID]->sibling[11];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:750:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:751:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:754:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:755:         SibPID = amr->patch[0][lv][PID]->sibling[21];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:756:         SibPID = amr->patch[0][lv][PID]->sibling[ 9];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:757:         SibPID = amr->patch[0][lv][PID]->sibling[16];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:758:         SibPID = amr->patch[0][lv][PID]->sibling[11];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:759:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:760:         SibPID = amr->patch[0][lv][PID]->sibling[ 4];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:766:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:767:         SibPID = amr->patch[0][lv][PID]->sibling[24];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:768:         SibPID = amr->patch[0][lv][PID]->sibling[ 8];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:769:         SibPID = amr->patch[0][lv][PID]->sibling[15];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:770:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:771:         SibPID = amr->patch[0][lv][PID]->sibling[13];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:772:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:775:         SibPID = amr->patch[0][lv][PID]->sibling[ 0];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:776:         SibPID = amr->patch[0][lv][PID]->sibling[24];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:777:         SibPID = amr->patch[0][lv][PID]->sibling[ 8];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:778:         SibPID = amr->patch[0][lv][PID]->sibling[15];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:779:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:780:         SibPID = amr->patch[0][lv][PID]->sibling[13];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:781:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:787:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:788:         SibPID = amr->patch[0][lv][PID]->sibling[23];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:789:         SibPID = amr->patch[0][lv][PID]->sibling[ 7];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:790:         SibPID = amr->patch[0][lv][PID]->sibling[17];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:791:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:792:         SibPID = amr->patch[0][lv][PID]->sibling[12];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:793:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:796:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:797:         SibPID = amr->patch[0][lv][PID]->sibling[23];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:798:         SibPID = amr->patch[0][lv][PID]->sibling[ 7];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:799:         SibPID = amr->patch[0][lv][PID]->sibling[17];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:800:         SibPID = amr->patch[0][lv][PID]->sibling[ 2];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:801:         SibPID = amr->patch[0][lv][PID]->sibling[12];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:802:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:808:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:809:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:810:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:811:         SibPID = amr->patch[0][lv][PID]->sibling[25];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:812:         SibPID = amr->patch[0][lv][PID]->sibling[ 9];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:813:         SibPID = amr->patch[0][lv][PID]->sibling[17];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:814:         SibPID = amr->patch[0][lv][PID]->sibling[13];   if ( SibPID >= 0 )   amr->patch[0][lv][SibPID]->flag = true;
Refine/Flag_Real.cpp:817:         SibPID = amr->patch[0][lv][PID]->sibling[ 1];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:818:         SibPID = amr->patch[0][lv][PID]->sibling[ 3];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:819:         SibPID = amr->patch[0][lv][PID]->sibling[ 5];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:820:         SibPID = amr->patch[0][lv][PID]->sibling[25];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:821:         SibPID = amr->patch[0][lv][PID]->sibling[ 9];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:822:         SibPID = amr->patch[0][lv][PID]->sibling[17];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Flag_Real.cpp:823:         SibPID = amr->patch[0][lv][PID]->sibling[13];   if ( SibPID == -1 )  Aux_Error( ERROR_INFO, "SibPID == -1 !!\n" );
Refine/Refine.cpp:49:   const int  Width       = PS1*amr->scale[lv+1];  // scale of a single patch      at level "lv+1"
Refine/Refine.cpp:50:   const int  CFluSg      = amr->FluSg[lv  ];      // sandglass of fluid variables at level "lv"
Refine/Refine.cpp:51:   const int  FFluSg      = amr->FluSg[lv+1];      // sandglass of fluid variables at level "lv+1"
Refine/Refine.cpp:53:   const int  CPotSg      = amr->PotSg[lv  ];      // sandglass of potential       at level "lv"
Refine/Refine.cpp:54:   const int  FPotSg      = amr->PotSg[lv+1];      // sandglass of potential       at level "lv+1"
Refine/Refine.cpp:58:   const int  CMagSg      = amr->MagSg[lv  ];      // sandglass of magnetic field  at level "lv"
Refine/Refine.cpp:59:   const int  FMagSg      = amr->MagSg[lv+1];      // sandglass of magnetic field  at level "lv+1"
Refine/Refine.cpp:120:   bool *JustRefined = new bool [ amr->num[lv] ];
Refine/Refine.cpp:121:   for (int PID=0; PID<amr->num[lv]; PID++)  JustRefined[PID] = false;
Refine/Refine.cpp:156:      const int NBufSon = amr->NPatchComma[lv+1][27] - amr->NPatchComma[lv+1][1];
Refine/Refine.cpp:157:      const int NBufFa  = amr->NPatchComma[lv  ][27] - amr->NPatchComma[lv  ][1];
Refine/Refine.cpp:172:            const int BufSonPID = amr->NPatchComma[lv+1][1] + n;
Refine/Refine.cpp:174:            BufGrandTable[n] = amr->patch[0][lv+1][BufSonPID]->son;
Refine/Refine.cpp:178:         const int BufFaID = amr->patch[0][lv+1][ amr->NPatchComma[lv+1][1] + m ]->father
Refine/Refine.cpp:179:                             - amr->NPatchComma[lv][1];
Refine/Refine.cpp:190:   for (int PID=amr->NPatchComma[lv+1][1]; PID<amr->NPatchComma[lv+1][27]; PID++)
Refine/Refine.cpp:192:      amr->patch[0][lv+1][PID]->son = -1;
Refine/Refine.cpp:193:      amr->pdelete( lv+1, PID, OPT__REUSE_MEMORY );
Refine/Refine.cpp:197:   for (int PID=amr->NPatchComma[lv][1]; PID<amr->NPatchComma[lv][27]; PID++)
Refine/Refine.cpp:198:      amr->patch[0][lv][PID]->son = -1;
Refine/Refine.cpp:210:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Refine/Refine.cpp:212:      patch_t *Pedigree = amr->patch[0][lv][PID];  // fixed to Sg=0 for the patch relation
Refine/Refine.cpp:217:         Pedigree->son = amr->num[lv+1];
Refine/Refine.cpp:223:         amr->pnew( lv+1, Cr[0],       Cr[1],       Cr[2],       PID, true, true, true );
Refine/Refine.cpp:224:         amr->pnew( lv+1, Cr[0]+Width, Cr[1],       Cr[2],       PID, true, true, true );
Refine/Refine.cpp:225:         amr->pnew( lv+1, Cr[0],       Cr[1]+Width, Cr[2],       PID, true, true, true );
Refine/Refine.cpp:226:         amr->pnew( lv+1, Cr[0],       Cr[1],       Cr[2]+Width, PID, true, true, true );
Refine/Refine.cpp:227:         amr->pnew( lv+1, Cr[0]+Width, Cr[1]+Width, Cr[2],       PID, true, true, true );
Refine/Refine.cpp:228:         amr->pnew( lv+1, Cr[0],       Cr[1]+Width, Cr[2]+Width, PID, true, true, true );
Refine/Refine.cpp:229:         amr->pnew( lv+1, Cr[0]+Width, Cr[1],       Cr[2]+Width, PID, true, true, true );
Refine/Refine.cpp:230:         amr->pnew( lv+1, Cr[0]+Width, Cr[1]+Width, Cr[2]+Width, PID, true, true, true );
Refine/Refine.cpp:248:            Flu_CData[v][k_out][j_out][i_out] = amr->patch[CFluSg][lv][PID]->fluid[v][k][j][i];
Refine/Refine.cpp:259:            Pot_CData[k_out][j_out][i_out] = amr->patch[CPotSg][lv][PID]->pot[k][j][i];
Refine/Refine.cpp:273:            Mag_CData[MAGX][ idx_B_out ++ ] = amr->patch[CMagSg][lv][PID]->magnetic[MAGX][ idx_B_in ++ ];
Refine/Refine.cpp:281:            Mag_CData[MAGY][ idx_B_out ++ ] = amr->patch[CMagSg][lv][PID]->magnetic[MAGY][ idx_B_in ++ ];
Refine/Refine.cpp:289:            Mag_CData[MAGZ][ idx_B_out ++ ] = amr->patch[CMagSg][lv][PID]->magnetic[MAGZ][ idx_B_in ++ ];
Refine/Refine.cpp:299:         for (int d=0; d<3; d++)    xyz_flu[d] = Pedigree->EdgeL[d] + (0.5-CGhost_Flu)*amr->dh[lv];
Refine/Refine.cpp:322:                  Flu_CData[v][k_out][j_out][i_out] = amr->patch[CFluSg][lv][SibPID]->fluid[v][k_in][j_in][i_in];
Refine/Refine.cpp:372:                                                         FluVarIdxList, Time[lv], amr->dh[lv], xyz_flu, _TOTAL, lv );
Refine/Refine.cpp:411:                  Pot_CData[k_out][j_out][i_out] = amr->patch[CPotSg][lv][SibPID]->pot[k_in][j_in][i_in];
Refine/Refine.cpp:479:                     Mag_CData[MAGX][ idx_B_out ++ ] = amr->patch[CMagSg][lv][SibPID]->magnetic[MAGX][ idx_B_in ++ ];
Refine/Refine.cpp:493:                     Mag_CData[MAGY][ idx_B_out ++ ] = amr->patch[CMagSg][lv][SibPID]->magnetic[MAGY][ idx_B_in ++ ];
Refine/Refine.cpp:507:                     Mag_CData[MAGZ][ idx_B_out ++ ] = amr->patch[CMagSg][lv][SibPID]->magnetic[MAGZ][ idx_B_in ++ ];
Refine/Refine.cpp:541:                        xyz_mag        [d] = Pedigree->EdgeL[d] + 0.5*amr->dh[lv];
Refine/Refine.cpp:549:                        xyz_mag        [d] = Pedigree->EdgeL[d] + (0.5-CGhost_Mag)*amr->dh[lv];
Refine/Refine.cpp:579:                                                          &v, Time[lv], amr->dh[lv], xyz_mag, lv );
Refine/Refine.cpp:622:            const int SibSonPID0 = amr->patch[0][lv][SibPID]->son;
Refine/Refine.cpp:640:                  Mag_FInterface_Ptr[sib][idx_B_out] = amr->patch[FMagSg][lv+1][SibSonPID]->magnetic[dir][idx_B_in];
Refine/Refine.cpp:872:            const int SonPID = amr->num[lv+1] - 8 + LocalID;
Refine/Refine.cpp:884:               amr->patch[FFluSg][lv+1][SonPID]->fluid[v][k][j][i] = Flu_FData[v][k_in][j_in][i_in];
Refine/Refine.cpp:895:               amr->patch[FPotSg][lv+1][SonPID]->pot[k][j][i] = Pot_FData[k_in][j_in][i_in];
Refine/Refine.cpp:910:               amr->patch[FMagSg][lv+1][SonPID]->magnetic[v][ idx_B_out ++ ] = Mag_FData[v][ idx_B_in ++ ];
Refine/Refine.cpp:924:               Real      = amr->patch[FFluSg][lv+1][SonPID]->fluid[REAL][k][j][i];
Refine/Refine.cpp:925:               Imag      = amr->patch[FFluSg][lv+1][SonPID]->fluid[IMAG][k][j][i];
Refine/Refine.cpp:927:               Rho_Corr  = amr->patch[FFluSg][lv+1][SonPID]->fluid[DENS][k][j][i];
Refine/Refine.cpp:932:                  amr->patch[FFluSg][lv+1][SonPID]->fluid[DENS][k][j][i] = (real)0.0;
Refine/Refine.cpp:938:               amr->patch[FFluSg][lv+1][SonPID]->fluid[REAL][k][j][i] *= Rescale;
Refine/Refine.cpp:939:               amr->patch[FFluSg][lv+1][SonPID]->fluid[IMAG][k][j][i] *= Rescale;
Refine/Refine.cpp:950:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Refine/Refine.cpp:957:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Refine/Refine.cpp:959:      patch_t *Pedigree = amr->patch[0][lv][PID];  // fixed to Sg=0 for the patch relation
Refine/Refine.cpp:972:         const int OldPID0 = amr->num[lv+1] - 8;
Refine/Refine.cpp:974:         for (int SonPID=SonPID0; SonPID<SonPID0+8; SonPID++)     amr->pdelete( lv+1, SonPID, OPT__REUSE_MEMORY );
Refine/Refine.cpp:995:                  Aux_SwapPointer( (void**)&amr->patch[Sg][lv+1][OldPID], (void**)&amr->patch[Sg][lv+1][NewPID] );
Refine/Refine.cpp:998:               GrandPID0 = amr->patch[0][lv+1][NewPID]->son;
Refine/Refine.cpp:1002:                     amr->patch[0][lv+2][GrandPID]->father = NewPID;
Refine/Refine.cpp:1007:            FaPID = amr->patch[0][lv+1][NewPID0]->father;
Refine/Refine.cpp:1008:            amr->patch[0][lv][FaPID]->son = NewPID0;
Refine/Refine.cpp:1011:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
Refine/Refine.cpp:1021:// initialize the amr->NPatchComma list for the buffer patches
Refine/Refine.cpp:1022:   for (int m=1; m<28; m++)   amr->NPatchComma[lv+1][m] = amr->num[lv+1];
Refine/Refine.cpp:1049:   if ( amr->WithFlux )
Refine/Refine.cpp:1060:   if ( amr->WithElectric )
SelfGravity/CPU_Gravity/CPU_ExtAcc_PointMass.cpp:72:   AuxArray[0] = 0.5*amr->BoxSize[0];  // x coordinate of the external acceleration center
SelfGravity/CPU_Gravity/CPU_ExtAcc_PointMass.cpp:73:   AuxArray[1] = 0.5*amr->BoxSize[1];  // y ...
SelfGravity/CPU_Gravity/CPU_ExtAcc_PointMass.cpp:74:   AuxArray[2] = 0.5*amr->BoxSize[2];  // z ...
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:27:// Return      :  amr->patch->pot[]
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:54:   const double dh   = amr->dh[lv];
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:64:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:66:         x0 = amr->patch[0][lv][PID]->EdgeL[0] + dh_2;
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:67:         y0 = amr->patch[0][lv][PID]->EdgeL[1] + dh_2;
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:68:         z0 = amr->patch[0][lv][PID]->EdgeL[2] + dh_2;
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:76:            if ( PotIsInit )  amr->patch[SaveSg][lv][PID]->pot[k][j][i] += ExtPot;  // add
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:77:            else              amr->patch[SaveSg][lv][PID]->pot[k][j][i]  = ExtPot;  // overwrite
SelfGravity/CPU_Poisson/CPU_ExtPotSolver_BaseLevel.cpp:79:      } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
SelfGravity/CPU_Poisson/CPU_ExtPot_PointMass.cpp:65:   AuxArray_Flt[0] = 0.5*amr->BoxSize[0];    // x coordinate of the external potential center
SelfGravity/CPU_Poisson/CPU_ExtPot_PointMass.cpp:66:   AuxArray_Flt[1] = 0.5*amr->BoxSize[1];    // y ...
SelfGravity/CPU_Poisson/CPU_ExtPot_PointMass.cpp:67:   AuxArray_Flt[2] = 0.5*amr->BoxSize[2];    // z ...
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:61:// const int MemUnit    = amr->NPatchComma[0][1]*PS1/MPI_NRank;   // set arbitrarily
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:62:   const int MemUnit    = amr->NPatchComma[0][1]*PS1;             // set arbitrarily
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:64:   const int Scale0     = amr->scale[0];
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:106:   for (int PID0=0; PID0<amr->NPatchComma[0][1]; PID0+=8)
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:119:         const double dh = amr->dh[0];
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:123:            const double x0 = amr->patch[0][0][PID]->EdgeL[0] + 0.5*dh;
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:124:            const double y0 = amr->patch[0][0][PID]->EdgeL[1] + 0.5*dh;
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:125:            const double z0 = amr->patch[0][0][PID]->EdgeL[2] + 0.5*dh;
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:141:         for (int d=0; d<3; d++)    Cr[d] = amr->patch[0][0][PID]->corner[d] / Scale0;
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:191:   } // for (int PID0=0; PID0<amr->NPatchComma[0][1]; PID0+=8)
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:227:   const int NSend_Expect = amr->NPatchComma[0][1]*CUBE(PS1);
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:425:         memcpy( amr->patch[SaveSg][0][PID]->pot[k], RecvPtr, PSSize*sizeof(real) );
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:463:   const real dh       = amr->dh[0];
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:669:   real *SendBuf      = new real [ (long)amr->NPatchComma[0][1]*CUBE(PS1) ];     // MPI send buffer for density and potential
SelfGravity/CPU_Poisson/CPU_PoissonSolver_FFT.cpp:671:   long *SendBuf_SIdx = new long [ amr->NPatchComma[0][1]*PS1 ];                 // MPI send buffer for 1D coordinate in slab
SelfGravity/Gra_Prepare_Corner.cpp:26:   const double dh_half = 0.5*amr->dh[lv];
SelfGravity/Gra_Prepare_Corner.cpp:38:         for (int d=0; d<3; d++)    h_Corner_Array_PGT[N][d] = amr->patch[0][lv][PID]->EdgeL[d] + dh_half;
SelfGravity/Gra_Prepare_Flu.cpp:45:            h_Flu_Array_G[N][v][k][j][i] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v][k][j][i];
SelfGravity/Gra_Prepare_Flu.cpp:52:            h_DE_Array_G[N][k][j][i] = amr->patch[0][lv][PID]->de_status[k][j][i];
SelfGravity/Gra_Prepare_Flu.cpp:60:            h_Emag_Array_G[N][k][j][i] = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
SelfGravity/Gra_Prepare_Flu.cpp:70:            h_Flu_Array_G[N][v][k][j][i] = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[v+1][k][j][i];
SelfGravity/Init_GreenFuncK.cpp:57:   const double dh0   = amr->dh[0];
SelfGravity/Output_PreparedPatch_Poisson.cpp:68:      patch_t *Relation = amr->patch[0][TLv][TPID];
SelfGravity/Output_PreparedPatch_Poisson.cpp:97:         FaSib  = ( TLv ==  0 ) ? -1 : amr->patch[0][TLv-1][Relation->father]->sibling[S];
SelfGravity/Output_PreparedPatch_Poisson.cpp:98:         SibSon = ( Sib < 0 )   ? Sib : amr->patch[0][TLv][Sib]->son;
SelfGravity/Poi_Close.cpp:44:            amr->patch[SaveSg][lv][PID]->pot[k][j][i] = h_Pot_Array_P_Out[N][kk][jj][ii];
SelfGravity/Poi_Close.cpp:49:         memcpy( amr->patch[SaveSg][lv][PID]->pot_ext, h_Pot_Array_P_Out[N], CUBE(GRA_NXT)*sizeof(real) );
SelfGravity/Poi_GetAverageDensity.cpp:58:   const int PScale = PATCH_SIZE * amr->scale[0];
SelfGravity/Poi_GetAverageDensity.cpp:68:   double *Rho_Local     = new double [ amr->NPatchComma[0][1] ];
SelfGravity/Poi_GetAverageDensity.cpp:69:   long   *Cr1D_Local    = new long   [ amr->NPatchComma[0][1] ];
SelfGravity/Poi_GetAverageDensity.cpp:71:   MPI_Gather( &amr->NPatchComma[0][1], 1, MPI_INT, NPatch_All, 1, MPI_INT, 0, MPI_COMM_WORLD );
SelfGravity/Poi_GetAverageDensity.cpp:86:   for (int PID=0; PID<amr->NPatchComma[0][1]; PID++)
SelfGravity/Poi_GetAverageDensity.cpp:88:      for (int d=0; d<3; d++)    Cr3D[d] = amr->patch[0][0][PID]->corner[d]/PScale;
SelfGravity/Poi_GetAverageDensity.cpp:96:         Rho_Local[PID] += (double)amr->patch[ amr->FluSg[0] ][0][PID]->fluid[DENS][k][j][i];
SelfGravity/Poi_GetAverageDensity.cpp:101:         const double dh = amr->dh[0];
SelfGravity/Poi_GetAverageDensity.cpp:102:         const double x0 = amr->patch[0][0][PID]->EdgeL[0] + 0.5*dh;
SelfGravity/Poi_GetAverageDensity.cpp:103:         const double y0 = amr->patch[0][0][PID]->EdgeL[1] + 0.5*dh;
SelfGravity/Poi_GetAverageDensity.cpp:104:         const double z0 = amr->patch[0][0][PID]->EdgeL[2] + 0.5*dh;
SelfGravity/Poi_GetAverageDensity.cpp:114:   } // for (int PID=0; PID<amr->NPatchComma[0][1]; PID++)
SelfGravity/Poi_GetAverageDensity.cpp:117:   MPI_Gatherv( Cr1D_Local, amr->NPatchComma[0][1], MPI_LONG,   Cr1D_All, NPatch_All, Disp, MPI_LONG,
SelfGravity/Poi_GetAverageDensity.cpp:120:   MPI_Gatherv( Rho_Local,  amr->NPatchComma[0][1], MPI_DOUBLE, Rho_All,  NPatch_All, Disp, MPI_DOUBLE,
SelfGravity/Poi_GetAverageDensity.cpp:141:   MPI_Gather( &amr->Par->NPar_AcPlusInac, 1, MPI_LONG, NPar_AcPlusInac_AllRank, 1, MPI_LONG, 0, MPI_COMM_WORLD );
SelfGravity/Poi_GetAverageDensity.cpp:159:   MPI_Gatherv( amr->Par->Mass, amr->Par->NPar_AcPlusInac, MPI_DOUBLE,
SelfGravity/Poi_GetAverageDensity.cpp:162:   MPI_Gatherv( amr->Par->Mass, amr->Par->NPar_AcPlusInac, MPI_FLOAT,
SelfGravity/Poi_GetAverageDensity.cpp:179:      AveDensity_Init += ParMassSum / ( amr->BoxSize[0]*amr->BoxSize[1]*amr->BoxSize[2] );
SelfGravity/Poi_GetAverageDensity.cpp:207:   for (int PID=0; PID<amr->NPatchComma[0][1]; PID++)
SelfGravity/Poi_GetAverageDensity.cpp:212:         AveDensity_Init_local += amr->patch[ amr->FluSg[0] ][0][PID]->fluid[DENS][k][j][i];
SelfGravity/Poi_GetAverageDensity.cpp:217:         const double dh = amr->dh[0];
SelfGravity/Poi_GetAverageDensity.cpp:218:         const double x0 = amr->patch[0][0][PID]->EdgeL[0] + 0.5*dh;
SelfGravity/Poi_GetAverageDensity.cpp:219:         const double y0 = amr->patch[0][0][PID]->EdgeL[1] + 0.5*dh;
SelfGravity/Poi_GetAverageDensity.cpp:220:         const double z0 = amr->patch[0][0][PID]->EdgeL[2] + 0.5*dh;
SelfGravity/Poi_GetAverageDensity.cpp:230:   } // for (int PID=0; PID<amr->NPatchComma[0][1]; PID++)
SelfGravity/Poi_GetAverageDensity.cpp:242:   for (long p=0; p<amr->Par->NPar_AcPlusInac; p++)
SelfGravity/Poi_GetAverageDensity.cpp:245:      if ( amr->Par->Mass[p] > (real)0.0 )   ParMassSum_local += (double)amr->Par->Mass[p];
SelfGravity/Poi_GetAverageDensity.cpp:251:   AveDensity_Init += ParMassSum_total / ( amr->BoxSize[0]*amr->BoxSize[1]*amr->BoxSize[2] );
SelfGravity/Poi_Prepare_Pot.cpp:55:   const double dh       = amr->dh[FaLv];
SelfGravity/Poi_Prepare_Pot.cpp:65:   if      (  Mis_CompareRealValue( PrepTime, amr->PotSgTime[FaLv][   amr->PotSg[FaLv] ], NULL, false )  )
SelfGravity/Poi_Prepare_Pot.cpp:68:      PotSg             = amr->PotSg[FaLv];
SelfGravity/Poi_Prepare_Pot.cpp:74:   else if (  Mis_CompareRealValue( PrepTime, amr->PotSgTime[FaLv][ 1-amr->PotSg[FaLv] ], NULL, false )  )
SelfGravity/Poi_Prepare_Pot.cpp:77:      PotSg             = 1 - amr->PotSg[FaLv];
SelfGravity/Poi_Prepare_Pot.cpp:88:                 FaLv, PrepTime, amr->PotSgTime[FaLv][0], amr->PotSgTime[FaLv][1] );
SelfGravity/Poi_Prepare_Pot.cpp:91:      const double TimeMin = MIN( amr->PotSgTime[FaLv][0], amr->PotSgTime[FaLv][1] );
SelfGravity/Poi_Prepare_Pot.cpp:92:      const double TimeMax = MAX( amr->PotSgTime[FaLv][0], amr->PotSgTime[FaLv][1] );
SelfGravity/Poi_Prepare_Pot.cpp:106:         PotWeighting      =   ( +amr->PotSgTime[FaLv][PotSg_IntT] - PrepTime )
SelfGravity/Poi_Prepare_Pot.cpp:107:                             / (  amr->PotSgTime[FaLv][PotSg_IntT] - amr->PotSgTime[FaLv][PotSg] );
SelfGravity/Poi_Prepare_Pot.cpp:108:         PotWeighting_IntT =   ( -amr->PotSgTime[FaLv][PotSg     ] + PrepTime )
SelfGravity/Poi_Prepare_Pot.cpp:109:                             / (  amr->PotSgTime[FaLv][PotSg_IntT] - amr->PotSgTime[FaLv][PotSg] );
SelfGravity/Poi_Prepare_Pot.cpp:115:         PotSg             = amr->PotSg[FaLv]; // set to the current Sg
SelfGravity/Poi_Prepare_Pot.cpp:154:         FaPID = amr->patch[0][lv][PID0]->father;
SelfGravity/Poi_Prepare_Pot.cpp:162:         x0 = amr->patch[0][FaLv][FaPID]->EdgeL[0] + dh_2;
SelfGravity/Poi_Prepare_Pot.cpp:163:         y0 = amr->patch[0][FaLv][FaPID]->EdgeL[1] + dh_2;
SelfGravity/Poi_Prepare_Pot.cpp:164:         z0 = amr->patch[0][FaLv][FaPID]->EdgeL[2] + dh_2;
SelfGravity/Poi_Prepare_Pot.cpp:170:            CPot[ko][jo][io] = amr->patch[PotSg][FaLv][FaPID]->pot[ki][ji][ii];
SelfGravity/Poi_Prepare_Pot.cpp:174:               CPot[ko][jo][io] -= CPUExtPot_Ptr( x, y, z, amr->PotSgTime[FaLv][PotSg], ExtPot_AuxArray_Flt, ExtPot_AuxArray_Int,
SelfGravity/Poi_Prepare_Pot.cpp:180:               CPot_IntT = amr->patch[PotSg_IntT][FaLv][FaPID]->pot[ki][ji][ii];
SelfGravity/Poi_Prepare_Pot.cpp:184:                  CPot_IntT -= CPUExtPot_Ptr( x, y, z, amr->PotSgTime[FaLv][PotSg_IntT], ExtPot_AuxArray_Flt, ExtPot_AuxArray_Int,
SelfGravity/Poi_Prepare_Pot.cpp:197:            FaSibPID = amr->patch[0][FaLv][FaPID]->sibling[sib];
SelfGravity/Poi_Prepare_Pot.cpp:209:               x0 = amr->patch[0][FaLv][FaSibPID]->EdgeL[0] + dh_2;
SelfGravity/Poi_Prepare_Pot.cpp:210:               y0 = amr->patch[0][FaLv][FaSibPID]->EdgeL[1] + dh_2;
SelfGravity/Poi_Prepare_Pot.cpp:211:               z0 = amr->patch[0][FaLv][FaSibPID]->EdgeL[2] + dh_2;
SelfGravity/Poi_Prepare_Pot.cpp:219:                  CPot[ko][jo][io] = amr->patch[PotSg][FaLv][FaSibPID]->pot[ki][ji][ii];
SelfGravity/Poi_Prepare_Pot.cpp:223:                     CPot[ko][jo][io] -= CPUExtPot_Ptr( x, y, z, amr->PotSgTime[FaLv][PotSg], ExtPot_AuxArray_Flt, ExtPot_AuxArray_Int,
SelfGravity/Poi_Prepare_Pot.cpp:229:                     CPot_IntT = amr->patch[PotSg_IntT][FaLv][FaSibPID]->pot[ki][ji][ii];
SelfGravity/Poi_Prepare_Pot.cpp:233:                        CPot_IntT -= CPUExtPot_Ptr( x, y, z, amr->PotSgTime[FaLv][PotSg_IntT], ExtPot_AuxArray_Flt, ExtPot_AuxArray_Int,
SelfGravity/Init_LoadExtPotTable.cpp:54:   const double ExtraWidth = 0.5*GRA_GHOST_SIZE*amr->dh[0]; // use GRA_GHOST_SIZE instead of GRA_GHOST_SIZE-0.5 for extra safety
SelfGravity/Init_LoadExtPotTable.cpp:60:      if ( EXT_POT_TABLE_EDGEL[d] > amr->BoxEdgeL[d]-ExtraWidth )
SelfGravity/Init_LoadExtPotTable.cpp:62:                    EXT_POT_TABLE_EDGEL[d], amr->BoxEdgeL[d]-ExtraWidth );
SelfGravity/Init_LoadExtPotTable.cpp:64:      if ( EXT_POT_TABLE_EDGEL[d]+(EXT_POT_TABLE_NPOINT[d]-1)*EXT_POT_TABLE_DH[d] < amr->BoxEdgeR[d]+ExtraWidth )
SelfGravity/Init_LoadExtPotTable.cpp:66:                    EXT_POT_TABLE_EDGEL[d]+(EXT_POT_TABLE_NPOINT[d]-1)*EXT_POT_TABLE_DH[d], amr->BoxEdgeR[d]+ExtraWidth );
SelfGravity/Gra_AdvanceDt.cpp:86:   const bool PredictPos        = amr->Par->PredictPos;
SelfGravity/Gra_AdvanceDt.cpp:130:         amr->PotSg    [lv]             = SaveSg_Pot;
SelfGravity/Gra_AdvanceDt.cpp:131:         amr->PotSgTime[lv][SaveSg_Pot] = TimeNew;
SelfGravity/Gra_AdvanceDt.cpp:155:         amr->FluSg[0] = SaveSg_Flu;
SelfGravity/Gra_Close.cpp:49:            amr->patch[SaveSg][lv][PID]->fluid[v][k][j][i] = h_Flu_Array_G[N][v][k][j][i];
SelfGravity/Gra_Close.cpp:58:            amr->patch[0][lv][PID]->de_status[k][j][i] = h_DE_Array_G[N][k][j][i];
SelfGravity/Gra_Close.cpp:73:               amr->patch[SaveSg][lv][PID]->fluid[DUAL][k][j][i]
SelfGravity/Gra_Close.cpp:74:                  = Hydro_Con2Dual( amr->patch[SaveSg][lv][PID]->fluid[DENS][k][j][i],
SelfGravity/Gra_Close.cpp:75:                                    amr->patch[SaveSg][lv][PID]->fluid[MOMX][k][j][i],
SelfGravity/Gra_Close.cpp:76:                                    amr->patch[SaveSg][lv][PID]->fluid[MOMY][k][j][i],
SelfGravity/Gra_Close.cpp:77:                                    amr->patch[SaveSg][lv][PID]->fluid[MOMZ][k][j][i],
SelfGravity/Gra_Close.cpp:78:                                    amr->patch[SaveSg][lv][PID]->fluid[ENGY][k][j][i],
SelfGravity/Gra_Close.cpp:92:            amr->patch[SaveSg][lv][PID]->fluid[v+1][k][j][i] = h_Flu_Array_G[N][v][k][j][i];
SelfGravity/Poi_Prepare_Rho.cpp:49:      const double dh          = amr->dh[lv];
SelfGravity/Poi_Prepare_Rho.cpp:50:      const double L[3]        = { amr->BoxSize[0], amr->BoxSize[1], amr->BoxSize[2] };
SelfGravity/Poi_Prepare_Rho.cpp:63:            const double x0  = amr->patch[0][lv][PID]->EdgeL[0] + (0.5-RHO_GHOST_SIZE)*dh;
SelfGravity/Poi_Prepare_Rho.cpp:64:            const double y0  = amr->patch[0][lv][PID]->EdgeL[1] + (0.5-RHO_GHOST_SIZE)*dh;
SelfGravity/Poi_Prepare_Rho.cpp:65:            const double z0  = amr->patch[0][lv][PID]->EdgeL[2] + (0.5-RHO_GHOST_SIZE)*dh;
SelfGravity/Poi_StorePotWithGhostZone.cpp:41:   const double PrepPotTime       = amr->PotSgTime[lv][PotSg];
SelfGravity/Poi_StorePotWithGhostZone.cpp:53:      for (int PID0=0; PID0<amr->NPatchComma[lv][1]; PID0+=8)
SelfGravity/Poi_StorePotWithGhostZone.cpp:55:         if ( AllPatch  ||  amr->patch[PotSg][lv][PID0]->pot_ext[0][0][0] == POT_EXT_NEED_INIT )
SelfGravity/Poi_StorePotWithGhostZone.cpp:62:               memcpy( amr->patch[PotSg][lv][PID]->pot_ext, Pot+P*PotSizeCube, PotSizeCube*sizeof(real) );
SourceTerms/Deleptonization/CPU_Src_Deleptonization.cpp:174:   const double      Center[3]      = { amr->BoxCenter[0], amr->BoxCenter[1], amr->BoxCenter[2] };
SourceTerms/Deleptonization/CPU_Src_Deleptonization.cpp:175:   const double      MaxRadius      = 0.5*amr->BoxSize[0];
SourceTerms/Deleptonization/CPU_Src_Deleptonization.cpp:176:   const double      MinBinSize     = amr->dh[MAX_LEVEL];
SourceTerms/Src_Close.cpp:37:         memcpy( amr->patch[SaveSg_Flu][lv][PID]->fluid[0][0][0], h_Flu_Array_S_Out[N][0],
SourceTerms/Src_Init.cpp:47:   for (int d=0; d<3; d++)    SrcTerms.BoxCenter[d] = amr->BoxCenter[d];
SourceTerms/Src_Prepare.cpp:41:   if ( PrepTime != amr->FluSgTime[lv][ amr->FluSg[lv] ] )
SourceTerms/Src_Prepare.cpp:43:                 PrepTime, amr->FluSgTime[lv][ amr->FluSg[lv] ] );
SourceTerms/Src_Prepare.cpp:46:   if ( PrepTime != amr->MagSgTime[lv][ amr->MagSg[lv] ] )
SourceTerms/Src_Prepare.cpp:48:                 PrepTime, amr->MagSgTime[lv][ amr->MagSg[lv] ] );
SourceTerms/Src_Prepare.cpp:53:   const double dh_half = 0.5*amr->dh[lv];
SourceTerms/Src_Prepare.cpp:68:         memcpy( h_Flu_Array_S_In[N][0], amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid[0][0][0],
SourceTerms/Src_Prepare.cpp:73:         memcpy( h_Mag_Array_S_In[N][0], amr->patch[ amr->MagSg[lv] ][lv][PID]->magnetic[0],
SourceTerms/Src_Prepare.cpp:79:         for (int d=0; d<3; d++)    h_Corner_Array_S[N][d] = amr->patch[0][lv][PID]->EdgeL[d] + dh_half;
StarFormation/SF_CreateStar_AGORA.cpp:68:   const double dh             = amr->dh[lv];
StarFormation/SF_CreateStar_AGORA.cpp:70:   const int    FluSg          = amr->FluSg[lv];
StarFormation/SF_CreateStar_AGORA.cpp:71:   const int    PotSg          = amr->PotSg[lv];
StarFormation/SF_CreateStar_AGORA.cpp:109:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
StarFormation/SF_CreateStar_AGORA.cpp:112:      if ( amr->patch[0][lv][PID]->son != -1 )  continue;
StarFormation/SF_CreateStar_AGORA.cpp:122:         const long RSeed = SF_CREATE_STAR_RSEED + amr->patch[0][lv][PID]->LB_Idx + long(TimeNew*UNIT_T/Const_yr*1.0e6);
StarFormation/SF_CreateStar_AGORA.cpp:127:      fluid   = amr->patch[FluSg][lv][PID]->fluid;
StarFormation/SF_CreateStar_AGORA.cpp:129:      pot_ext = amr->patch[PotSg][lv][PID]->pot_ext;
StarFormation/SF_CreateStar_AGORA.cpp:131:      x0      = amr->patch[0][lv][PID]->EdgeL[0] + 0.5*dh;
StarFormation/SF_CreateStar_AGORA.cpp:132:      y0      = amr->patch[0][lv][PID]->EdgeL[1] + 0.5*dh;
StarFormation/SF_CreateStar_AGORA.cpp:133:      z0      = amr->patch[0][lv][PID]->EdgeL[2] + 0.5*dh;
StarFormation/SF_CreateStar_AGORA.cpp:264://    use OpenMP critical construct since both amr->Par->AddOneParticle() and amr->patch[0][lv][PID]->AddParticle()
StarFormation/SF_CreateStar_AGORA.cpp:266://    --> note that the order of which thread calls amr->Par->AddOneParticle() is nondeterministic and may change from run to run
StarFormation/SF_CreateStar_AGORA.cpp:274:            NewParID[p] = amr->Par->AddOneParticle( NewParAtt[p] );
StarFormation/SF_CreateStar_AGORA.cpp:278:         const real *PType = amr->Par->Type;
StarFormation/SF_CreateStar_AGORA.cpp:280://       do not set ParPos too early since pointers to the particle repository (e.g., amr->Par->PosX)
StarFormation/SF_CreateStar_AGORA.cpp:281://       may change after calling amr->Par->AddOneParticle()
StarFormation/SF_CreateStar_AGORA.cpp:282:         const real *ParPos[3] = { amr->Par->PosX, amr->Par->PosY, amr->Par->PosZ };
StarFormation/SF_CreateStar_AGORA.cpp:286:         amr->patch[0][lv][PID]->AddParticle( NNewPar, NewParID, &amr->Par->NPar_Lv[lv],
StarFormation/SF_CreateStar_AGORA.cpp:287:                                              PType, ParPos, amr->Par->NPar_AcPlusInac, Comment );
StarFormation/SF_CreateStar_AGORA.cpp:289:         amr->patch[0][lv][PID]->AddParticle( NNewPar, NewParID, &amr->Par->NPar_Lv[lv], PType );
StarFormation/SF_CreateStar_AGORA.cpp:293:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
StarFormation/SF_CreateStar_AGORA.cpp:303:   MPI_Allreduce( &amr->Par->NPar_Active, &amr->Par->NPar_Active_AllRank, 1, MPI_LONG, MPI_SUM, MPI_COMM_WORLD );
Tables/Table_SiblingPatch.cpp:139:   SibPID_Based[ 0] = amr->patch[0][lv][PID0  ]->sibling[ 0];
Tables/Table_SiblingPatch.cpp:140:   SibPID_Based[ 1] = amr->patch[0][lv][PID0+1]->sibling[ 1];
Tables/Table_SiblingPatch.cpp:141:   SibPID_Based[ 2] = amr->patch[0][lv][PID0  ]->sibling[ 2];
Tables/Table_SiblingPatch.cpp:142:   SibPID_Based[ 3] = amr->patch[0][lv][PID0+2]->sibling[ 3];
Tables/Table_SiblingPatch.cpp:143:   SibPID_Based[ 4] = amr->patch[0][lv][PID0  ]->sibling[ 4];
Tables/Table_SiblingPatch.cpp:144:   SibPID_Based[ 5] = amr->patch[0][lv][PID0+3]->sibling[ 5];
Tables/Table_SiblingPatch.cpp:145:   SibPID_Based[ 6] = amr->patch[0][lv][PID0  ]->sibling[ 6];
Tables/Table_SiblingPatch.cpp:146:   SibPID_Based[ 7] = amr->patch[0][lv][PID0+1]->sibling[ 7];
Tables/Table_SiblingPatch.cpp:147:   SibPID_Based[ 8] = amr->patch[0][lv][PID0+2]->sibling[ 8];
Tables/Table_SiblingPatch.cpp:148:   SibPID_Based[ 9] = amr->patch[0][lv][PID0+4]->sibling[ 9];
Tables/Table_SiblingPatch.cpp:149:   SibPID_Based[10] = amr->patch[0][lv][PID0  ]->sibling[10];
Tables/Table_SiblingPatch.cpp:150:   SibPID_Based[11] = amr->patch[0][lv][PID0+2]->sibling[11];
Tables/Table_SiblingPatch.cpp:151:   SibPID_Based[12] = amr->patch[0][lv][PID0+3]->sibling[12];
Tables/Table_SiblingPatch.cpp:152:   SibPID_Based[13] = amr->patch[0][lv][PID0+5]->sibling[13];
Tables/Table_SiblingPatch.cpp:153:   SibPID_Based[14] = amr->patch[0][lv][PID0  ]->sibling[14];
Tables/Table_SiblingPatch.cpp:154:   SibPID_Based[15] = amr->patch[0][lv][PID0+3]->sibling[15];
Tables/Table_SiblingPatch.cpp:155:   SibPID_Based[16] = amr->patch[0][lv][PID0+1]->sibling[16];
Tables/Table_SiblingPatch.cpp:156:   SibPID_Based[17] = amr->patch[0][lv][PID0+6]->sibling[17];
Tables/Table_SiblingPatch.cpp:157:   SibPID_Based[18] = amr->patch[0][lv][PID0  ]->sibling[18];
Tables/Table_SiblingPatch.cpp:158:   SibPID_Based[19] = amr->patch[0][lv][PID0+1]->sibling[19];
Tables/Table_SiblingPatch.cpp:159:   SibPID_Based[20] = amr->patch[0][lv][PID0+2]->sibling[20];
Tables/Table_SiblingPatch.cpp:160:   SibPID_Based[21] = amr->patch[0][lv][PID0+4]->sibling[21];
Tables/Table_SiblingPatch.cpp:161:   SibPID_Based[22] = amr->patch[0][lv][PID0+3]->sibling[22];
Tables/Table_SiblingPatch.cpp:162:   SibPID_Based[23] = amr->patch[0][lv][PID0+6]->sibling[23];
Tables/Table_SiblingPatch.cpp:163:   SibPID_Based[24] = amr->patch[0][lv][PID0+5]->sibling[24];
Tables/Table_SiblingPatch.cpp:164:   SibPID_Based[25] = amr->patch[0][lv][PID0+7]->sibling[25];
TestProblem/ELBDM/ExtPot/Init_TestProb_ELBDM_ExtPot.cpp:114:      if ( ExtPot_Cen[d] < 0.0 )    ExtPot_Cen[d] = 0.5*amr->BoxSize[d];
TestProblem/Hydro/AGORA_IsolatedGalaxy/Flag_AGORA.cpp:14:// Parameter   :  i,j,k       : Indices of the target element in the patch ptr[ amr->FluSg[lv] ][lv][PID]
TestProblem/Hydro/AGORA_IsolatedGalaxy/Flag_AGORA.cpp:25:   const double dh     = amr->dh[lv];                                                  // grid size
TestProblem/Hydro/AGORA_IsolatedGalaxy/Flag_AGORA.cpp:26:   const double Pos[3] = { amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh,              // x,y,z position
TestProblem/Hydro/AGORA_IsolatedGalaxy/Flag_AGORA.cpp:27:                           amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh,
TestProblem/Hydro/AGORA_IsolatedGalaxy/Flag_AGORA.cpp:28:                           amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh  };
TestProblem/Hydro/AGORA_IsolatedGalaxy/Flag_AGORA.cpp:32:   const double EdgeR = amr->BoxSize[0]-Threshold[0];    // here we have assumed a cubic box
TestProblem/Hydro/AGORA_IsolatedGalaxy/Init_TestProb_Hydro_AGORA_IsolatedGalaxy.cpp:94:   if ( OPT__INIT == INIT_BY_FUNCTION  &&  amr->Par->Init != PAR_INIT_BY_FUNCTION )
TestProblem/Hydro/AGORA_IsolatedGalaxy/Init_TestProb_Hydro_AGORA_IsolatedGalaxy.cpp:131:      if ( amr->BoxSize[0] != amr->BoxSize[1]  ||  amr->BoxSize[0] != amr->BoxSize[2] )
TestProblem/Hydro/AGORA_IsolatedGalaxy/Init_TestProb_Hydro_AGORA_IsolatedGalaxy.cpp:316:   const double dx               = x - 0.5*amr->BoxSize[0];
TestProblem/Hydro/AGORA_IsolatedGalaxy/Init_TestProb_Hydro_AGORA_IsolatedGalaxy.cpp:317:   const double dy               = y - 0.5*amr->BoxSize[1];
TestProblem/Hydro/AGORA_IsolatedGalaxy/Init_TestProb_Hydro_AGORA_IsolatedGalaxy.cpp:318:   const double dz               = z - 0.5*amr->BoxSize[2];
TestProblem/Hydro/AGORA_IsolatedGalaxy/Init_TestProb_Hydro_AGORA_IsolatedGalaxy.cpp:328:   DiskGasDens = GaussianQuadratureIntegrate( dx, dy, dz, amr->dh[lv] );
TestProblem/Hydro/AGORA_IsolatedGalaxy/Par_Init_ByFunction_AGORA.cpp:25://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/AGORA_IsolatedGalaxy/Par_Init_ByFunction_AGORA.cpp:213:   const double BoxCenter[3] = { 0.5*amr->BoxSize[0], 0.5*amr->BoxSize[1], 0.5*amr->BoxSize[2] };
TestProblem/Hydro/AcousticWave/Init_TestProb_Hydro_AcousticWave.cpp:65:   if ( Acoustic_Dir == 3  &&  ( amr->BoxSize[0] != amr->BoxSize[1] || amr->BoxSize[0] != amr->BoxSize[2] )  )
TestProblem/Hydro/AcousticWave/Init_TestProb_Hydro_AcousticWave.cpp:131:   Acoustic_WaveLength = ( Acoustic_Dir == 3 ) ? amr->BoxSize[0]/sqrt(3.0) : amr->BoxSize[Acoustic_Dir];
TestProblem/Hydro/BlastWave/Init_TestProb_Hydro_BlastWave.cpp:99:   ReadPara->Add( "Blast_Center_X",    &Blast_Center[0],       -1.0,          NoMin_double,     amr->BoxSize[0]   );
TestProblem/Hydro/BlastWave/Init_TestProb_Hydro_BlastWave.cpp:100:   ReadPara->Add( "Blast_Center_Y",    &Blast_Center[1],       -1.0,          NoMin_double,     amr->BoxSize[1]   );
TestProblem/Hydro/BlastWave/Init_TestProb_Hydro_BlastWave.cpp:101:   ReadPara->Add( "Blast_Center_Z",    &Blast_Center[2],       -1.0,          NoMin_double,     amr->BoxSize[2]   );
TestProblem/Hydro/BlastWave/Init_TestProb_Hydro_BlastWave.cpp:112:      if ( Blast_Center[d] < 0.0 )  Blast_Center[d] = 0.5*amr->BoxSize[d];
TestProblem/Hydro/Caustic/Init_TestProb_Hydro_Caustic.cpp:122:   if (  Caustic_Dir == 1  &&  ( amr->BoxSize[0] != amr->BoxSize[1] || amr->BoxSize[0] != amr->BoxSize[2] )  )
TestProblem/Hydro/Caustic/Init_TestProb_Hydro_Caustic.cpp:175:      const double WaveK = 2.0*M_PI/amr->BoxSize[0];
TestProblem/Hydro/Caustic/Init_TestProb_Hydro_Caustic.cpp:185:      const double WaveK = 2.0*M_PI/amr->BoxSize[0]*sqrt(3.0);
TestProblem/Hydro/ClusterMerger/Init_TestProb_ClusterMerger.cpp:126:   if ( OPT__INIT == INIT_BY_FUNCTION  &&  amr->Par->Init != PAR_INIT_BY_FUNCTION )
TestProblem/Hydro/ClusterMerger/Init_TestProb_ClusterMerger.cpp:386:      amr->Par->NPar_Active_AllRank = NPar_AllCluster;
TestProblem/Hydro/ClusterMerger/Init_TestProb_ClusterMerger.cpp:387:      PRINT_WARNING( "PAR_NPAR", amr->Par->NPar_Active_AllRank, FORMAT_LONG );
TestProblem/Hydro/ClusterMerger/Init_TestProb_ClusterMerger.cpp:483:   const double ClusterCenter1[3] = { Merger_Coll_PosX1, Merger_Coll_PosY1, amr->BoxCenter[2] };
TestProblem/Hydro/ClusterMerger/Init_TestProb_ClusterMerger.cpp:484:   const double ClusterCenter2[3] = { Merger_Coll_PosX2, Merger_Coll_PosY2, amr->BoxCenter[2] };
TestProblem/Hydro/ClusterMerger/Init_TestProb_ClusterMerger.cpp:485:   const double ClusterCenter3[3] = { Merger_Coll_PosX3, Merger_Coll_PosY3, amr->BoxCenter[2] };
TestProblem/Hydro/ClusterMerger/Par_Init_ByFunction_ClusterMerger.cpp:51://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/ClusterMerger/Par_Init_ByFunction_ClusterMerger.cpp:241:      = { Merger_Coll_PosX1, Merger_Coll_PosY1, amr->BoxCenter[2] };
TestProblem/Hydro/ClusterMerger/Par_Init_ByFunction_ClusterMerger.cpp:243:      = { Merger_Coll_PosX2, Merger_Coll_PosY2, amr->BoxCenter[2] };
TestProblem/Hydro/ClusterMerger/Par_Init_ByFunction_ClusterMerger.cpp:245:      = { Merger_Coll_PosX3, Merger_Coll_PosY3, amr->BoxCenter[2] };
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:194:   const double r = sqrt( SQR(x-amr->BoxCenter[0]) + SQR(y-amr->BoxCenter[1]) + SQR(z-amr->BoxCenter[2]) );
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:256:      dh = amr->dh[lv];
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:258:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:260:         x0 = amr->patch[0][lv][PID]->EdgeL[0] + 0.5*dh;
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:261:         y0 = amr->patch[0][lv][PID]->EdgeL[1] + 0.5*dh;
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:262:         z0 = amr->patch[0][lv][PID]->EdgeL[2] + 0.5*dh;
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:268:            fluid = amr->patch[ amr->FluSg[lv] ][lv][PID]->fluid;
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:269:            nume  = amr->patch[ amr->PotSg[lv] ][lv][PID]->pot[k][j][i];
TestProblem/Hydro/Gravity/Init_TestProb_Hydro_Gravity.cpp:270:            r     = sqrt( SQR(x-amr->BoxCenter[0]) + SQR(y-amr->BoxCenter[1]) + SQR(z-amr->BoxCenter[2]) );
TestProblem/Hydro/JeansInstability/Init_TestProb_Hydro_JeansInstability.cpp:63:   if ( Jeans_Dir == 3  &&  ( amr->BoxSize[0] != amr->BoxSize[1] || amr->BoxSize[0] != amr->BoxSize[2] )  )
TestProblem/Hydro/JeansInstability/Init_TestProb_Hydro_JeansInstability.cpp:142:   Jeans_WaveLength = ( Jeans_Dir == 3 ) ? amr->BoxSize[0]/sqrt(3.0) : amr->BoxSize[Jeans_Dir];
TestProblem/Hydro/KelvinHelmholtzInstability/Flag_KelvinHelmholtzInstability.cpp:15:// Parameter   :  i,j,k     : Indices of the target element in the patch ptr[ amr->FluSg[lv] ][lv][PID]
TestProblem/Hydro/KelvinHelmholtzInstability/Flag_KelvinHelmholtzInstability.cpp:27:   const double dh          = amr->dh[lv];
TestProblem/Hydro/KelvinHelmholtzInstability/Flag_KelvinHelmholtzInstability.cpp:28:   const double dz_periodic = amr->BoxSize[2] / KH_PeriodicZFactor;
TestProblem/Hydro/KelvinHelmholtzInstability/Flag_KelvinHelmholtzInstability.cpp:30:   const double z           = amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh;
TestProblem/Hydro/KelvinHelmholtzInstability/Init_TestProb_Hydro_KelvinHelmholtzInstability.cpp:211:   const double dz_periodic = amr->BoxSize[2] / KH_PeriodicZFactor;
TestProblem/Hydro/MHD_ABC/Init_TestProb_Hydro_MHD_ABC.cpp:53:   if ( amr->BoxSize[0] != amr->BoxSize[1]  ||  amr->BoxSize[0] != amr->BoxSize[2] )
TestProblem/Hydro/MHD_ABC/Init_TestProb_Hydro_MHD_ABC.cpp:228:   const double k = 2.0*M_PI/amr->BoxSize[0]*ABC_NPeriod;   // assuming cubic domain
TestProblem/Hydro/MHD_LinearWave/Init_TestProb_Hydro_MHD_LinearWave.cpp:66:   if ( MHDLinear_Dir == 3  &&  ( amr->BoxSize[0] != amr->BoxSize[1] || amr->BoxSize[0] != amr->BoxSize[2] )  )
TestProblem/Hydro/MHD_LinearWave/Init_TestProb_Hydro_MHD_LinearWave.cpp:135:   MHDLinear_WaveLength = ( MHDLinear_Dir == 3 ) ? amr->BoxSize[0]/sqrt(3.0) : amr->BoxSize[MHDLinear_Dir];
TestProblem/Hydro/MHD_OrszagTangVortex/Init_TestProb_Hydro_MHD_OrszagTangVortex.cpp:50:   if ( amr->BoxSize[0] != amr->BoxSize[1] )    Aux_Error( ERROR_INFO, "xy plane must be square !!\n" );
TestProblem/Hydro/MHD_OrszagTangVortex/Init_TestProb_Hydro_MHD_OrszagTangVortex.cpp:177:   const double kx = 2.0*M_PI/amr->BoxSize[0];
TestProblem/Hydro/MHD_OrszagTangVortex/Init_TestProb_Hydro_MHD_OrszagTangVortex.cpp:178:   const double ky = 2.0*M_PI/amr->BoxSize[1];
TestProblem/Hydro/MHD_OrszagTangVortex/Init_TestProb_Hydro_MHD_OrszagTangVortex.cpp:222:   const double kx = 2.0*M_PI/amr->BoxSize[0];
TestProblem/Hydro/MHD_OrszagTangVortex/Init_TestProb_Hydro_MHD_OrszagTangVortex.cpp:223:   const double ky = 4.0*M_PI/amr->BoxSize[1];
TestProblem/Hydro/Plummer/Init_TestProb_Hydro_Plummer.cpp:72:   if ( OPT__INIT == INIT_BY_FUNCTION  &&  amr->Par->Init != PAR_INIT_BY_FUNCTION )
TestProblem/Hydro/Plummer/Init_TestProb_Hydro_Plummer.cpp:154:      if ( Plummer_Center[d] == NoDef_double )  Plummer_Center[d] = 0.5*amr->BoxSize[d];
TestProblem/Hydro/Plummer/Par_Init_ByFunction_Plummer.cpp:38://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/Plummer/Par_Init_ByFunction_Plummer.cpp:150:               ParData_AllRank[PAR_POSX+d][p] = FMOD( ParData_AllRank[PAR_POSX+d][p]+(real)amr->BoxSize[d], (real)amr->BoxSize[d] );
TestProblem/Hydro/Riemann/Init_TestProb_Hydro_Riemann.cpp:136:   if ( Riemann_Pos   == NoDef_double )   Riemann_Pos   = amr->BoxCenter[Riemann_XYZ];
TestProblem/Hydro/SphericalCollapse/Init_TestProb_Hydro_SphericalCollapse.cpp:76:      if ( amr->BoxSize[0] != amr->BoxSize[1]  ||  amr->BoxSize[0] != amr->BoxSize[2] )
TestProblem/Hydro/SphericalCollapse/Init_TestProb_Hydro_SphericalCollapse.cpp:133:      if ( SphCol_Center[d] < 0.0 )    SphCol_Center[d] = 0.5*amr->BoxSize[d];
TestProblem/Hydro/Bondi/Flag_Bondi.cpp:20:// Parameter   :  i,j,k     : Indices of the targeted element in the patch ptr[ amr->FluSg[lv] ][lv][PID]
TestProblem/Hydro/Bondi/Flag_Bondi.cpp:32:   const double dh     = amr->dh[lv];
TestProblem/Hydro/Bondi/Flag_Bondi.cpp:33:   const double Pos[3] = { amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh,
TestProblem/Hydro/Bondi/Flag_Bondi.cpp:34:                           amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh,
TestProblem/Hydro/Bondi/Flag_Bondi.cpp:35:                           amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh  };
TestProblem/Hydro/Bondi/Flag_Bondi.cpp:41:   const double dr[3]   = { Pos[0]-amr->BoxCenter[0], Pos[1]-amr->BoxCenter[1], Pos[2]-amr->BoxCenter[2] };
TestProblem/Hydro/Bondi/Init_TestProb_Hydro_Bondi.cpp:145:      if ( amr->BoxSize[0] != amr->BoxSize[1]  ||  amr->BoxSize[0] != amr->BoxSize[2] )
TestProblem/Hydro/Bondi/Init_TestProb_Hydro_Bondi.cpp:252:   Bondi_InBC_R   = Bondi_InBC_NCell*amr->dh[MAX_LEVEL];
TestProblem/Hydro/Bondi/Init_TestProb_Hydro_Bondi.cpp:257:   Bondi_Soften_R = Bondi_Soften_NCell*amr->dh[MAX_LEVEL];
TestProblem/Hydro/Bondi/Init_TestProb_Hydro_Bondi.cpp:274:         Bondi_HSE_Dens_MinR = 0.1*amr->dh[MAX_LEVEL]*UNIT_L/UnitExt_L;
TestProblem/Hydro/Bondi/Init_TestProb_Hydro_Bondi.cpp:280:         Bondi_HSE_Dens_MaxR = (0.5*sqrt(3.0)*amr->BoxSize[0]+PS1*amr->dh[0])*UNIT_L/UnitExt_L;
TestProblem/Hydro/Bondi/Init_TestProb_Hydro_Bondi.cpp:431:      const double r = sqrt( SQR(x-amr->BoxCenter[0]) + SQR(y-amr->BoxCenter[1]) + SQR(z-amr->BoxCenter[2]) );
TestProblem/Hydro/Bondi/ExtAcc_Bondi.cpp:41:   AuxArray[0] = amr->BoxCenter[0];
TestProblem/Hydro/Bondi/ExtAcc_Bondi.cpp:42:   AuxArray[1] = amr->BoxCenter[1];
TestProblem/Hydro/Bondi/ExtAcc_Bondi.cpp:43:   AuxArray[2] = amr->BoxCenter[2];
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:60:      dr2[d] = SQR( Pos[d] - amr->BoxCenter[d] );
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:104:   const double dh       = amr->dh[lv];
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:122:   for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:124:      x0 = amr->patch[0][lv][PID]->EdgeL[0] + 0.5*dh;
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:125:      y0 = amr->patch[0][lv][PID]->EdgeL[1] + 0.5*dh;
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:126:      z0 = amr->patch[0][lv][PID]->EdgeL[2] + 0.5*dh;
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:134:            fluid   [v] = amr->patch[FluSg][lv][PID]->fluid[v][k][j][i];
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:149:            const real Emag = MHD_GetCellCenteredBEnergyInPatch( lv, PID, i, j, k, amr->MagSg[lv] );
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:174:            for (int v=0; v<NCOMP_TOTAL; v++)   amr->patch[FluSg][lv][PID]->fluid[v][k][j][i] = fluid[v];
TestProblem/Hydro/Bondi/Flu_ResetByUser_Bondi.cpp:197:   } // for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
TestProblem/Hydro/CMZ/Flag_CMZ.cpp:14:// Parameter   :  i,j,k       : Indices of the target element in the patch ptr[ amr->FluSg[lv] ][lv][PID]
TestProblem/Hydro/CMZ/Flag_CMZ.cpp:25:   const double dh     = amr->dh[lv];                                                  // grid size
TestProblem/Hydro/CMZ/Flag_CMZ.cpp:26:   const double Pos[3] = { amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh,              // x,y,z position
TestProblem/Hydro/CMZ/Flag_CMZ.cpp:27:                           amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh,
TestProblem/Hydro/CMZ/Flag_CMZ.cpp:28:                           amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh  };
TestProblem/Hydro/CMZ/Flag_CMZ.cpp:32:   const double EdgeR = amr->BoxSize[0]-Threshold[0];    // here we have assumed a cubic box
TestProblem/Hydro/CMZ/Init_TestProb_Hydro_CMZ.cpp:69:   if ( OPT__INIT == INIT_BY_FUNCTION  &&  amr->Par->Init != PAR_INIT_BY_FUNCTION )
TestProblem/Hydro/CMZ/Init_TestProb_Hydro_CMZ.cpp:148:       BarredPot_MeshCenter[d] = 0.5*amr->BoxSize[d];
TestProblem/Hydro/CMZ/Init_TestProb_Hydro_CMZ.cpp:310://   Pres       = Pres0*(  2.0 + sin( 2.0*M_PI*(4.5*x+5.5*y*6.5*z)/amr->BoxSize[2] )  );
TestProblem/Hydro/CMZ/Par_Init_ByFunction_BarredPot.cpp:16://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/Jet/Init_TestProb_Hydro_Jet.cpp:259:      for (int d=0; d<3; d++)    Jet_Cen[n][d] = 0.5*amr->BoxSize[d] + Jet_CenOffset[n][d];
TestProblem/Hydro/Jet/Init_TestProb_Hydro_Jet.cpp:384:      dy      = y - amr->BoxCenter[1] + Jet_HSE_D - Jet_BgVel[1]*Time;
TestProblem/Hydro/Jet/ExtAcc_Jet.cpp:41:   AuxArray[0] = amr->BoxCenter[0];                                    // [0-2]: cluster center
TestProblem/Hydro/Jet/ExtAcc_Jet.cpp:42:   AuxArray[1] = amr->BoxCenter[1] - Jet_HSE_D;
TestProblem/Hydro/Jet/ExtAcc_Jet.cpp:43:   AuxArray[2] = amr->BoxCenter[2];
TestProblem/Hydro/ParticleEquilibriumIC/Init_TestProb_Hydro_ParEqmIC.cpp:55:   if ( OPT__INIT == INIT_BY_FUNCTION  &&  amr->Par->Init != PAR_INIT_BY_FUNCTION )
TestProblem/Hydro/ParticleEquilibriumIC/Par_Init_ByFunction_ParEqmIC.cpp:19://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/CDM_LSS/Init_TestProb_Hydro_CDM_LSS.cpp:47:   if ( amr->Par->Init != PAR_INIT_BY_FILE  &&  amr->Par->Init != PAR_INIT_BY_RESTART )
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:149:   amr->Par->NPar_Active_AllRank = 0;
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:150:   if ( ParTest_Use_Massive )    amr->Par->NPar_Active_AllRank += 2;
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:151:   if ( ParTest_Use_Tracers )    amr->Par->NPar_Active_AllRank += ParTest_NPar[0]*ParTest_NPar[1]*ParTest_NPar[2];
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:152:   PRINT_WARNING( "PAR_NPAR", amr->Par->NPar_Active_AllRank, FORMAT_LONG );
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:205:   const double dr[2]     = { x - 0.5*amr->BoxSize[0], y - 0.5*amr->BoxSize[1] };
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:290:   const double dh     = amr->dh[lv];                                                  // grid size
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:291:   const double Pos[3] = { amr->patch[0][lv][PID]->EdgeL[0] + (i+0.5)*dh,              // x,y,z position
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:292:                           amr->patch[0][lv][PID]->EdgeL[1] + (j+0.5)*dh,
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:293:                           amr->patch[0][lv][PID]->EdgeL[2] + (k+0.5)*dh  };
TestProblem/Hydro/ParticleTest/Init_TestProb_Hydro_ParticleTest.cpp:295:   const double Center[3] = { 0.5*amr->BoxSize[0], 0.5*amr->BoxSize[1], 0.5*amr->BoxSize[2] };
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:25://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:99:            ParData_AllRank[PAR_POSX][p] = real( 0.5*amr->BoxSize[0] +
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:101:            ParData_AllRank[PAR_POSY][p] = real( 0.5*amr->BoxSize[1] );
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:102:            ParData_AllRank[PAR_POSZ][p] = real( 0.5*amr->BoxSize[2] );
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:117:         const double delta_p[3] = { 0.5*amr->BoxSize[0]/(ParTest_NPar[0]+1),
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:118:                                     0.5*amr->BoxSize[1]/(ParTest_NPar[1]+1),
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:119:                                     0.5*amr->BoxSize[2]/(ParTest_NPar[2]+1) };
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:131:                 (ii+1)*delta_p[0]+0.25*amr->BoxSize[0] );
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:133:                 (jj+1)*delta_p[1]+0.25*amr->BoxSize[1] );
TestProblem/Hydro/ParticleTest/Par_Init_ByFunction_ParticleTest.cpp:135:                 (kk+1)*delta_p[2]+0.25*amr->BoxSize[2] );
TestProblem/Hydro/Feedback/Par_Init_ByFunction_Feedback.cpp:15://                       (more specifically, outside the "active" region defined by amr->Par->RemoveCell)
TestProblem/Hydro/Feedback/Par_Init_ByFunction_Feedback.cpp:70:   const real boxsize   = amr->BoxSize[0/1/2];		     // size of test box
YT/YT_AddLocalGrid.cpp:39:      LBIdxList_Local        [lv] = new long [ amr->NPatchComma[lv][1] ];
YT/YT_AddLocalGrid.cpp:52:      for (int PID=0; PID<amr->NPatchComma[lv][1]; PID++)
YT/YT_AddLocalGrid.cpp:53:         LBIdxList_Local[lv][PID] = amr->patch[0][lv][PID]->LB_Idx;
YT/YT_AddLocalGrid.cpp:55:      MPI_Allgatherv( LBIdxList_Local[lv], amr->NPatchComma[lv][1], MPI_LONG,
YT/YT_AddLocalGrid.cpp:67:      const int FluSg = amr->FluSg[lv];
YT/YT_AddLocalGrid.cpp:69:      const int PotSg = amr->PotSg[lv];
YT/YT_AddLocalGrid.cpp:73:      const int MagSg = amr->MagSg[lv];
YT/YT_AddLocalGrid.cpp:77:      for (int PID=0; PID<(amr->NPatchComma[lv][1]); PID+=8)
YT/YT_AddLocalGrid.cpp:79:      for (int PID=0; PID<(amr->NPatchComma[lv][1]); PID++)
YT/YT_AddLocalGrid.cpp:87:            YT_Grids[LID].left_edge [d] = amr->patch[0][lv][PID    ]->EdgeL[d];
YT/YT_AddLocalGrid.cpp:88:            YT_Grids[LID].right_edge[d] = amr->patch[0][lv][PID + 7]->EdgeR[d];
YT/YT_AddLocalGrid.cpp:91:            YT_Grids[LID].left_edge [d] = amr->patch[0][lv][PID]->EdgeL[d];
YT/YT_AddLocalGrid.cpp:92:            YT_Grids[LID].right_edge[d] = amr->patch[0][lv][PID]->EdgeR[d];
YT/YT_AddLocalGrid.cpp:102:             particle_count += (long) amr->patch[0][lv][i]->NPar;
YT/YT_AddLocalGrid.cpp:107:         YT_Grids[LID].particle_count_list[0] = (long) amr->patch[0][lv][PID]->NPar;
YT/YT_AddLocalGrid.cpp:120:         int FaPID = amr->patch[0][lv][PID]->father;
YT/YT_AddLocalGrid.cpp:131:         else if ( FaPID < (amr->NPatchComma[FaLv][1]) ){
YT/YT_AddLocalGrid.cpp:144:                       lv, PID, FaPID, amr->NPatchComma[FaLv][1] );
YT/YT_AddLocalGrid.cpp:146:            if ( FaPID >= (amr->num[FaLv]) ){
YT/YT_AddLocalGrid.cpp:148:                           lv, PID, FaPID, amr->num[FaLv] );
YT/YT_AddLocalGrid.cpp:152:            long FaLBIdx = amr->patch[0][FaLv][FaPID]->LB_Idx;
YT/YT_AddLocalGrid.cpp:173:             YT_Grids[LID].field_data[v].data_ptr = amr->patch[FluSg][lv][PID]->fluid[v];
YT/YT_AddLocalGrid.cpp:186:         YT_Grids[LID].field_data[PotIdx].data_ptr = amr->patch[PotSg][lv][PID]->pot;
YT/YT_AddLocalGrid.cpp:201:             YT_Grids[LID].field_data[ MHDIdx + v ].data_ptr = amr->patch[MagSg][lv][PID]->magnetic[v];
YT/YT_GetParticleAttribute.cpp:39:            for (int p=0; p<amr->patch[0][level][PID0 + i]->NPar; p++){ // run through particle data in one PID
YT/YT_GetParticleAttribute.cpp:40:                ParID = amr->patch[0][level][PID0 + i]->ParList[p];
YT/YT_GetParticleAttribute.cpp:41:                ((real *) data_array[lid].data_ptr)[data_idx] = amr->Par->Attribute[ParAttr_Idx][ParID];
YT/YT_GetParticleAttribute.cpp:47:        for(int p=0; p<amr->patch[0][level][PID0]->NPar; p++){
YT/YT_GetParticleAttribute.cpp:48:            ParID = amr->patch[0][level][PID0]->ParList[p];
YT/YT_GetParticleAttribute.cpp:49:            ((real *) data_array[lid].data_ptr)[p] = amr->Par->Attribute[ParAttr_Idx][ParID];
YT/YT_Inline.cpp:66:      NPatchLocal[lv] = amr->NPatchComma[lv][1];
YT/YT_SetParameter.cpp:70:      param_yt.domain_right_edge[d] = amr->BoxSize[d];
Binary file gamer matches
